
SensorI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08009310  08009310  00019310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009798  08009798  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009798  08009798  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009798  08009798  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080097a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000648  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000081c  2000081c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fec7  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002195  00000000  00000000  0003010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e38  00000000  00000000  000322a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae3  00000000  00000000  000330e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c1a6  00000000  00000000  00033bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011248  00000000  00000000  0004fd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009ff58  00000000  00000000  00060fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f94  00000000  00000000  00100f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00105ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092f8 	.word	0x080092f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080092f8 	.word	0x080092f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_GPIO_Init+0x5c>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MX_I2C1_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <MX_I2C1_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d90:	f000 feb6 	bl	8001b00 <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 fa05 	bl	80011a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000da2:	f001 fc39 	bl	8002618 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 f9fc 	bl	80011a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000db4:	f001 fc7b 	bl	80026ae <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 f9f3 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001f0 	.word	0x200001f0
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	2000090e 	.word	0x2000090e

08000dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_I2C_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d127      	bne.n	8000e46 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_I2C_MspInit+0x80>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_I2C_MspInit+0x80>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6153      	str	r3, [r2, #20]
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_I2C_MspInit+0x80>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0e:	23c0      	movs	r3, #192	; 0xc0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_I2C_MspInit+0x84>)
 8000e2a:	f000 fcf7 	bl	800181c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_I2C_MspInit+0x80>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_I2C_MspInit+0x80>)
 8000e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_I2C_MspInit+0x80>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40005400 	.word	0x40005400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e60:	b08a      	sub	sp, #40	; 0x28
 8000e62:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	stmdev_ctx_t device_interface;
	device_interface.write_reg = i2cWrite_Accel;
 8000e64:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <main+0x198>)
 8000e66:	60bb      	str	r3, [r7, #8]
	device_interface.read_reg = i2cRead_Accel;
 8000e68:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <main+0x19c>)
 8000e6a:	60fb      	str	r3, [r7, #12]
	device_interface.mdelay = HAL_Delay;
 8000e6c:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <main+0x1a0>)
 8000e6e:	613b      	str	r3, [r7, #16]
	device_interface.handle = &hi2c1;
 8000e70:	4b63      	ldr	r3, [pc, #396]	; (8001000 <main+0x1a4>)
 8000e72:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 fb62 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f8ce 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f7ff ff3a 	bl	8000cf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e80:	f000 fabe 	bl	8001400 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e84:	f7ff ff66 	bl	8000d54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    uint8_t whoamI, rst;
	lis2dw12_device_id_get(&device_interface, &whoamI);
 8000e88:	1dfa      	adds	r2, r7, #7
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fd9e 	bl	80049d2 <lis2dw12_device_id_get>
	if (whoamI != LIS2DW12_ID)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b44      	cmp	r3, #68	; 0x44
 8000e9a:	d000      	beq.n	8000e9e <main+0x42>
	{
	  while(1);
 8000e9c:	e7fe      	b.n	8000e9c <main+0x40>
	}
	lis2dw12_reset_set(&device_interface, PROPERTY_ENABLE);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fda5 	bl	80049f4 <lis2dw12_reset_set>
	do
	{
	  lis2dw12_reset_get(&device_interface, &rst);
 8000eaa:	1dba      	adds	r2, r7, #6
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fdc4 	bl	8004a40 <lis2dw12_reset_get>
	} while(rst);
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f5      	bne.n	8000eaa <main+0x4e>

	 /* Enable Block Data Update */
	  lis2dw12_block_data_update_set(&device_interface, PROPERTY_ENABLE);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fcd4 	bl	8004872 <lis2dw12_block_data_update_set>
	  /* Set full scale */
	  lis2dw12_full_scale_set(&device_interface, LIS2DW12_2g);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fcf4 	bl	80048be <lis2dw12_full_scale_set>
	  /* Configure filtering chain
	   * Accelerometer - filter path / bandwidth
	   */
	  lis2dw12_filter_path_set(&device_interface, LIS2DW12_LPF_ON_OUT);
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fdc8 	bl	8004a72 <lis2dw12_filter_path_set>
	  lis2dw12_filter_bandwidth_set(&device_interface, LIS2DW12_ODR_DIV_4);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fe07 	bl	8004afc <lis2dw12_filter_bandwidth_set>
	  /* Configure power mode */
	  lis2dw12_power_mode_set(&device_interface, LIS2DW12_HIGH_PERFORMANCE);
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 fc29 	bl	800474c <lis2dw12_power_mode_set>
	  /* Set Output Data Rate */
	  lis2dw12_data_rate_set(&device_interface, LIS2DW12_XL_ODR_25Hz);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2103      	movs	r1, #3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fc71 	bl	80047e8 <lis2dw12_data_rate_set>


	  i2cRead_Gyro(0x0F,  &whoamI, 1);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	200f      	movs	r0, #15
 8000f0e:	f000 f92d 	bl	800116c <i2cRead_Gyro>
	  	if (whoamI != 0x68)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b68      	cmp	r3, #104	; 0x68
 8000f16:	d000      	beq.n	8000f1a <main+0xbe>
	  	{
	  	  while(1);
 8000f18:	e7fe      	b.n	8000f18 <main+0xbc>
	  	}
	  	i2cWrite_Gyro( 0x20, 0b00001111);
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2020      	movs	r0, #32
 8000f1e:	f000 f8eb 	bl	80010f8 <i2cWrite_Gyro>
	  	i2cWrite_Gyro(0x21, 0b00000000); // must be set to 0 to ensure proper operation of device
 8000f22:	2100      	movs	r1, #0
 8000f24:	2021      	movs	r0, #33	; 0x21
 8000f26:	f000 f8e7 	bl	80010f8 <i2cWrite_Gyro>
	  	i2cWrite_Gyro(0x23, 0b00000000);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2023      	movs	r0, #35	; 0x23
 8000f2e:	f000 f8e3 	bl	80010f8 <i2cWrite_Gyro>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t reg;
	      /* Read output only if new value is available */
	      lis2dw12_flag_data_ready_get(&device_interface, &reg);
 8000f32:	1d7a      	adds	r2, r7, #5
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fce5 	bl	800490a <lis2dw12_flag_data_ready_get>

	      if (reg) {
 8000f40:	797b      	ldrb	r3, [r7, #5]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f5      	beq.n	8000f32 <main+0xd6>
	        /* Read acceleration data */
	        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000f46:	2206      	movs	r2, #6
 8000f48:	2100      	movs	r1, #0
 8000f4a:	482e      	ldr	r0, [pc, #184]	; (8001004 <main+0x1a8>)
 8000f4c:	f004 fd97 	bl	8005a7e <memset>
	        lis2dw12_acceleration_raw_get(&device_interface, data_raw_acceleration);
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	492b      	ldr	r1, [pc, #172]	; (8001004 <main+0x1a8>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fcf0 	bl	800493c <lis2dw12_acceleration_raw_get>
	        acceleration_mg[0] = lis2dw12_from_fs2_to_mg(
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <main+0x1a8>)
 8000f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fbda 	bl	800471c <lis2dw12_from_fs2_to_mg>
 8000f68:	eef0 7a40 	vmov.f32	s15, s0
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <main+0x1ac>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
	                               data_raw_acceleration[0]);
	        acceleration_mg[1] = lis2dw12_from_fs2_to_mg(
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <main+0x1a8>)
 8000f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fbcf 	bl	800471c <lis2dw12_from_fs2_to_mg>
 8000f7e:	eef0 7a40 	vmov.f32	s15, s0
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <main+0x1ac>)
 8000f84:	edc3 7a01 	vstr	s15, [r3, #4]
	                               data_raw_acceleration[1]);
	        acceleration_mg[2] = lis2dw12_from_fs2_to_mg(
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <main+0x1a8>)
 8000f8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fbc4 	bl	800471c <lis2dw12_from_fs2_to_mg>
 8000f94:	eef0 7a40 	vmov.f32	s15, s0
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <main+0x1ac>)
 8000f9a:	edc3 7a02 	vstr	s15, [r3, #8]
	                               data_raw_acceleration[2]);
	        sprintf((char *)tx_buffer,"Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <main+0x1ac>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_f2d>
 8000fa8:	4680      	mov	r8, r0
 8000faa:	4689      	mov	r9, r1
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <main+0x1ac>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fac9 	bl	8000548 <__aeabi_f2d>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <main+0x1ac>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fac2 	bl	8000548 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fcc:	e9cd 4500 	strd	r4, r5, [sp]
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	490d      	ldr	r1, [pc, #52]	; (800100c <main+0x1b0>)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <main+0x1b4>)
 8000fd8:	f004 fcee 	bl	80059b8 <siprintf>
	        HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer), 200);
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <main+0x1b4>)
 8000fde:	f7ff f947 	bl	8000270 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	23c8      	movs	r3, #200	; 0xc8
 8000fe8:	4909      	ldr	r1, [pc, #36]	; (8001010 <main+0x1b4>)
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <main+0x1b8>)
 8000fec:	f002 ff7e 	bl	8003eec <HAL_UART_Transmit>
  {
 8000ff0:	e79f      	b.n	8000f32 <main+0xd6>
 8000ff2:	bf00      	nop
 8000ff4:	080010bd 	.word	0x080010bd
 8000ff8:	08001131 	.word	0x08001131
 8000ffc:	08001609 	.word	0x08001609
 8001000:	200001f0 	.word	0x200001f0
 8001004:	20000244 	.word	0x20000244
 8001008:	2000024c 	.word	0x2000024c
 800100c:	08009310 	.word	0x08009310
 8001010:	20000258 	.word	0x20000258
 8001014:	20000644 	.word	0x20000644

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	; 0x58
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001022:	2228      	movs	r2, #40	; 0x28
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fd29 	bl	8005a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fb71 	bl	8002748 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800106c:	f000 f89c 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fb9a 	bl	80037c4 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001096:	f000 f887 	bl	80011a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800109a:	2320      	movs	r3, #32
 800109c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fdad 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010b0:	f000 f87a 	bl	80011a8 <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3758      	adds	r7, #88	; 0x58
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <i2cWrite_Accel>:

/* USER CODE BEGIN 4 */
//wrapers for accelerometer driver
int32_t i2cWrite_Accel(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4613      	mov	r3, r2
 80010ce:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	893b      	ldrh	r3, [r7, #8]
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	2133      	movs	r1, #51	; 0x33
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 fda6 	bl	8001c38 <HAL_I2C_Mem_Write>
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <i2cWrite_Gyro>:

int32_t i2cWrite_Gyro( uint8_t reg, const uint8_t *bufp)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x68, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, 1, 1000);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	b29a      	uxth	r2, r3
 8001108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	2168      	movs	r1, #104	; 0x68
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <i2cWrite_Gyro+0x34>)
 800111c:	f000 fd8c 	bl	8001c38 <HAL_I2C_Mem_Write>
	return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001f0 	.word	0x200001f0

08001130 <i2cRead_Accel>:

int32_t i2cRead_Accel(void *handle, uint8_t reg,  uint8_t *bufp, uint16_t len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af04      	add	r7, sp, #16
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	461a      	mov	r2, r3
 800113c:	460b      	mov	r3, r1
 800113e:	72fb      	strb	r3, [r7, #11]
 8001140:	4613      	mov	r3, r2
 8001142:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	b29a      	uxth	r2, r3
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	893b      	ldrh	r3, [r7, #8]
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	2133      	movs	r1, #51	; 0x33
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 fe80 	bl	8001e60 <HAL_I2C_Mem_Read>
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <i2cRead_Gyro>:

int32_t i2cRead_Gyro( int8_t reg,  uint8_t *bufp, uint16_t len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0x68, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	b29a      	uxth	r2, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	2168      	movs	r1, #104	; 0x68
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <i2cRead_Gyro+0x38>)
 8001196:	f000 fe63 	bl	8001e60 <HAL_I2C_Mem_Read>
	return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001f0 	.word	0x200001f0

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x44>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x44>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x44>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x44>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f9be 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return 1;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_kill>:

int _kill(int pid, int sig)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800126a:	f004 fc5b 	bl	8005b24 <__errno>
 800126e:	4603      	mov	r3, r0
 8001270:	2216      	movs	r2, #22
 8001272:	601a      	str	r2, [r3, #0]
  return -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_exit>:

void _exit (int status)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ffe7 	bl	8001260 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001292:	e7fe      	b.n	8001292 <_exit+0x12>

08001294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00a      	b.n	80012bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a6:	f3af 8000 	nop.w
 80012aa:	4601      	mov	r1, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf0      	blt.n	80012a6 <_read+0x12>
  }

  return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e009      	b.n	80012f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf1      	blt.n	80012e0 <_write+0x12>
  }
  return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_close>:

int _close(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	605a      	str	r2, [r3, #4]
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_isatty>:

int _isatty(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f004 fbc0 	bl	8005b24 <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20003000 	.word	0x20003000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	20000640 	.word	0x20000640
 80013d8:	20000820 	.word	0x20000820

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <MX_USART2_UART_Init+0x5c>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800140c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0x58>)
 8001444:	f002 fd04 	bl	8003e50 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800144e:	f7ff feab 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000644 	.word	0x20000644
 800145c:	40004400 	.word	0x40004400

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0x80>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d129      	bne.n	80014d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x84>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_UART_MspInit+0x84>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80014b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f000 f9a3 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ec:	f7ff ff76 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopForever+0xe>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopForever+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f004 fb0b 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151a:	f7ff fc9f 	bl	8000e5c <main>

0800151e <LoopForever>:

LoopForever:
    b LoopForever
 800151e:	e7fe      	b.n	800151e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001520:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800152c:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 8001530:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001534:	2000081c 	.word	0x2000081c

08001538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC1_2_IRQHandler>
	...

0800153c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x28>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x28>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f931 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f808 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fe2c 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f93b 	bl	8001802 <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f000 f911 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	200006cc 	.word	0x200006cc

080015f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200006cc 	.word	0x200006cc

08001608 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff47 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff5c 	bl	8001698 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff8e 	bl	8001708 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffb0 	bl	8001770 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e14e      	b.n	8001aca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8140 	beq.w	8001ac4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 809a 	beq.w	8001ac4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_GPIO_Init+0x2cc>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_GPIO_Init+0x2cc>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x2cc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a8:	4a50      	ldr	r2, [pc, #320]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x1e0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a46      	ldr	r2, [pc, #280]	; (8001af0 <HAL_GPIO_Init+0x2d4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1dc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1d8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a44      	ldr	r2, [pc, #272]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1d4>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e006      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019f0:	2305      	movs	r3, #5
 80019f2:	e004      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019fc:	2300      	movs	r3, #0
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a0e:	4937      	ldr	r1, [pc, #220]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a40:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a46:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f aea9 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000
 8001af0:	48000400 	.word	0x48000400
 8001af4:	48000800 	.word	0x48000800
 8001af8:	48000c00 	.word	0x48000c00
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e08d      	b.n	8001c2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff f954 	bl	8000dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e006      	b.n	8001b88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d108      	bne.n	8001ba2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	e007      	b.n	8001bb2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69d9      	ldr	r1, [r3, #28]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	817b      	strh	r3, [r7, #10]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	f040 80f9 	bne.w	8001e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x34>
 8001c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0ed      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_Mem_Write+0x4e>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e0e6      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c8e:	f7ff fcaf 	bl	80015f0 <HAL_GetTick>
 8001c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2319      	movs	r3, #25
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fac3 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0d1      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2221      	movs	r2, #33	; 0x21
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd8:	88f8      	ldrh	r0, [r7, #6]
 8001cda:	893a      	ldrh	r2, [r7, #8]
 8001cdc:	8979      	ldrh	r1, [r7, #10]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f9d3 	bl	8002094 <I2C_RequestMemoryWrite>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0a9      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d90e      	bls.n	8001d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	22ff      	movs	r2, #255	; 0xff
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	8979      	ldrh	r1, [r7, #10]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fc47 	bl	80025b4 <I2C_TransferConfig>
 8001d26:	e00f      	b.n	8001d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fc36 	bl	80025b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fac6 	bl	80022de <I2C_WaitOnTXISFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e07b      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d034      	beq.n	8001e00 <HAL_I2C_Mem_Write+0x1c8>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d130      	bne.n	8001e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	2200      	movs	r2, #0
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fa3f 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e04d      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2bff      	cmp	r3, #255	; 0xff
 8001dc0:	d90e      	bls.n	8001de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	22ff      	movs	r2, #255	; 0xff
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	8979      	ldrh	r1, [r7, #10]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fbeb 	bl	80025b4 <I2C_TransferConfig>
 8001dde:	e00f      	b.n	8001e00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	8979      	ldrh	r1, [r7, #10]
 8001df2:	2300      	movs	r3, #0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fbda 	bl	80025b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d19e      	bne.n	8001d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 faac 	bl	800236c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e01a      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2220      	movs	r2, #32
 8001e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_I2C_Mem_Write+0x224>)
 8001e32:	400b      	ands	r3, r1
 8001e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e52:	2302      	movs	r3, #2
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	fe00e800 	.word	0xfe00e800

08001e60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	817b      	strh	r3, [r7, #10]
 8001e72:	460b      	mov	r3, r1
 8001e74:	813b      	strh	r3, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	f040 80fd 	bne.w	8002082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_I2C_Mem_Read+0x34>
 8001e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0f1      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Mem_Read+0x4e>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e0ea      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb6:	f7ff fb9b 	bl	80015f0 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2319      	movs	r3, #25
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f9af 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0d5      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2222      	movs	r2, #34	; 0x22
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a3a      	ldr	r2, [r7, #32]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f00:	88f8      	ldrh	r0, [r7, #6]
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	8979      	ldrh	r1, [r7, #10]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f913 	bl	800213c <I2C_RequestMemoryRead>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0ad      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	d90e      	bls.n	8001f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_I2C_Mem_Read+0x22c>)
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fb33 	bl	80025b4 <I2C_TransferConfig>
 8001f4e:	e00f      	b.n	8001f70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_I2C_Mem_Read+0x22c>)
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fb22 	bl	80025b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	2104      	movs	r1, #4
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f956 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07c      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d034      	beq.n	8002030 <HAL_I2C_Mem_Read+0x1d0>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d130      	bne.n	8002030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f927 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e04d      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2bff      	cmp	r3, #255	; 0xff
 8001ff0:	d90e      	bls.n	8002010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	8979      	ldrh	r1, [r7, #10]
 8002000:	2300      	movs	r3, #0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fad3 	bl	80025b4 <I2C_TransferConfig>
 800200e:	e00f      	b.n	8002030 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fac2 	bl	80025b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d19a      	bne.n	8001f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f994 	bl	800236c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e01a      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2220      	movs	r2, #32
 8002054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_I2C_Mem_Read+0x230>)
 8002062:	400b      	ands	r3, r1
 8002064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	80002400 	.word	0x80002400
 8002090:	fe00e800 	.word	0xfe00e800

08002094 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <I2C_RequestMemoryWrite+0xa4>)
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fa79 	bl	80025b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f909 	bl	80022de <I2C_WaitOnTXISFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e02c      	b.n	8002130 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020dc:	893b      	ldrh	r3, [r7, #8]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
 80020e6:	e015      	b.n	8002114 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020e8:	893b      	ldrh	r3, [r7, #8]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f8ef 	bl	80022de <I2C_WaitOnTXISFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e012      	b.n	8002130 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800210a:	893b      	ldrh	r3, [r7, #8]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2200      	movs	r2, #0
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f884 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	80002000 	.word	0x80002000

0800213c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	817b      	strh	r3, [r7, #10]
 800214e:	460b      	mov	r3, r1
 8002150:	813b      	strh	r3, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	8979      	ldrh	r1, [r7, #10]
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <I2C_RequestMemoryRead+0xa4>)
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fa26 	bl	80025b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f8b6 	bl	80022de <I2C_WaitOnTXISFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e02c      	b.n	80021d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002182:	893b      	ldrh	r3, [r7, #8]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
 800218c:	e015      	b.n	80021ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800218e:	893b      	ldrh	r3, [r7, #8]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f89c 	bl	80022de <I2C_WaitOnTXISFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e012      	b.n	80021d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f831 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	80002000 	.word	0x80002000

080021e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d103      	bne.n	8002202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d007      	beq.n	8002220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	619a      	str	r2, [r3, #24]
  }
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	e03b      	b.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8d6 	bl	80023f4 <I2C_IsErrorOccurred>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e041      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d02d      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	f7ff f9c9 	bl	80015f0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d302      	bcc.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x44>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d122      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	429a      	cmp	r2, r3
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	429a      	cmp	r2, r3
 800228c:	d113      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d0b4      	beq.n	800223e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ea:	e033      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f87f 	bl	80023f4 <I2C_IsErrorOccurred>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e031      	b.n	8002364 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002306:	d025      	beq.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002308:	f7ff f972 	bl	80015f0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d302      	bcc.n	800231e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11a      	bne.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d013      	beq.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e007      	b.n	8002364 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d1c4      	bne.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002378:	e02f      	b.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f838 	bl	80023f4 <I2C_IsErrorOccurred>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e02d      	b.n	80023ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff f92f 	bl	80015f0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11a      	bne.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d013      	beq.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e007      	b.n	80023ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d1c8      	bne.n	800237a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d068      	beq.n	80024f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002428:	e049      	b.n	80024be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d045      	beq.n	80024be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f8dd 	bl	80015f0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_IsErrorOccurred+0x54>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d13a      	bne.n	80024be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800245a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246a:	d121      	bne.n	80024b0 <I2C_IsErrorOccurred+0xbc>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002472:	d01d      	beq.n	80024b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b20      	cmp	r3, #32
 8002478:	d01a      	beq.n	80024b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002488:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800248a:	f7ff f8b1 	bl	80015f0 <HAL_GetTick>
 800248e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002490:	e00e      	b.n	80024b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002492:	f7ff f8ad 	bl	80015f0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b19      	cmp	r3, #25
 800249e:	d907      	bls.n	80024b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024ae:	e006      	b.n	80024be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d1e9      	bne.n	8002492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d003      	beq.n	80024d4 <I2C_IsErrorOccurred+0xe0>
 80024cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0aa      	beq.n	800242a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2220      	movs	r2, #32
 80024e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01c      	beq.n	80025a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fe3b 	bl	80021e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <I2C_IsErrorOccurred+0x1bc>)
 800257a:	400b      	ands	r3, r1
 800257c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	4613      	mov	r3, r2
 80025c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025cc:	7a7b      	ldrb	r3, [r7, #9]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	4313      	orrs	r3, r2
 80025de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	0d5b      	lsrs	r3, r3, #21
 80025ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <I2C_TransferConfig+0x60>)
 80025f4:	430b      	orrs	r3, r1
 80025f6:	43db      	mvns	r3, r3
 80025f8:	ea02 0103 	and.w	r1, r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	03ff63ff 	.word	0x03ff63ff

08002618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	d138      	bne.n	80026a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002638:	2302      	movs	r3, #2
 800263a:	e032      	b.n	80026a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800266a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d139      	bne.n	8002738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e033      	b.n	800273a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2224      	movs	r2, #36	; 0x24
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800274e:	af00      	add	r7, sp, #0
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002758:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f001 b823 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 817d 	beq.w	8002a7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002784:	4bbc      	ldr	r3, [pc, #752]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b04      	cmp	r3, #4
 800278e:	d00c      	beq.n	80027aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002790:	4bb9      	ldr	r3, [pc, #740]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d15c      	bne.n	8002856 <HAL_RCC_OscConfig+0x10e>
 800279c:	4bb6      	ldr	r3, [pc, #728]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d155      	bne.n	8002856 <HAL_RCC_OscConfig+0x10e>
 80027aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_OscConfig+0x94>
 80027d6:	4ba8      	ldr	r3, [pc, #672]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e015      	b.n	8002808 <HAL_RCC_OscConfig+0xc0>
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002804:	4b9c      	ldr	r3, [pc, #624]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800280c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002810:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002814:	fa92 f2a2 	rbit	r2, r2
 8002818:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800281c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f042 0220 	orr.w	r2, r2, #32
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f002 021f 	and.w	r2, r2, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 811f 	beq.w	8002a7c <HAL_RCC_OscConfig+0x334>
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 8116 	bne.w	8002a7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f000 bfaf 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x12e>
 8002868:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a82      	ldr	r2, [pc, #520]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e036      	b.n	80028e4 <HAL_RCC_OscConfig+0x19c>
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x158>
 8002886:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7b      	ldr	r2, [pc, #492]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a78      	ldr	r2, [pc, #480]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e021      	b.n	80028e4 <HAL_RCC_OscConfig+0x19c>
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x184>
 80028b2:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a70      	ldr	r2, [pc, #448]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a6d      	ldr	r2, [pc, #436]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0x19c>
 80028cc:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a66      	ldr	r2, [pc, #408]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f023 020f 	bic.w	r2, r3, #15
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	495f      	ldr	r1, [pc, #380]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d059      	beq.n	80029c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fe6f 	bl	80015f0 <HAL_GetTick>
 8002912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fe6a 	bl	80015f0 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b64      	cmp	r3, #100	; 0x64
 8002926:	d902      	bls.n	800292e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	f000 bf43 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
 800292e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002932:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002942:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d102      	bne.n	8002960 <HAL_RCC_OscConfig+0x218>
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e015      	b.n	800298c <HAL_RCC_OscConfig+0x244>
 8002960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002964:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002978:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800297c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002990:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002994:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f002 021f 	and.w	r2, r2, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ab      	beq.n	8002918 <HAL_RCC_OscConfig+0x1d0>
 80029c0:	e05d      	b.n	8002a7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe fe15 	bl	80015f0 <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe fe10 	bl	80015f0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b64      	cmp	r3, #100	; 0x64
 80029da:	d902      	bls.n	80029e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	f000 bee9 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
 80029e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2cc>
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x2f8>
 8002a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a18:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_RCC_OscConfig+0x330>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a44:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a4c:	fa92 f2a2 	rbit	r2, r2
 8002a50:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f002 021f 	and.w	r2, r2, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ab      	bne.n	80029cc <HAL_RCC_OscConfig+0x284>
 8002a74:	e003      	b.n	8002a7e <HAL_RCC_OscConfig+0x336>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 817d 	beq.w	8002d8e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a94:	4ba6      	ldr	r3, [pc, #664]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aa0:	4ba3      	ldr	r3, [pc, #652]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d172      	bne.n	8002b92 <HAL_RCC_OscConfig+0x44a>
 8002aac:	4ba0      	ldr	r3, [pc, #640]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d16c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x44a>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002aca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x3a0>
 8002ae2:	4b93      	ldr	r3, [pc, #588]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c8>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b0c:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2202      	movs	r2, #2
 8002b12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b1a:	fa92 f2a2 	rbit	r2, r2
 8002b1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f002 021f 	and.w	r2, r2, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCC_OscConfig+0x410>
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f000 be2e 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b75      	ldr	r3, [pc, #468]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	21f8      	movs	r1, #248	; 0xf8
 8002b6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b76:	fa91 f1a1 	rbit	r1, r1
 8002b7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b82:	fab1 f181 	clz	r1, r1
 8002b86:	b2c9      	uxtb	r1, r1
 8002b88:	408b      	lsls	r3, r1
 8002b8a:	4969      	ldr	r1, [pc, #420]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b90:	e0fd      	b.n	8002d8e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8088 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x56c>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2301      	movs	r3, #1
 8002bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fd0e 	bl	80015f0 <HAL_GetTick>
 8002bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fd09 	bl	80015f0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	f000 bde2 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4d8>
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e013      	b.n	8002c48 <HAL_RCC_OscConfig+0x500>
 8002c20:	2302      	movs	r3, #2
 8002c22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c44:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c52:	fa92 f2a2 	rbit	r2, r2
 8002c56:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c5e:	fab2 f282 	clz	r2, r2
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	f042 0220 	orr.w	r2, r2, #32
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	f002 021f 	and.w	r2, r2, #31
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f202 	lsl.w	r2, r1, r2
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0af      	beq.n	8002bda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	21f8      	movs	r1, #248	; 0xf8
 8002c90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c98:	fa91 f1a1 	rbit	r1, r1
 8002c9c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ca0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ca4:	fab1 f181 	clz	r1, r1
 8002ca8:	b2c9      	uxtb	r1, r1
 8002caa:	408b      	lsls	r3, r1
 8002cac:	4920      	ldr	r1, [pc, #128]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
 8002cb2:	e06c      	b.n	8002d8e <HAL_RCC_OscConfig+0x646>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fc86 	bl	80015f0 <HAL_GetTick>
 8002ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe fc81 	bl	80015f0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	f000 bd5a 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d104      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5ec>
 8002d2a:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <HAL_RCC_OscConfig+0x5e8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e015      	b.n	8002d5c <HAL_RCC_OscConfig+0x614>
 8002d30:	40021000 	.word	0x40021000
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d46:	2302      	movs	r3, #2
 8002d48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d58:	4bc8      	ldr	r3, [pc, #800]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ad      	bne.n	8002cea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8110 	beq.w	8002fc4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d079      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x760>
 8002db4:	2301      	movs	r3, #1
 8002db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4bab      	ldr	r3, [pc, #684]	; (8003080 <HAL_RCC_OscConfig+0x938>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2301      	movs	r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fc07 	bl	80015f0 <HAL_GetTick>
 8002de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fc02 	bl	80015f0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d902      	bls.n	8002dfe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	f000 bcdb 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e18:	2202      	movs	r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e64:	2102      	movs	r1, #2
 8002e66:	6019      	str	r1, [r3, #0]
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	fa93 f1a3 	rbit	r1, r3
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e7e:	6019      	str	r1, [r3, #0]
  return result;
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0a0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x6a0>
 8002ea6:	e08d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x87c>
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f2a3 	rbit	r2, r3
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eca:	601a      	str	r2, [r3, #0]
  return result;
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ed4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b68      	ldr	r3, [pc, #416]	; (8003080 <HAL_RCC_OscConfig+0x938>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fb81 	bl	80015f0 <HAL_GetTick>
 8002eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fb7c 	bl	80015f0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d902      	bls.n	8002f0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f000 bc55 	b.w	80037b4 <HAL_RCC_OscConfig+0x106c>
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f36:	2202      	movs	r2, #2
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f82:	2102      	movs	r1, #2
 8002f84:	6019      	str	r1, [r3, #0]
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f1a3 	rbit	r1, r3
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f9c:	6019      	str	r1, [r3, #0]
  return result;
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d197      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 81a1 	beq.w	800331c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fec:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	61d3      	str	r3, [r2, #28]
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003012:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_OscConfig+0x93c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_RCC_OscConfig+0x93c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a16      	ldr	r2, [pc, #88]	; (8003084 <HAL_RCC_OscConfig+0x93c>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fadd 	bl	80015f0 <HAL_GetTick>
 8003036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	e009      	b.n	8003050 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe fad8 	bl	80015f0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e3b1      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x93c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <HAL_RCC_OscConfig+0x940>
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x934>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4a02      	ldr	r2, [pc, #8]	; (800307c <HAL_RCC_OscConfig+0x934>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6213      	str	r3, [r2, #32]
 8003078:	e03c      	b.n	80030f4 <HAL_RCC_OscConfig+0x9ac>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	10908120 	.word	0x10908120
 8003084:	40007000 	.word	0x40007000
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x96a>
 8003098:	4bc1      	ldr	r3, [pc, #772]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4ac0      	ldr	r2, [pc, #768]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6213      	str	r3, [r2, #32]
 80030a4:	4bbe      	ldr	r3, [pc, #760]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4abd      	ldr	r2, [pc, #756]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	e020      	b.n	80030f4 <HAL_RCC_OscConfig+0x9ac>
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x994>
 80030c2:	4bb7      	ldr	r3, [pc, #732]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4ab6      	ldr	r2, [pc, #728]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6213      	str	r3, [r2, #32]
 80030ce:	4bb4      	ldr	r3, [pc, #720]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4ab3      	ldr	r2, [pc, #716]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0x9ac>
 80030dc:	4bb0      	ldr	r3, [pc, #704]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4aaf      	ldr	r2, [pc, #700]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	4bad      	ldr	r3, [pc, #692]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4aac      	ldr	r2, [pc, #688]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8081 	beq.w	8003208 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fa73 	bl	80015f0 <HAL_GetTick>
 800310a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fe fa6e 	bl	80015f0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e345      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003130:	2202      	movs	r2, #2
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800316e:	601a      	str	r2, [r3, #0]
  return result;
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d102      	bne.n	8003194 <HAL_RCC_OscConfig+0xa4c>
 800318e:	4b84      	ldr	r3, [pc, #528]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	e013      	b.n	80031bc <HAL_RCC_OscConfig+0xa74>
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800319c:	2202      	movs	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	fa93 f2a3 	rbit	r2, r3
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031c4:	2102      	movs	r1, #2
 80031c6:	6011      	str	r1, [r2, #0]
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	fa92 f1a2 	rbit	r1, r2
 80031d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031de:	6011      	str	r1, [r2, #0]
  return result;
 80031e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	fab2 f282 	clz	r2, r2
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f002 021f 	and.w	r2, r2, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d084      	beq.n	8003110 <HAL_RCC_OscConfig+0x9c8>
 8003206:	e07f      	b.n	8003308 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe f9f2 	bl	80015f0 <HAL_GetTick>
 800320c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	e00b      	b.n	800322a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe f9ed 	bl	80015f0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e2c4      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003270:	601a      	str	r2, [r3, #0]
  return result;
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800327a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d102      	bne.n	8003296 <HAL_RCC_OscConfig+0xb4e>
 8003290:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	e013      	b.n	80032be <HAL_RCC_OscConfig+0xb76>
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800329e:	2202      	movs	r2, #2
 80032a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032c6:	2102      	movs	r1, #2
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fa92 f1a2 	rbit	r1, r2
 80032d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032e0:	6011      	str	r1, [r2, #0]
  return result;
 80032e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	fab2 f282 	clz	r2, r2
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	f002 021f 	and.w	r2, r2, #31
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d184      	bne.n	8003212 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003308:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8242 	beq.w	80037b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332e:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <HAL_RCC_OscConfig+0xc58>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	f000 8213 	beq.w	8003762 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b02      	cmp	r3, #2
 800334a:	f040 8162 	bne.w	8003612 <HAL_RCC_OscConfig+0xeca>
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003356:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800335a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	fa93 f2a3 	rbit	r2, r3
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003372:	601a      	str	r2, [r3, #0]
  return result;
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800337c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	461a      	mov	r2, r3
 8003390:	2300      	movs	r3, #0
 8003392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe f92c 	bl	80015f0 <HAL_GetTick>
 8003398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339c:	e00c      	b.n	80033b8 <HAL_RCC_OscConfig+0xc70>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe f924 	bl	80015f0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1fd      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f2a3 	rbit	r2, r3
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033dc:	601a      	str	r2, [r3, #0]
  return result;
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_OscConfig+0xcba>
 80033fc:	4bb0      	ldr	r3, [pc, #704]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	e027      	b.n	8003452 <HAL_RCC_OscConfig+0xd0a>
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800340a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	fa93 f2a3 	rbit	r2, r3
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fa93 f2a3 	rbit	r2, r3
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003456:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800345a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800345e:	6011      	str	r1, [r2, #0]
 8003460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003464:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	fa92 f1a2 	rbit	r1, r2
 800346e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003472:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003476:	6011      	str	r1, [r2, #0]
  return result;
 8003478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	fab2 f282 	clz	r2, r2
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f042 0220 	orr.w	r2, r2, #32
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f002 021f 	and.w	r2, r2, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d182      	bne.n	80033a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	430b      	orrs	r3, r1
 80034c0:	497f      	ldr	r1, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034ea:	601a      	str	r2, [r3, #0]
  return result;
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	461a      	mov	r2, r3
 8003508:	2301      	movs	r3, #1
 800350a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe f870 	bl	80015f0 <HAL_GetTick>
 8003510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003514:	e009      	b.n	800352a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe f86b 	bl	80015f0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e144      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
 800352a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800354e:	601a      	str	r2, [r3, #0]
  return result;
 8003550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003554:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003558:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <HAL_RCC_OscConfig+0xe2c>
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	e027      	b.n	80035c4 <HAL_RCC_OscConfig+0xe7c>
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800357c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	fa93 f2a3 	rbit	r2, r3
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	fa92 f1a2 	rbit	r1, r2
 80035e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035e8:	6011      	str	r1, [r2, #0]
  return result;
 80035ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0220 	orr.w	r2, r2, #32
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d082      	beq.n	8003516 <HAL_RCC_OscConfig+0xdce>
 8003610:	e0cf      	b.n	80037b2 <HAL_RCC_OscConfig+0x106a>
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800361a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003636:	601a      	str	r2, [r3, #0]
  return result;
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003640:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800364c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fd ffca 	bl	80015f0 <HAL_GetTick>
 800365c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	e009      	b.n	8003676 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd ffc5 	bl	80015f0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e09e      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800367e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800369a:	601a      	str	r2, [r3, #0]
  return result;
 800369c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d104      	bne.n	80036c4 <HAL_RCC_OscConfig+0xf7c>
 80036ba:	4b01      	ldr	r3, [pc, #4]	; (80036c0 <HAL_RCC_OscConfig+0xf78>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e029      	b.n	8003714 <HAL_RCC_OscConfig+0xfcc>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	fa93 f2a3 	rbit	r2, r3
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_OscConfig+0x1078>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003718:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800371c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003726:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	fa92 f1a2 	rbit	r1, r2
 8003730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003734:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003738:	6011      	str	r1, [r2, #0]
  return result;
 800373a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d180      	bne.n	8003662 <HAL_RCC_OscConfig+0xf1a>
 8003760:	e027      	b.n	80037b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e01e      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_OscConfig+0x1078>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800377e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003782:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	429a      	cmp	r2, r3
 8003794:	d10b      	bne.n	80037ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003796:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800379a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b09e      	sub	sp, #120	; 0x78
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e162      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b90      	ldr	r3, [pc, #576]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 0207 	bic.w	r2, r3, #7
 80037f2:	498b      	ldr	r1, [pc, #556]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e14a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b82      	ldr	r3, [pc, #520]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	497f      	ldr	r1, [pc, #508]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80dc 	beq.w	80039f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d13c      	bne.n	80038ba <HAL_RCC_ClockConfig+0xf6>
 8003840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003844:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d102      	bne.n	800386a <HAL_RCC_ClockConfig+0xa6>
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	e00f      	b.n	800388a <HAL_RCC_ClockConfig+0xc6>
 800386a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	667b      	str	r3, [r7, #100]	; 0x64
 8003878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800388e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003892:	fa92 f2a2 	rbit	r2, r2
 8003896:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800389a:	fab2 f282 	clz	r2, r2
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	f042 0220 	orr.w	r2, r2, #32
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	f002 021f 	and.w	r2, r2, #31
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d17b      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0f3      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d13c      	bne.n	800393c <HAL_RCC_ClockConfig+0x178>
 80038c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_ClockConfig+0x128>
 80038e6:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e00f      	b.n	800390c <HAL_RCC_ClockConfig+0x148>
 80038ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003910:	63ba      	str	r2, [r7, #56]	; 0x38
 8003912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003914:	fa92 f2a2 	rbit	r2, r2
 8003918:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800391a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f002 021f 	and.w	r2, r2, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13a      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b2      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
 800393c:	2302      	movs	r3, #2
 800393e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_RCC_ClockConfig+0x1a0>
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e00d      	b.n	8003980 <HAL_RCC_ClockConfig+0x1bc>
 8003964:	2302      	movs	r3, #2
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2202      	movs	r2, #2
 8003982:	61ba      	str	r2, [r7, #24]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	fa92 f2a2 	rbit	r2, r2
 800398a:	617a      	str	r2, [r7, #20]
  return result;
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0220 	orr.w	r2, r2, #32
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e079      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c0:	f7fd fe16 	bl	80015f0 <HAL_GetTick>
 80039c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fe12 	bl	80015f0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e061      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d214      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	4906      	ldr	r1, [pc, #24]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e040      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x2de>
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	491a      	ldr	r1, [pc, #104]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4912      	ldr	r1, [pc, #72]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a66:	f000 f829 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_ClockConfig+0x2e8>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	22f0      	movs	r2, #240	; 0xf0
 8003a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	fa92 f2a2 	rbit	r2, r2
 8003a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	40d3      	lsrs	r3, r2
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fd64 	bl	8001568 <HAL_InitTick>
  
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3778      	adds	r7, #120	; 0x78
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08009338 	.word	0x08009338
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d002      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x30>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x36>
 8003aea:	e026      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aee:	613b      	str	r3, [r7, #16]
      break;
 8003af0:	e026      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003afc:	5cd3      	ldrb	r3, [r2, r3]
 8003afe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e004      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b3c:	613b      	str	r3, [r7, #16]
      break;
 8003b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b40:	693b      	ldr	r3, [r7, #16]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	007a1200 	.word	0x007a1200
 8003b58:	08009350 	.word	0x08009350
 8003b5c:	08009360 	.word	0x08009360
 8003b60:	003d0900 	.word	0x003d0900

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b82:	f7ff ffef 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	fa92 f2a2 	rbit	r2, r2
 8003b9c:	603a      	str	r2, [r7, #0]
  return result;
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	fab2 f282 	clz	r2, r2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	40d3      	lsrs	r3, r2
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	08009348 	.word	0x08009348

08003bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bc6:	f7ff ffcd 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bca:	4601      	mov	r1, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bd4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	fa92 f2a2 	rbit	r2, r2
 8003be0:	603a      	str	r2, [r7, #0]
  return result;
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	fab2 f282 	clz	r2, r2
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	40d3      	lsrs	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	08009348 	.word	0x08009348

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b092      	sub	sp, #72	; 0x48
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80cd 	beq.w	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c28:	4b86      	ldr	r3, [pc, #536]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10e      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b83      	ldr	r3, [pc, #524]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4a82      	ldr	r2, [pc, #520]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	61d3      	str	r3, [r2, #28]
 8003c40:	4b80      	ldr	r3, [pc, #512]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	4b7d      	ldr	r3, [pc, #500]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5e:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a79      	ldr	r2, [pc, #484]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fcc1 	bl	80015f0 <HAL_GetTick>
 8003c6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	e008      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fd fcbd 	bl	80015f0 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	; 0x64
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0db      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	4b70      	ldr	r3, [pc, #448]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c90:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d07d      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d076      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b5e      	ldr	r3, [pc, #376]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2301      	movs	r3, #1
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b55      	ldr	r3, [pc, #340]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d00:	4a50      	ldr	r2, [pc, #320]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d045      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd fc6e 	bl	80015f0 <HAL_GetTick>
 8003d14:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fd fc6a 	bl	80015f0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e086      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	61fb      	str	r3, [r7, #28]
  return result;
 8003d46:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f043 0302 	orr.w	r3, r3, #2
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	e007      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2202      	movs	r2, #2
 8003d74:	613a      	str	r2, [r7, #16]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	fa92 f2a2 	rbit	r2, r2
 8003d7c:	60fa      	str	r2, [r7, #12]
  return result;
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	fab2 f282 	clz	r2, r2
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	f002 021f 	and.w	r2, r2, #31
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f202 	lsl.w	r2, r1, r2
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0bd      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4926      	ldr	r1, [pc, #152]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d105      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	491a      	ldr	r1, [pc, #104]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f023 0210 	bic.w	r2, r3, #16
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4912      	ldr	r1, [pc, #72]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	490b      	ldr	r1, [pc, #44]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3748      	adds	r7, #72	; 0x48
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	10908100 	.word	0x10908100

08003e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e040      	b.n	8003ee4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd faf4 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9e8 	bl	800426c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8af 	bl	8004000 <UART_SetConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e01b      	b.n	8003ee4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa67 	bl	80043b0 <UART_CheckIdleState>
 8003ee2:	4603      	mov	r3, r0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d178      	bne.n	8003ff6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_UART_Transmit+0x24>
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e071      	b.n	8003ff8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2221      	movs	r2, #33	; 0x21
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f22:	f7fd fb65 	bl	80015f0 <HAL_GetTick>
 8003f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f40:	d108      	bne.n	8003f54 <HAL_UART_Transmit+0x68>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e003      	b.n	8003f5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f5c:	e030      	b.n	8003fc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2180      	movs	r1, #128	; 0x80
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fac9 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e03c      	b.n	8003ff8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	881a      	ldrh	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f90:	b292      	uxth	r2, r2
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	3302      	adds	r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e008      	b.n	8003fae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1c8      	bne.n	8003f5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa92 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e005      	b.n	8003ff8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <UART_SetConfig+0x254>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	430b      	orrs	r3, r1
 8004036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a78      	ldr	r2, [pc, #480]	; (8004258 <UART_SetConfig+0x258>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d120      	bne.n	80040be <UART_SetConfig+0xbe>
 800407c:	4b77      	ldr	r3, [pc, #476]	; (800425c <UART_SetConfig+0x25c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d817      	bhi.n	80040b8 <UART_SetConfig+0xb8>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x90>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040ad 	.word	0x080040ad
 8004098:	080040b3 	.word	0x080040b3
 800409c:	080040a7 	.word	0x080040a7
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e01d      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
 80040aa:	e01a      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040ac:	2304      	movs	r3, #4
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e017      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040b2:	2308      	movs	r3, #8
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e014      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040b8:	2310      	movs	r3, #16
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e011      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a67      	ldr	r2, [pc, #412]	; (8004260 <UART_SetConfig+0x260>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d102      	bne.n	80040ce <UART_SetConfig+0xce>
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e009      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a64      	ldr	r2, [pc, #400]	; (8004264 <UART_SetConfig+0x264>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d102      	bne.n	80040de <UART_SetConfig+0xde>
 80040d8:	2300      	movs	r3, #0
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e001      	b.n	80040e2 <UART_SetConfig+0xe2>
 80040de:	2310      	movs	r3, #16
 80040e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d15a      	bne.n	80041a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d827      	bhi.n	8004142 <UART_SetConfig+0x142>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0xf8>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004143 	.word	0x08004143
 8004108:	08004133 	.word	0x08004133
 800410c:	08004143 	.word	0x08004143
 8004110:	08004143 	.word	0x08004143
 8004114:	08004143 	.word	0x08004143
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7ff fd2e 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004120:	61b8      	str	r0, [r7, #24]
        break;
 8004122:	e013      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff fd4c 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8004128:	61b8      	str	r0, [r7, #24]
        break;
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <UART_SetConfig+0x268>)
 800412e:	61bb      	str	r3, [r7, #24]
        break;
 8004130:	e00c      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7ff fcc3 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004136:	61b8      	str	r0, [r7, #24]
        break;
 8004138:	e008      	b.n	800414c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	61bb      	str	r3, [r7, #24]
        break;
 8004140:	e004      	b.n	800414c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	77bb      	strb	r3, [r7, #30]
        break;
 800414a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d074      	beq.n	800423c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	005a      	lsls	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	d916      	bls.n	800419c <UART_SetConfig+0x19c>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004174:	d212      	bcs.n	800419c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f023 030f 	bic.w	r3, r3, #15
 800417e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	b29a      	uxth	r2, r3
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	4313      	orrs	r3, r2
 8004190:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	89fa      	ldrh	r2, [r7, #14]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e04f      	b.n	800423c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	77bb      	strb	r3, [r7, #30]
 80041a0:	e04c      	b.n	800423c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d828      	bhi.n	80041fa <UART_SetConfig+0x1fa>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x1b0>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7ff fcd2 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80041d8:	61b8      	str	r0, [r7, #24]
        break;
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7ff fcf0 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80041e0:	61b8      	str	r0, [r7, #24]
        break;
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <UART_SetConfig+0x268>)
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e00c      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7ff fc67 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 80041ee:	61b8      	str	r0, [r7, #24]
        break;
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77bb      	strb	r3, [r7, #30]
        break;
 8004202:	bf00      	nop
    }

    if (pclk != 0U)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d018      	beq.n	800423c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085a      	lsrs	r2, r3, #1
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	441a      	add	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d909      	bls.n	8004238 <UART_SetConfig+0x238>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d205      	bcs.n	8004238 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	e001      	b.n	800423c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004248:	7fbb      	ldrb	r3, [r7, #30]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	efff69f3 	.word	0xefff69f3
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	40004400 	.word	0x40004400
 8004264:	40004800 	.word	0x40004800
 8004268:	007a1200 	.word	0x007a1200

0800426c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d10a      	bne.n	8004382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b098      	sub	sp, #96	; 0x60
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c0:	f7fd f916 	bl	80015f0 <HAL_GetTick>
 80043c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d12e      	bne.n	8004432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f88c 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d021      	beq.n	8004432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004402:	653b      	str	r3, [r7, #80]	; 0x50
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
 800440e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800441a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e062      	b.n	80044f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d149      	bne.n	80044d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004448:	2200      	movs	r2, #0
 800444a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f856 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03c      	beq.n	80044d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	623b      	str	r3, [r7, #32]
   return(result);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004478:	633b      	str	r3, [r7, #48]	; 0x30
 800447a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800447e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e6      	bne.n	800445a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60fb      	str	r3, [r7, #12]
   return(result);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ac:	61fa      	str	r2, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e011      	b.n	80044f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3758      	adds	r7, #88	; 0x58
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e04f      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d04b      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fd f869 	bl	80015f0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e04e      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d037      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d034      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d031      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d110      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2208      	movs	r2, #8
 8004562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f838 	bl	80045da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2208      	movs	r2, #8
 800456e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e029      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458c:	d111      	bne.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f81e 	bl	80045da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e00f      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d0a0      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045da:	b480      	push	{r7}
 80045dc:	b095      	sub	sp, #84	; 0x54
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	643b      	str	r3, [r7, #64]	; 0x40
 8004602:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e6      	bne.n	80045e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	61fb      	str	r3, [r7, #28]
   return(result);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	2b01      	cmp	r3, #1
 800464e:	d118      	bne.n	8004682 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	60bb      	str	r3, [r7, #8]
   return(result);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	613b      	str	r3, [r7, #16]
   return(result);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004696:	bf00      	nop
 8004698:	3754      	adds	r7, #84	; 0x54
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80046a2:	b590      	push	{r4, r7, lr}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	461a      	mov	r2, r3
 80046ae:	460b      	mov	r3, r1
 80046b0:	72fb      	strb	r3, [r7, #11]
 80046b2:	4613      	mov	r3, r2
 80046b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <lis2dw12_read_reg+0x20>
  {
    return -1;
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	e009      	b.n	80046d6 <lis2dw12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685c      	ldr	r4, [r3, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68d8      	ldr	r0, [r3, #12]
 80046ca:	893b      	ldrh	r3, [r7, #8]
 80046cc:	7af9      	ldrb	r1, [r7, #11]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	47a0      	blx	r4
 80046d2:	6178      	str	r0, [r7, #20]

  return ret;
 80046d4:	697b      	ldr	r3, [r7, #20]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd90      	pop	{r4, r7, pc}

080046de <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80046de:	b590      	push	{r4, r7, lr}
 80046e0:	b087      	sub	sp, #28
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	461a      	mov	r2, r3
 80046ea:	460b      	mov	r3, r1
 80046ec:	72fb      	strb	r3, [r7, #11]
 80046ee:	4613      	mov	r3, r2
 80046f0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <lis2dw12_write_reg+0x20>
  {
    return -1;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	e009      	b.n	8004712 <lis2dw12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681c      	ldr	r4, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68d8      	ldr	r0, [r3, #12]
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	7af9      	ldrb	r1, [r7, #11]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	47a0      	blx	r4
 800470e:	6178      	str	r0, [r7, #20]

  return ret;
 8004710:	697b      	ldr	r3, [r7, #20]
}
 8004712:	4618      	mov	r0, r3
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd90      	pop	{r4, r7, pc}
	...

0800471c <lis2dw12_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis2dw12_from_fs2_to_mg(int16_t lsb)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8004726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004732:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004748 <lis2dw12_from_fs2_to_mg+0x2c>
 8004736:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800473a:	eeb0 0a67 	vmov.f32	s0, s15
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	3d79db23 	.word	0x3d79db23

0800474c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004758:	f107 0210 	add.w	r2, r7, #16
 800475c:	2301      	movs	r3, #1
 800475e:	2120      	movs	r1, #32
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff9e 	bl	80046a2 <lis2dw12_read_reg>
 8004766:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	b2da      	uxtb	r2, r3
 8004778:	7c3b      	ldrb	r3, [r7, #16]
 800477a:	f362 0383 	bfi	r3, r2, #2, #2
 800477e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	b2da      	uxtb	r2, r3
 8004788:	7c3b      	ldrb	r3, [r7, #16]
 800478a:	f362 0301 	bfi	r3, r2, #0, #2
 800478e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004790:	f107 0210 	add.w	r2, r7, #16
 8004794:	2301      	movs	r3, #1
 8004796:	2120      	movs	r1, #32
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ffa0 	bl	80046de <lis2dw12_write_reg>
 800479e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d107      	bne.n	80047b6 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80047a6:	f107 020c 	add.w	r2, r7, #12
 80047aa:	2301      	movs	r3, #1
 80047ac:	2125      	movs	r1, #37	; 0x25
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff77 	bl	80046a2 <lis2dw12_read_reg>
 80047b4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d110      	bne.n	80047de <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	7b3b      	ldrb	r3, [r7, #12]
 80047c8:	f362 0382 	bfi	r3, r2, #2, #1
 80047cc:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80047ce:	f107 020c 	add.w	r2, r7, #12
 80047d2:	2301      	movs	r3, #1
 80047d4:	2125      	movs	r1, #37	; 0x25
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ff81 	bl	80046de <lis2dw12_write_reg>
 80047dc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047f4:	f107 0210 	add.w	r2, r7, #16
 80047f8:	2301      	movs	r3, #1
 80047fa:	2120      	movs	r1, #32
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff50 	bl	80046a2 <lis2dw12_read_reg>
 8004802:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	b2da      	uxtb	r2, r3
 8004812:	7c3b      	ldrb	r3, [r7, #16]
 8004814:	f362 1307 	bfi	r3, r2, #4, #4
 8004818:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800481a:	f107 0210 	add.w	r2, r7, #16
 800481e:	2301      	movs	r3, #1
 8004820:	2120      	movs	r1, #32
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff5b 	bl	80046de <lis2dw12_write_reg>
 8004828:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004830:	f107 020c 	add.w	r2, r7, #12
 8004834:	2301      	movs	r3, #1
 8004836:	2122      	movs	r1, #34	; 0x22
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff32 	bl	80046a2 <lis2dw12_read_reg>
 800483e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d110      	bne.n	8004868 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	b2da      	uxtb	r2, r3
 8004850:	7b3b      	ldrb	r3, [r7, #12]
 8004852:	f362 0301 	bfi	r3, r2, #0, #2
 8004856:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004858:	f107 020c 	add.w	r2, r7, #12
 800485c:	2301      	movs	r3, #1
 800485e:	2122      	movs	r1, #34	; 0x22
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ff3c 	bl	80046de <lis2dw12_write_reg>
 8004866:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004868:	697b      	ldr	r3, [r7, #20]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800487e:	f107 0208 	add.w	r2, r7, #8
 8004882:	2301      	movs	r3, #1
 8004884:	2121      	movs	r1, #33	; 0x21
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff0b 	bl	80046a2 <lis2dw12_read_reg>
 800488c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	7a3b      	ldrb	r3, [r7, #8]
 800489e:	f362 03c3 	bfi	r3, r2, #3, #1
 80048a2:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80048a4:	f107 0208 	add.w	r2, r7, #8
 80048a8:	2301      	movs	r3, #1
 80048aa:	2121      	movs	r1, #33	; 0x21
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff16 	bl	80046de <lis2dw12_write_reg>
 80048b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80048ca:	f107 0208 	add.w	r2, r7, #8
 80048ce:	2301      	movs	r3, #1
 80048d0:	2125      	movs	r1, #37	; 0x25
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fee5 	bl	80046a2 <lis2dw12_read_reg>
 80048d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10f      	bne.n	8004900 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	7a3b      	ldrb	r3, [r7, #8]
 80048ea:	f362 1305 	bfi	r3, r2, #4, #2
 80048ee:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80048f0:	f107 0208 	add.w	r2, r7, #8
 80048f4:	2301      	movs	r3, #1
 80048f6:	2125      	movs	r1, #37	; 0x25
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fef0 	bl	80046de <lis2dw12_write_reg>
 80048fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004900:	68fb      	ldr	r3, [r7, #12]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 8004914:	f107 0208 	add.w	r2, r7, #8
 8004918:	2301      	movs	r3, #1
 800491a:	2127      	movs	r1, #39	; 0x27
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fec0 	bl	80046a2 <lis2dw12_read_reg>
 8004922:	60f8      	str	r0, [r7, #12]
  *val = reg.drdy;
 8004924:	7a3b      	ldrb	r3, [r7, #8]
 8004926:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	701a      	strb	r2, [r3, #0]

  return ret;
 8004932:	68fb      	ldr	r3, [r7, #12]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004946:	f107 020c 	add.w	r2, r7, #12
 800494a:	2306      	movs	r3, #6
 800494c:	2128      	movs	r1, #40	; 0x28
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fea7 	bl	80046a2 <lis2dw12_read_reg>
 8004954:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004956:	7b7b      	ldrb	r3, [r7, #13]
 8004958:	b21a      	sxth	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004964:	b29b      	uxth	r3, r3
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	b29a      	uxth	r2, r3
 800496a:	7b3b      	ldrb	r3, [r7, #12]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4413      	add	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	b21a      	sxth	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	3302      	adds	r3, #2
 800497e:	b212      	sxth	r2, r2
 8004980:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	3302      	adds	r3, #2
 8004986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498a:	b29b      	uxth	r3, r3
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	b29a      	uxth	r2, r3
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	b29b      	uxth	r3, r3
 8004994:	4413      	add	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	3302      	adds	r3, #2
 800499c:	b212      	sxth	r2, r2
 800499e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80049a0:	7c7a      	ldrb	r2, [r7, #17]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	3304      	adds	r3, #4
 80049a6:	b212      	sxth	r2, r2
 80049a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	3304      	adds	r3, #4
 80049ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	7c3b      	ldrb	r3, [r7, #16]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4413      	add	r3, r2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	3304      	adds	r3, #4
 80049c4:	b212      	sxth	r2, r2
 80049c6:	801a      	strh	r2, [r3, #0]

  return ret;
 80049c8:	697b      	ldr	r3, [r7, #20]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80049dc:	2301      	movs	r3, #1
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	210f      	movs	r1, #15
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe5d 	bl	80046a2 <lis2dw12_read_reg>
 80049e8:	60f8      	str	r0, [r7, #12]

  return ret;
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004a00:	f107 0208 	add.w	r2, r7, #8
 8004a04:	2301      	movs	r3, #1
 8004a06:	2121      	movs	r1, #33	; 0x21
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe4a 	bl	80046a2 <lis2dw12_read_reg>
 8004a0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <lis2dw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	7a3b      	ldrb	r3, [r7, #8]
 8004a20:	f362 1386 	bfi	r3, r2, #6, #1
 8004a24:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004a26:	f107 0208 	add.w	r2, r7, #8
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	2121      	movs	r1, #33	; 0x21
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fe55 	bl	80046de <lis2dw12_write_reg>
 8004a34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004a4a:	f107 0208 	add.w	r2, r7, #8
 8004a4e:	2301      	movs	r3, #1
 8004a50:	2121      	movs	r1, #33	; 0x21
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fe25 	bl	80046a2 <lis2dw12_read_reg>
 8004a58:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_reset;
 8004a5a:	7a3b      	ldrb	r3, [r7, #8]
 8004a5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	701a      	strb	r2, [r3, #0]

  return ret;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(const stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004a7e:	f107 0210 	add.w	r2, r7, #16
 8004a82:	2301      	movs	r3, #1
 8004a84:	2125      	movs	r1, #37	; 0x25
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fe0b 	bl	80046a2 <lis2dw12_read_reg>
 8004a8c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <lis2dw12_filter_path_set+0x44>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	7c3b      	ldrb	r3, [r7, #16]
 8004aa0:	f362 03c3 	bfi	r3, r2, #3, #1
 8004aa4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004aa6:	f107 0210 	add.w	r2, r7, #16
 8004aaa:	2301      	movs	r3, #1
 8004aac:	2125      	movs	r1, #37	; 0x25
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fe15 	bl	80046de <lis2dw12_write_reg>
 8004ab4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <lis2dw12_filter_path_set+0x5a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8004abc:	f107 020c 	add.w	r2, r7, #12
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	213f      	movs	r1, #63	; 0x3f
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fdec 	bl	80046a2 <lis2dw12_read_reg>
 8004aca:	6178      	str	r0, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <lis2dw12_filter_path_set+0x80>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	7b3b      	ldrb	r3, [r7, #12]
 8004adc:	f362 1304 	bfi	r3, r2, #4, #1
 8004ae0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8004ae2:	f107 020c 	add.w	r2, r7, #12
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	213f      	movs	r1, #63	; 0x3f
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fdf7 	bl	80046de <lis2dw12_write_reg>
 8004af0:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(const stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004b08:	f107 0208 	add.w	r2, r7, #8
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	2125      	movs	r1, #37	; 0x25
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fdc6 	bl	80046a2 <lis2dw12_read_reg>
 8004b16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <lis2dw12_filter_bandwidth_set+0x42>
  {
    reg.bw_filt = (uint8_t) val;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	7a3b      	ldrb	r3, [r7, #8]
 8004b28:	f362 1387 	bfi	r3, r2, #6, #2
 8004b2c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004b2e:	f107 0208 	add.w	r2, r7, #8
 8004b32:	2301      	movs	r3, #1
 8004b34:	2125      	movs	r1, #37	; 0x25
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fdd1 	bl	80046de <lis2dw12_write_reg>
 8004b3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <__cvt>:
 8004b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	ec55 4b10 	vmov	r4, r5, d0
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	460e      	mov	r6, r1
 8004b54:	4619      	mov	r1, r3
 8004b56:	462b      	mov	r3, r5
 8004b58:	bfbb      	ittet	lt
 8004b5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b5e:	461d      	movlt	r5, r3
 8004b60:	2300      	movge	r3, #0
 8004b62:	232d      	movlt	r3, #45	; 0x2d
 8004b64:	700b      	strb	r3, [r1, #0]
 8004b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b6c:	4691      	mov	r9, r2
 8004b6e:	f023 0820 	bic.w	r8, r3, #32
 8004b72:	bfbc      	itt	lt
 8004b74:	4622      	movlt	r2, r4
 8004b76:	4614      	movlt	r4, r2
 8004b78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b7c:	d005      	beq.n	8004b8a <__cvt+0x42>
 8004b7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b82:	d100      	bne.n	8004b86 <__cvt+0x3e>
 8004b84:	3601      	adds	r6, #1
 8004b86:	2102      	movs	r1, #2
 8004b88:	e000      	b.n	8004b8c <__cvt+0x44>
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	ab02      	add	r3, sp, #8
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	ec45 4b10 	vmov	d0, r4, r5
 8004b98:	4653      	mov	r3, sl
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	f001 f880 	bl	8005ca0 <_dtoa_r>
 8004ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	d102      	bne.n	8004bae <__cvt+0x66>
 8004ba8:	f019 0f01 	tst.w	r9, #1
 8004bac:	d022      	beq.n	8004bf4 <__cvt+0xac>
 8004bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bb2:	eb07 0906 	add.w	r9, r7, r6
 8004bb6:	d110      	bne.n	8004bda <__cvt+0x92>
 8004bb8:	783b      	ldrb	r3, [r7, #0]
 8004bba:	2b30      	cmp	r3, #48	; 0x30
 8004bbc:	d10a      	bne.n	8004bd4 <__cvt+0x8c>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	f7fb ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bca:	b918      	cbnz	r0, 8004bd4 <__cvt+0x8c>
 8004bcc:	f1c6 0601 	rsb	r6, r6, #1
 8004bd0:	f8ca 6000 	str.w	r6, [sl]
 8004bd4:	f8da 3000 	ldr.w	r3, [sl]
 8004bd8:	4499      	add	r9, r3
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4620      	mov	r0, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f7fb ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004be6:	b108      	cbz	r0, 8004bec <__cvt+0xa4>
 8004be8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bec:	2230      	movs	r2, #48	; 0x30
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	454b      	cmp	r3, r9
 8004bf2:	d307      	bcc.n	8004c04 <__cvt+0xbc>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bf8:	1bdb      	subs	r3, r3, r7
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	b004      	add	sp, #16
 8004c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c04:	1c59      	adds	r1, r3, #1
 8004c06:	9103      	str	r1, [sp, #12]
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e7f0      	b.n	8004bee <__cvt+0xa6>

08004c0c <__exponent>:
 8004c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2900      	cmp	r1, #0
 8004c12:	bfb8      	it	lt
 8004c14:	4249      	neglt	r1, r1
 8004c16:	f803 2b02 	strb.w	r2, [r3], #2
 8004c1a:	bfb4      	ite	lt
 8004c1c:	222d      	movlt	r2, #45	; 0x2d
 8004c1e:	222b      	movge	r2, #43	; 0x2b
 8004c20:	2909      	cmp	r1, #9
 8004c22:	7042      	strb	r2, [r0, #1]
 8004c24:	dd2a      	ble.n	8004c7c <__exponent+0x70>
 8004c26:	f10d 0207 	add.w	r2, sp, #7
 8004c2a:	4617      	mov	r7, r2
 8004c2c:	260a      	movs	r6, #10
 8004c2e:	4694      	mov	ip, r2
 8004c30:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c34:	fb06 1415 	mls	r4, r6, r5, r1
 8004c38:	3430      	adds	r4, #48	; 0x30
 8004c3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c3e:	460c      	mov	r4, r1
 8004c40:	2c63      	cmp	r4, #99	; 0x63
 8004c42:	f102 32ff 	add.w	r2, r2, #4294967295
 8004c46:	4629      	mov	r1, r5
 8004c48:	dcf1      	bgt.n	8004c2e <__exponent+0x22>
 8004c4a:	3130      	adds	r1, #48	; 0x30
 8004c4c:	f1ac 0402 	sub.w	r4, ip, #2
 8004c50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c54:	1c41      	adds	r1, r0, #1
 8004c56:	4622      	mov	r2, r4
 8004c58:	42ba      	cmp	r2, r7
 8004c5a:	d30a      	bcc.n	8004c72 <__exponent+0x66>
 8004c5c:	f10d 0209 	add.w	r2, sp, #9
 8004c60:	eba2 020c 	sub.w	r2, r2, ip
 8004c64:	42bc      	cmp	r4, r7
 8004c66:	bf88      	it	hi
 8004c68:	2200      	movhi	r2, #0
 8004c6a:	4413      	add	r3, r2
 8004c6c:	1a18      	subs	r0, r3, r0
 8004c6e:	b003      	add	sp, #12
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004c7a:	e7ed      	b.n	8004c58 <__exponent+0x4c>
 8004c7c:	2330      	movs	r3, #48	; 0x30
 8004c7e:	3130      	adds	r1, #48	; 0x30
 8004c80:	7083      	strb	r3, [r0, #2]
 8004c82:	70c1      	strb	r1, [r0, #3]
 8004c84:	1d03      	adds	r3, r0, #4
 8004c86:	e7f1      	b.n	8004c6c <__exponent+0x60>

08004c88 <_printf_float>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	ed2d 8b02 	vpush	{d8}
 8004c90:	b08d      	sub	sp, #52	; 0x34
 8004c92:	460c      	mov	r4, r1
 8004c94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c98:	4616      	mov	r6, r2
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	f000 fef7 	bl	8005a90 <_localeconv_r>
 8004ca2:	f8d0 a000 	ldr.w	sl, [r0]
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	f7fb fae2 	bl	8000270 <strlen>
 8004cac:	2300      	movs	r3, #0
 8004cae:	930a      	str	r3, [sp, #40]	; 0x28
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	f103 0208 	add.w	r2, r3, #8
 8004cc6:	f8c8 2000 	str.w	r2, [r8]
 8004cca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cd2:	9307      	str	r3, [sp, #28]
 8004cd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cd8:	ee08 0a10 	vmov	s16, r0
 8004cdc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ce4:	4b9e      	ldr	r3, [pc, #632]	; (8004f60 <_printf_float+0x2d8>)
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cea:	f7fb ff1f 	bl	8000b2c <__aeabi_dcmpun>
 8004cee:	bb88      	cbnz	r0, 8004d54 <_printf_float+0xcc>
 8004cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cf4:	4b9a      	ldr	r3, [pc, #616]	; (8004f60 <_printf_float+0x2d8>)
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	f7fb fef9 	bl	8000af0 <__aeabi_dcmple>
 8004cfe:	bb48      	cbnz	r0, 8004d54 <_printf_float+0xcc>
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	4640      	mov	r0, r8
 8004d06:	4649      	mov	r1, r9
 8004d08:	f7fb fee8 	bl	8000adc <__aeabi_dcmplt>
 8004d0c:	b110      	cbz	r0, 8004d14 <_printf_float+0x8c>
 8004d0e:	232d      	movs	r3, #45	; 0x2d
 8004d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d14:	4a93      	ldr	r2, [pc, #588]	; (8004f64 <_printf_float+0x2dc>)
 8004d16:	4b94      	ldr	r3, [pc, #592]	; (8004f68 <_printf_float+0x2e0>)
 8004d18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d1c:	bf94      	ite	ls
 8004d1e:	4690      	movls	r8, r2
 8004d20:	4698      	movhi	r8, r3
 8004d22:	2303      	movs	r3, #3
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	9b05      	ldr	r3, [sp, #20]
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	f04f 0900 	mov.w	r9, #0
 8004d32:	9700      	str	r7, [sp, #0]
 8004d34:	4633      	mov	r3, r6
 8004d36:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 f9da 	bl	80050f4 <_printf_common>
 8004d40:	3001      	adds	r0, #1
 8004d42:	f040 8090 	bne.w	8004e66 <_printf_float+0x1de>
 8004d46:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4a:	b00d      	add	sp, #52	; 0x34
 8004d4c:	ecbd 8b02 	vpop	{d8}
 8004d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	4640      	mov	r0, r8
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	f7fb fee6 	bl	8000b2c <__aeabi_dcmpun>
 8004d60:	b140      	cbz	r0, 8004d74 <_printf_float+0xec>
 8004d62:	464b      	mov	r3, r9
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bfbc      	itt	lt
 8004d68:	232d      	movlt	r3, #45	; 0x2d
 8004d6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d6e:	4a7f      	ldr	r2, [pc, #508]	; (8004f6c <_printf_float+0x2e4>)
 8004d70:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <_printf_float+0x2e8>)
 8004d72:	e7d1      	b.n	8004d18 <_printf_float+0x90>
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d7a:	9206      	str	r2, [sp, #24]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	d13f      	bne.n	8004e00 <_printf_float+0x178>
 8004d80:	2306      	movs	r3, #6
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	9b05      	ldr	r3, [sp, #20]
 8004d86:	6861      	ldr	r1, [r4, #4]
 8004d88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	ab0a      	add	r3, sp, #40	; 0x28
 8004d92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d96:	ab09      	add	r3, sp, #36	; 0x24
 8004d98:	ec49 8b10 	vmov	d0, r8, r9
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6022      	str	r2, [r4, #0]
 8004da0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff fecf 	bl	8004b48 <__cvt>
 8004daa:	9b06      	ldr	r3, [sp, #24]
 8004dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dae:	2b47      	cmp	r3, #71	; 0x47
 8004db0:	4680      	mov	r8, r0
 8004db2:	d108      	bne.n	8004dc6 <_printf_float+0x13e>
 8004db4:	1cc8      	adds	r0, r1, #3
 8004db6:	db02      	blt.n	8004dbe <_printf_float+0x136>
 8004db8:	6863      	ldr	r3, [r4, #4]
 8004dba:	4299      	cmp	r1, r3
 8004dbc:	dd41      	ble.n	8004e42 <_printf_float+0x1ba>
 8004dbe:	f1ab 0302 	sub.w	r3, fp, #2
 8004dc2:	fa5f fb83 	uxtb.w	fp, r3
 8004dc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dca:	d820      	bhi.n	8004e0e <_printf_float+0x186>
 8004dcc:	3901      	subs	r1, #1
 8004dce:	465a      	mov	r2, fp
 8004dd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dd4:	9109      	str	r1, [sp, #36]	; 0x24
 8004dd6:	f7ff ff19 	bl	8004c0c <__exponent>
 8004dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ddc:	1813      	adds	r3, r2, r0
 8004dde:	2a01      	cmp	r2, #1
 8004de0:	4681      	mov	r9, r0
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	dc02      	bgt.n	8004dec <_printf_float+0x164>
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	07d2      	lsls	r2, r2, #31
 8004dea:	d501      	bpl.n	8004df0 <_printf_float+0x168>
 8004dec:	3301      	adds	r3, #1
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d09c      	beq.n	8004d32 <_printf_float+0xaa>
 8004df8:	232d      	movs	r3, #45	; 0x2d
 8004dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dfe:	e798      	b.n	8004d32 <_printf_float+0xaa>
 8004e00:	9a06      	ldr	r2, [sp, #24]
 8004e02:	2a47      	cmp	r2, #71	; 0x47
 8004e04:	d1be      	bne.n	8004d84 <_printf_float+0xfc>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1bc      	bne.n	8004d84 <_printf_float+0xfc>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e7b9      	b.n	8004d82 <_printf_float+0xfa>
 8004e0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e12:	d118      	bne.n	8004e46 <_printf_float+0x1be>
 8004e14:	2900      	cmp	r1, #0
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	dd0b      	ble.n	8004e32 <_printf_float+0x1aa>
 8004e1a:	6121      	str	r1, [r4, #16]
 8004e1c:	b913      	cbnz	r3, 8004e24 <_printf_float+0x19c>
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	07d0      	lsls	r0, r2, #31
 8004e22:	d502      	bpl.n	8004e2a <_printf_float+0x1a2>
 8004e24:	3301      	adds	r3, #1
 8004e26:	440b      	add	r3, r1
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e2c:	f04f 0900 	mov.w	r9, #0
 8004e30:	e7de      	b.n	8004df0 <_printf_float+0x168>
 8004e32:	b913      	cbnz	r3, 8004e3a <_printf_float+0x1b2>
 8004e34:	6822      	ldr	r2, [r4, #0]
 8004e36:	07d2      	lsls	r2, r2, #31
 8004e38:	d501      	bpl.n	8004e3e <_printf_float+0x1b6>
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	e7f4      	b.n	8004e28 <_printf_float+0x1a0>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e7f2      	b.n	8004e28 <_printf_float+0x1a0>
 8004e42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	db05      	blt.n	8004e58 <_printf_float+0x1d0>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	6121      	str	r1, [r4, #16]
 8004e50:	07d8      	lsls	r0, r3, #31
 8004e52:	d5ea      	bpl.n	8004e2a <_printf_float+0x1a2>
 8004e54:	1c4b      	adds	r3, r1, #1
 8004e56:	e7e7      	b.n	8004e28 <_printf_float+0x1a0>
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	bfd4      	ite	le
 8004e5c:	f1c1 0202 	rsble	r2, r1, #2
 8004e60:	2201      	movgt	r2, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	e7e0      	b.n	8004e28 <_printf_float+0x1a0>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	055a      	lsls	r2, r3, #21
 8004e6a:	d407      	bmi.n	8004e7c <_printf_float+0x1f4>
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	4642      	mov	r2, r8
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	d12c      	bne.n	8004ed4 <_printf_float+0x24c>
 8004e7a:	e764      	b.n	8004d46 <_printf_float+0xbe>
 8004e7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e80:	f240 80e0 	bls.w	8005044 <_printf_float+0x3bc>
 8004e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f7fb fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d034      	beq.n	8004efe <_printf_float+0x276>
 8004e94:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <_printf_float+0x2ec>)
 8004e96:	2301      	movs	r3, #1
 8004e98:	4631      	mov	r1, r6
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b8      	blx	r7
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f43f af51 	beq.w	8004d46 <_printf_float+0xbe>
 8004ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	db02      	blt.n	8004eb2 <_printf_float+0x22a>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	07d8      	lsls	r0, r3, #31
 8004eb0:	d510      	bpl.n	8004ed4 <_printf_float+0x24c>
 8004eb2:	ee18 3a10 	vmov	r3, s16
 8004eb6:	4652      	mov	r2, sl
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f af41 	beq.w	8004d46 <_printf_float+0xbe>
 8004ec4:	f04f 0800 	mov.w	r8, #0
 8004ec8:	f104 091a 	add.w	r9, r4, #26
 8004ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	4543      	cmp	r3, r8
 8004ed2:	dc09      	bgt.n	8004ee8 <_printf_float+0x260>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	079b      	lsls	r3, r3, #30
 8004ed8:	f100 8107 	bmi.w	80050ea <_printf_float+0x462>
 8004edc:	68e0      	ldr	r0, [r4, #12]
 8004ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	bfb8      	it	lt
 8004ee4:	4618      	movlt	r0, r3
 8004ee6:	e730      	b.n	8004d4a <_printf_float+0xc2>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	464a      	mov	r2, r9
 8004eec:	4631      	mov	r1, r6
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f af27 	beq.w	8004d46 <_printf_float+0xbe>
 8004ef8:	f108 0801 	add.w	r8, r8, #1
 8004efc:	e7e6      	b.n	8004ecc <_printf_float+0x244>
 8004efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	dc39      	bgt.n	8004f78 <_printf_float+0x2f0>
 8004f04:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <_printf_float+0x2ec>)
 8004f06:	2301      	movs	r3, #1
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	f43f af19 	beq.w	8004d46 <_printf_float+0xbe>
 8004f14:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d102      	bne.n	8004f22 <_printf_float+0x29a>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	07d9      	lsls	r1, r3, #31
 8004f20:	d5d8      	bpl.n	8004ed4 <_printf_float+0x24c>
 8004f22:	ee18 3a10 	vmov	r3, s16
 8004f26:	4652      	mov	r2, sl
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f af09 	beq.w	8004d46 <_printf_float+0xbe>
 8004f34:	f04f 0900 	mov.w	r9, #0
 8004f38:	f104 0a1a 	add.w	sl, r4, #26
 8004f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3e:	425b      	negs	r3, r3
 8004f40:	454b      	cmp	r3, r9
 8004f42:	dc01      	bgt.n	8004f48 <_printf_float+0x2c0>
 8004f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f46:	e792      	b.n	8004e6e <_printf_float+0x1e6>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f aef7 	beq.w	8004d46 <_printf_float+0xbe>
 8004f58:	f109 0901 	add.w	r9, r9, #1
 8004f5c:	e7ee      	b.n	8004f3c <_printf_float+0x2b4>
 8004f5e:	bf00      	nop
 8004f60:	7fefffff 	.word	0x7fefffff
 8004f64:	08009370 	.word	0x08009370
 8004f68:	08009374 	.word	0x08009374
 8004f6c:	08009378 	.word	0x08009378
 8004f70:	0800937c 	.word	0x0800937c
 8004f74:	08009380 	.word	0x08009380
 8004f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	bfa8      	it	ge
 8004f80:	461a      	movge	r2, r3
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	4691      	mov	r9, r2
 8004f86:	dc37      	bgt.n	8004ff8 <_printf_float+0x370>
 8004f88:	f04f 0b00 	mov.w	fp, #0
 8004f8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f90:	f104 021a 	add.w	r2, r4, #26
 8004f94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	eba3 0309 	sub.w	r3, r3, r9
 8004f9c:	455b      	cmp	r3, fp
 8004f9e:	dc33      	bgt.n	8005008 <_printf_float+0x380>
 8004fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	db3b      	blt.n	8005020 <_printf_float+0x398>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	07da      	lsls	r2, r3, #31
 8004fac:	d438      	bmi.n	8005020 <_printf_float+0x398>
 8004fae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004fb2:	eba2 0903 	sub.w	r9, r2, r3
 8004fb6:	9b05      	ldr	r3, [sp, #20]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	4591      	cmp	r9, r2
 8004fbc:	bfa8      	it	ge
 8004fbe:	4691      	movge	r9, r2
 8004fc0:	f1b9 0f00 	cmp.w	r9, #0
 8004fc4:	dc35      	bgt.n	8005032 <_printf_float+0x3aa>
 8004fc6:	f04f 0800 	mov.w	r8, #0
 8004fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fce:	f104 0a1a 	add.w	sl, r4, #26
 8004fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	eba3 0309 	sub.w	r3, r3, r9
 8004fdc:	4543      	cmp	r3, r8
 8004fde:	f77f af79 	ble.w	8004ed4 <_printf_float+0x24c>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4652      	mov	r2, sl
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b8      	blx	r7
 8004fec:	3001      	adds	r0, #1
 8004fee:	f43f aeaa 	beq.w	8004d46 <_printf_float+0xbe>
 8004ff2:	f108 0801 	add.w	r8, r8, #1
 8004ff6:	e7ec      	b.n	8004fd2 <_printf_float+0x34a>
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	d1c0      	bne.n	8004f88 <_printf_float+0x300>
 8005006:	e69e      	b.n	8004d46 <_printf_float+0xbe>
 8005008:	2301      	movs	r3, #1
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	9205      	str	r2, [sp, #20]
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f ae97 	beq.w	8004d46 <_printf_float+0xbe>
 8005018:	9a05      	ldr	r2, [sp, #20]
 800501a:	f10b 0b01 	add.w	fp, fp, #1
 800501e:	e7b9      	b.n	8004f94 <_printf_float+0x30c>
 8005020:	ee18 3a10 	vmov	r3, s16
 8005024:	4652      	mov	r2, sl
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	d1be      	bne.n	8004fae <_printf_float+0x326>
 8005030:	e689      	b.n	8004d46 <_printf_float+0xbe>
 8005032:	9a05      	ldr	r2, [sp, #20]
 8005034:	464b      	mov	r3, r9
 8005036:	4442      	add	r2, r8
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	d1c1      	bne.n	8004fc6 <_printf_float+0x33e>
 8005042:	e680      	b.n	8004d46 <_printf_float+0xbe>
 8005044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005046:	2a01      	cmp	r2, #1
 8005048:	dc01      	bgt.n	800504e <_printf_float+0x3c6>
 800504a:	07db      	lsls	r3, r3, #31
 800504c:	d53a      	bpl.n	80050c4 <_printf_float+0x43c>
 800504e:	2301      	movs	r3, #1
 8005050:	4642      	mov	r2, r8
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	f43f ae74 	beq.w	8004d46 <_printf_float+0xbe>
 800505e:	ee18 3a10 	vmov	r3, s16
 8005062:	4652      	mov	r2, sl
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	f43f ae6b 	beq.w	8004d46 <_printf_float+0xbe>
 8005070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005074:	2200      	movs	r2, #0
 8005076:	2300      	movs	r3, #0
 8005078:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800507c:	f7fb fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 8005080:	b9d8      	cbnz	r0, 80050ba <_printf_float+0x432>
 8005082:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005086:	f108 0201 	add.w	r2, r8, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d10e      	bne.n	80050b2 <_printf_float+0x42a>
 8005094:	e657      	b.n	8004d46 <_printf_float+0xbe>
 8005096:	2301      	movs	r3, #1
 8005098:	4652      	mov	r2, sl
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae50 	beq.w	8004d46 <_printf_float+0xbe>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4543      	cmp	r3, r8
 80050b0:	dcf1      	bgt.n	8005096 <_printf_float+0x40e>
 80050b2:	464b      	mov	r3, r9
 80050b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050b8:	e6da      	b.n	8004e70 <_printf_float+0x1e8>
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	f104 0a1a 	add.w	sl, r4, #26
 80050c2:	e7f2      	b.n	80050aa <_printf_float+0x422>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4642      	mov	r2, r8
 80050c8:	e7df      	b.n	800508a <_printf_float+0x402>
 80050ca:	2301      	movs	r3, #1
 80050cc:	464a      	mov	r2, r9
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f ae36 	beq.w	8004d46 <_printf_float+0xbe>
 80050da:	f108 0801 	add.w	r8, r8, #1
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050e2:	1a5b      	subs	r3, r3, r1
 80050e4:	4543      	cmp	r3, r8
 80050e6:	dcf0      	bgt.n	80050ca <_printf_float+0x442>
 80050e8:	e6f8      	b.n	8004edc <_printf_float+0x254>
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	f104 0919 	add.w	r9, r4, #25
 80050f2:	e7f4      	b.n	80050de <_printf_float+0x456>

080050f4 <_printf_common>:
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	4616      	mov	r6, r2
 80050fa:	4699      	mov	r9, r3
 80050fc:	688a      	ldr	r2, [r1, #8]
 80050fe:	690b      	ldr	r3, [r1, #16]
 8005100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005104:	4293      	cmp	r3, r2
 8005106:	bfb8      	it	lt
 8005108:	4613      	movlt	r3, r2
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005110:	4607      	mov	r7, r0
 8005112:	460c      	mov	r4, r1
 8005114:	b10a      	cbz	r2, 800511a <_printf_common+0x26>
 8005116:	3301      	adds	r3, #1
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	0699      	lsls	r1, r3, #26
 800511e:	bf42      	ittt	mi
 8005120:	6833      	ldrmi	r3, [r6, #0]
 8005122:	3302      	addmi	r3, #2
 8005124:	6033      	strmi	r3, [r6, #0]
 8005126:	6825      	ldr	r5, [r4, #0]
 8005128:	f015 0506 	ands.w	r5, r5, #6
 800512c:	d106      	bne.n	800513c <_printf_common+0x48>
 800512e:	f104 0a19 	add.w	sl, r4, #25
 8005132:	68e3      	ldr	r3, [r4, #12]
 8005134:	6832      	ldr	r2, [r6, #0]
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	42ab      	cmp	r3, r5
 800513a:	dc26      	bgt.n	800518a <_printf_common+0x96>
 800513c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005140:	1e13      	subs	r3, r2, #0
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	bf18      	it	ne
 8005146:	2301      	movne	r3, #1
 8005148:	0692      	lsls	r2, r2, #26
 800514a:	d42b      	bmi.n	80051a4 <_printf_common+0xb0>
 800514c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005150:	4649      	mov	r1, r9
 8005152:	4638      	mov	r0, r7
 8005154:	47c0      	blx	r8
 8005156:	3001      	adds	r0, #1
 8005158:	d01e      	beq.n	8005198 <_printf_common+0xa4>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	f003 0306 	and.w	r3, r3, #6
 8005162:	2b04      	cmp	r3, #4
 8005164:	bf02      	ittt	eq
 8005166:	68e5      	ldreq	r5, [r4, #12]
 8005168:	6833      	ldreq	r3, [r6, #0]
 800516a:	1aed      	subeq	r5, r5, r3
 800516c:	68a3      	ldr	r3, [r4, #8]
 800516e:	bf0c      	ite	eq
 8005170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005174:	2500      	movne	r5, #0
 8005176:	4293      	cmp	r3, r2
 8005178:	bfc4      	itt	gt
 800517a:	1a9b      	subgt	r3, r3, r2
 800517c:	18ed      	addgt	r5, r5, r3
 800517e:	2600      	movs	r6, #0
 8005180:	341a      	adds	r4, #26
 8005182:	42b5      	cmp	r5, r6
 8005184:	d11a      	bne.n	80051bc <_printf_common+0xc8>
 8005186:	2000      	movs	r0, #0
 8005188:	e008      	b.n	800519c <_printf_common+0xa8>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4649      	mov	r1, r9
 8005190:	4638      	mov	r0, r7
 8005192:	47c0      	blx	r8
 8005194:	3001      	adds	r0, #1
 8005196:	d103      	bne.n	80051a0 <_printf_common+0xac>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	3501      	adds	r5, #1
 80051a2:	e7c6      	b.n	8005132 <_printf_common+0x3e>
 80051a4:	18e1      	adds	r1, r4, r3
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	2030      	movs	r0, #48	; 0x30
 80051aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ae:	4422      	add	r2, r4
 80051b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b8:	3302      	adds	r3, #2
 80051ba:	e7c7      	b.n	800514c <_printf_common+0x58>
 80051bc:	2301      	movs	r3, #1
 80051be:	4622      	mov	r2, r4
 80051c0:	4649      	mov	r1, r9
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d0e6      	beq.n	8005198 <_printf_common+0xa4>
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7d9      	b.n	8005182 <_printf_common+0x8e>
	...

080051d0 <_printf_i>:
 80051d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	7e0f      	ldrb	r7, [r1, #24]
 80051d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051d8:	2f78      	cmp	r7, #120	; 0x78
 80051da:	4691      	mov	r9, r2
 80051dc:	4680      	mov	r8, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	469a      	mov	sl, r3
 80051e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051e6:	d807      	bhi.n	80051f8 <_printf_i+0x28>
 80051e8:	2f62      	cmp	r7, #98	; 0x62
 80051ea:	d80a      	bhi.n	8005202 <_printf_i+0x32>
 80051ec:	2f00      	cmp	r7, #0
 80051ee:	f000 80d4 	beq.w	800539a <_printf_i+0x1ca>
 80051f2:	2f58      	cmp	r7, #88	; 0x58
 80051f4:	f000 80c0 	beq.w	8005378 <_printf_i+0x1a8>
 80051f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005200:	e03a      	b.n	8005278 <_printf_i+0xa8>
 8005202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005206:	2b15      	cmp	r3, #21
 8005208:	d8f6      	bhi.n	80051f8 <_printf_i+0x28>
 800520a:	a101      	add	r1, pc, #4	; (adr r1, 8005210 <_printf_i+0x40>)
 800520c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005210:	08005269 	.word	0x08005269
 8005214:	0800527d 	.word	0x0800527d
 8005218:	080051f9 	.word	0x080051f9
 800521c:	080051f9 	.word	0x080051f9
 8005220:	080051f9 	.word	0x080051f9
 8005224:	080051f9 	.word	0x080051f9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051f9 	.word	0x080051f9
 8005230:	080051f9 	.word	0x080051f9
 8005234:	080051f9 	.word	0x080051f9
 8005238:	080051f9 	.word	0x080051f9
 800523c:	08005381 	.word	0x08005381
 8005240:	080052a9 	.word	0x080052a9
 8005244:	0800533b 	.word	0x0800533b
 8005248:	080051f9 	.word	0x080051f9
 800524c:	080051f9 	.word	0x080051f9
 8005250:	080053a3 	.word	0x080053a3
 8005254:	080051f9 	.word	0x080051f9
 8005258:	080052a9 	.word	0x080052a9
 800525c:	080051f9 	.word	0x080051f9
 8005260:	080051f9 	.word	0x080051f9
 8005264:	08005343 	.word	0x08005343
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	602a      	str	r2, [r5, #0]
 8005270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005278:	2301      	movs	r3, #1
 800527a:	e09f      	b.n	80053bc <_printf_i+0x1ec>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	0607      	lsls	r7, r0, #24
 8005282:	f103 0104 	add.w	r1, r3, #4
 8005286:	6029      	str	r1, [r5, #0]
 8005288:	d501      	bpl.n	800528e <_printf_i+0xbe>
 800528a:	681e      	ldr	r6, [r3, #0]
 800528c:	e003      	b.n	8005296 <_printf_i+0xc6>
 800528e:	0646      	lsls	r6, r0, #25
 8005290:	d5fb      	bpl.n	800528a <_printf_i+0xba>
 8005292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005296:	2e00      	cmp	r6, #0
 8005298:	da03      	bge.n	80052a2 <_printf_i+0xd2>
 800529a:	232d      	movs	r3, #45	; 0x2d
 800529c:	4276      	negs	r6, r6
 800529e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a2:	485a      	ldr	r0, [pc, #360]	; (800540c <_printf_i+0x23c>)
 80052a4:	230a      	movs	r3, #10
 80052a6:	e012      	b.n	80052ce <_printf_i+0xfe>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	1d19      	adds	r1, r3, #4
 80052ae:	6029      	str	r1, [r5, #0]
 80052b0:	0605      	lsls	r5, r0, #24
 80052b2:	d501      	bpl.n	80052b8 <_printf_i+0xe8>
 80052b4:	681e      	ldr	r6, [r3, #0]
 80052b6:	e002      	b.n	80052be <_printf_i+0xee>
 80052b8:	0641      	lsls	r1, r0, #25
 80052ba:	d5fb      	bpl.n	80052b4 <_printf_i+0xe4>
 80052bc:	881e      	ldrh	r6, [r3, #0]
 80052be:	4853      	ldr	r0, [pc, #332]	; (800540c <_printf_i+0x23c>)
 80052c0:	2f6f      	cmp	r7, #111	; 0x6f
 80052c2:	bf0c      	ite	eq
 80052c4:	2308      	moveq	r3, #8
 80052c6:	230a      	movne	r3, #10
 80052c8:	2100      	movs	r1, #0
 80052ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ce:	6865      	ldr	r5, [r4, #4]
 80052d0:	60a5      	str	r5, [r4, #8]
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	bfa2      	ittt	ge
 80052d6:	6821      	ldrge	r1, [r4, #0]
 80052d8:	f021 0104 	bicge.w	r1, r1, #4
 80052dc:	6021      	strge	r1, [r4, #0]
 80052de:	b90e      	cbnz	r6, 80052e4 <_printf_i+0x114>
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	d04b      	beq.n	800537c <_printf_i+0x1ac>
 80052e4:	4615      	mov	r5, r2
 80052e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80052ea:	fb03 6711 	mls	r7, r3, r1, r6
 80052ee:	5dc7      	ldrb	r7, [r0, r7]
 80052f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052f4:	4637      	mov	r7, r6
 80052f6:	42bb      	cmp	r3, r7
 80052f8:	460e      	mov	r6, r1
 80052fa:	d9f4      	bls.n	80052e6 <_printf_i+0x116>
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d10b      	bne.n	8005318 <_printf_i+0x148>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07de      	lsls	r6, r3, #31
 8005304:	d508      	bpl.n	8005318 <_printf_i+0x148>
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	6861      	ldr	r1, [r4, #4]
 800530a:	4299      	cmp	r1, r3
 800530c:	bfde      	ittt	le
 800530e:	2330      	movle	r3, #48	; 0x30
 8005310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005314:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005318:	1b52      	subs	r2, r2, r5
 800531a:	6122      	str	r2, [r4, #16]
 800531c:	f8cd a000 	str.w	sl, [sp]
 8005320:	464b      	mov	r3, r9
 8005322:	aa03      	add	r2, sp, #12
 8005324:	4621      	mov	r1, r4
 8005326:	4640      	mov	r0, r8
 8005328:	f7ff fee4 	bl	80050f4 <_printf_common>
 800532c:	3001      	adds	r0, #1
 800532e:	d14a      	bne.n	80053c6 <_printf_i+0x1f6>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	b004      	add	sp, #16
 8005336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f043 0320 	orr.w	r3, r3, #32
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	4833      	ldr	r0, [pc, #204]	; (8005410 <_printf_i+0x240>)
 8005344:	2778      	movs	r7, #120	; 0x78
 8005346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	6829      	ldr	r1, [r5, #0]
 800534e:	061f      	lsls	r7, r3, #24
 8005350:	f851 6b04 	ldr.w	r6, [r1], #4
 8005354:	d402      	bmi.n	800535c <_printf_i+0x18c>
 8005356:	065f      	lsls	r7, r3, #25
 8005358:	bf48      	it	mi
 800535a:	b2b6      	uxthmi	r6, r6
 800535c:	07df      	lsls	r7, r3, #31
 800535e:	bf48      	it	mi
 8005360:	f043 0320 	orrmi.w	r3, r3, #32
 8005364:	6029      	str	r1, [r5, #0]
 8005366:	bf48      	it	mi
 8005368:	6023      	strmi	r3, [r4, #0]
 800536a:	b91e      	cbnz	r6, 8005374 <_printf_i+0x1a4>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	f023 0320 	bic.w	r3, r3, #32
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	2310      	movs	r3, #16
 8005376:	e7a7      	b.n	80052c8 <_printf_i+0xf8>
 8005378:	4824      	ldr	r0, [pc, #144]	; (800540c <_printf_i+0x23c>)
 800537a:	e7e4      	b.n	8005346 <_printf_i+0x176>
 800537c:	4615      	mov	r5, r2
 800537e:	e7bd      	b.n	80052fc <_printf_i+0x12c>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	6826      	ldr	r6, [r4, #0]
 8005384:	6961      	ldr	r1, [r4, #20]
 8005386:	1d18      	adds	r0, r3, #4
 8005388:	6028      	str	r0, [r5, #0]
 800538a:	0635      	lsls	r5, r6, #24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	d501      	bpl.n	8005394 <_printf_i+0x1c4>
 8005390:	6019      	str	r1, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0x1ca>
 8005394:	0670      	lsls	r0, r6, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0x1c0>
 8005398:	8019      	strh	r1, [r3, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	4615      	mov	r5, r2
 80053a0:	e7bc      	b.n	800531c <_printf_i+0x14c>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	1d1a      	adds	r2, r3, #4
 80053a6:	602a      	str	r2, [r5, #0]
 80053a8:	681d      	ldr	r5, [r3, #0]
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	2100      	movs	r1, #0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7fa ff0e 	bl	80001d0 <memchr>
 80053b4:	b108      	cbz	r0, 80053ba <_printf_i+0x1ea>
 80053b6:	1b40      	subs	r0, r0, r5
 80053b8:	6060      	str	r0, [r4, #4]
 80053ba:	6863      	ldr	r3, [r4, #4]
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	2300      	movs	r3, #0
 80053c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c4:	e7aa      	b.n	800531c <_printf_i+0x14c>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4649      	mov	r1, r9
 80053cc:	4640      	mov	r0, r8
 80053ce:	47d0      	blx	sl
 80053d0:	3001      	adds	r0, #1
 80053d2:	d0ad      	beq.n	8005330 <_printf_i+0x160>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	079b      	lsls	r3, r3, #30
 80053d8:	d413      	bmi.n	8005402 <_printf_i+0x232>
 80053da:	68e0      	ldr	r0, [r4, #12]
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	4298      	cmp	r0, r3
 80053e0:	bfb8      	it	lt
 80053e2:	4618      	movlt	r0, r3
 80053e4:	e7a6      	b.n	8005334 <_printf_i+0x164>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4632      	mov	r2, r6
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	47d0      	blx	sl
 80053f0:	3001      	adds	r0, #1
 80053f2:	d09d      	beq.n	8005330 <_printf_i+0x160>
 80053f4:	3501      	adds	r5, #1
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	9903      	ldr	r1, [sp, #12]
 80053fa:	1a5b      	subs	r3, r3, r1
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dcf2      	bgt.n	80053e6 <_printf_i+0x216>
 8005400:	e7eb      	b.n	80053da <_printf_i+0x20a>
 8005402:	2500      	movs	r5, #0
 8005404:	f104 0619 	add.w	r6, r4, #25
 8005408:	e7f5      	b.n	80053f6 <_printf_i+0x226>
 800540a:	bf00      	nop
 800540c:	08009382 	.word	0x08009382
 8005410:	08009393 	.word	0x08009393

08005414 <_scanf_float>:
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	b087      	sub	sp, #28
 800541a:	4617      	mov	r7, r2
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	688b      	ldr	r3, [r1, #8]
 8005420:	1e5a      	subs	r2, r3, #1
 8005422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005426:	bf83      	ittte	hi
 8005428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800542c:	195b      	addhi	r3, r3, r5
 800542e:	9302      	strhi	r3, [sp, #8]
 8005430:	2300      	movls	r3, #0
 8005432:	bf86      	itte	hi
 8005434:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005438:	608b      	strhi	r3, [r1, #8]
 800543a:	9302      	strls	r3, [sp, #8]
 800543c:	680b      	ldr	r3, [r1, #0]
 800543e:	468b      	mov	fp, r1
 8005440:	2500      	movs	r5, #0
 8005442:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005446:	f84b 3b1c 	str.w	r3, [fp], #28
 800544a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800544e:	4680      	mov	r8, r0
 8005450:	460c      	mov	r4, r1
 8005452:	465e      	mov	r6, fp
 8005454:	46aa      	mov	sl, r5
 8005456:	46a9      	mov	r9, r5
 8005458:	9501      	str	r5, [sp, #4]
 800545a:	68a2      	ldr	r2, [r4, #8]
 800545c:	b152      	cbz	r2, 8005474 <_scanf_float+0x60>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b4e      	cmp	r3, #78	; 0x4e
 8005464:	d864      	bhi.n	8005530 <_scanf_float+0x11c>
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d83c      	bhi.n	80054e4 <_scanf_float+0xd0>
 800546a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800546e:	b2c8      	uxtb	r0, r1
 8005470:	280e      	cmp	r0, #14
 8005472:	d93a      	bls.n	80054ea <_scanf_float+0xd6>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	d003      	beq.n	8005482 <_scanf_float+0x6e>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005486:	f1ba 0f01 	cmp.w	sl, #1
 800548a:	f200 8113 	bhi.w	80056b4 <_scanf_float+0x2a0>
 800548e:	455e      	cmp	r6, fp
 8005490:	f200 8105 	bhi.w	800569e <_scanf_float+0x28a>
 8005494:	2501      	movs	r5, #1
 8005496:	4628      	mov	r0, r5
 8005498:	b007      	add	sp, #28
 800549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054a2:	2a0d      	cmp	r2, #13
 80054a4:	d8e6      	bhi.n	8005474 <_scanf_float+0x60>
 80054a6:	a101      	add	r1, pc, #4	; (adr r1, 80054ac <_scanf_float+0x98>)
 80054a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054ac:	080055eb 	.word	0x080055eb
 80054b0:	08005475 	.word	0x08005475
 80054b4:	08005475 	.word	0x08005475
 80054b8:	08005475 	.word	0x08005475
 80054bc:	0800564b 	.word	0x0800564b
 80054c0:	08005623 	.word	0x08005623
 80054c4:	08005475 	.word	0x08005475
 80054c8:	08005475 	.word	0x08005475
 80054cc:	080055f9 	.word	0x080055f9
 80054d0:	08005475 	.word	0x08005475
 80054d4:	08005475 	.word	0x08005475
 80054d8:	08005475 	.word	0x08005475
 80054dc:	08005475 	.word	0x08005475
 80054e0:	080055b1 	.word	0x080055b1
 80054e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054e8:	e7db      	b.n	80054a2 <_scanf_float+0x8e>
 80054ea:	290e      	cmp	r1, #14
 80054ec:	d8c2      	bhi.n	8005474 <_scanf_float+0x60>
 80054ee:	a001      	add	r0, pc, #4	; (adr r0, 80054f4 <_scanf_float+0xe0>)
 80054f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054f4:	080055a3 	.word	0x080055a3
 80054f8:	08005475 	.word	0x08005475
 80054fc:	080055a3 	.word	0x080055a3
 8005500:	08005637 	.word	0x08005637
 8005504:	08005475 	.word	0x08005475
 8005508:	08005551 	.word	0x08005551
 800550c:	0800558d 	.word	0x0800558d
 8005510:	0800558d 	.word	0x0800558d
 8005514:	0800558d 	.word	0x0800558d
 8005518:	0800558d 	.word	0x0800558d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	0800558d 	.word	0x0800558d
 8005524:	0800558d 	.word	0x0800558d
 8005528:	0800558d 	.word	0x0800558d
 800552c:	0800558d 	.word	0x0800558d
 8005530:	2b6e      	cmp	r3, #110	; 0x6e
 8005532:	d809      	bhi.n	8005548 <_scanf_float+0x134>
 8005534:	2b60      	cmp	r3, #96	; 0x60
 8005536:	d8b2      	bhi.n	800549e <_scanf_float+0x8a>
 8005538:	2b54      	cmp	r3, #84	; 0x54
 800553a:	d077      	beq.n	800562c <_scanf_float+0x218>
 800553c:	2b59      	cmp	r3, #89	; 0x59
 800553e:	d199      	bne.n	8005474 <_scanf_float+0x60>
 8005540:	2d07      	cmp	r5, #7
 8005542:	d197      	bne.n	8005474 <_scanf_float+0x60>
 8005544:	2508      	movs	r5, #8
 8005546:	e029      	b.n	800559c <_scanf_float+0x188>
 8005548:	2b74      	cmp	r3, #116	; 0x74
 800554a:	d06f      	beq.n	800562c <_scanf_float+0x218>
 800554c:	2b79      	cmp	r3, #121	; 0x79
 800554e:	e7f6      	b.n	800553e <_scanf_float+0x12a>
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	05c8      	lsls	r0, r1, #23
 8005554:	d51a      	bpl.n	800558c <_scanf_float+0x178>
 8005556:	9b02      	ldr	r3, [sp, #8]
 8005558:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800555c:	6021      	str	r1, [r4, #0]
 800555e:	f109 0901 	add.w	r9, r9, #1
 8005562:	b11b      	cbz	r3, 800556c <_scanf_float+0x158>
 8005564:	3b01      	subs	r3, #1
 8005566:	3201      	adds	r2, #1
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	60a2      	str	r2, [r4, #8]
 800556c:	68a3      	ldr	r3, [r4, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	60a3      	str	r3, [r4, #8]
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	3301      	adds	r3, #1
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3b01      	subs	r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	f340 8084 	ble.w	800568c <_scanf_float+0x278>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	e766      	b.n	800545a <_scanf_float+0x46>
 800558c:	eb1a 0f05 	cmn.w	sl, r5
 8005590:	f47f af70 	bne.w	8005474 <_scanf_float+0x60>
 8005594:	6822      	ldr	r2, [r4, #0]
 8005596:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800559a:	6022      	str	r2, [r4, #0]
 800559c:	f806 3b01 	strb.w	r3, [r6], #1
 80055a0:	e7e4      	b.n	800556c <_scanf_float+0x158>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	0610      	lsls	r0, r2, #24
 80055a6:	f57f af65 	bpl.w	8005474 <_scanf_float+0x60>
 80055aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ae:	e7f4      	b.n	800559a <_scanf_float+0x186>
 80055b0:	f1ba 0f00 	cmp.w	sl, #0
 80055b4:	d10e      	bne.n	80055d4 <_scanf_float+0x1c0>
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	d10e      	bne.n	80055da <_scanf_float+0x1c6>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055c6:	d108      	bne.n	80055da <_scanf_float+0x1c6>
 80055c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	f04f 0a01 	mov.w	sl, #1
 80055d2:	e7e3      	b.n	800559c <_scanf_float+0x188>
 80055d4:	f1ba 0f02 	cmp.w	sl, #2
 80055d8:	d055      	beq.n	8005686 <_scanf_float+0x272>
 80055da:	2d01      	cmp	r5, #1
 80055dc:	d002      	beq.n	80055e4 <_scanf_float+0x1d0>
 80055de:	2d04      	cmp	r5, #4
 80055e0:	f47f af48 	bne.w	8005474 <_scanf_float+0x60>
 80055e4:	3501      	adds	r5, #1
 80055e6:	b2ed      	uxtb	r5, r5
 80055e8:	e7d8      	b.n	800559c <_scanf_float+0x188>
 80055ea:	f1ba 0f01 	cmp.w	sl, #1
 80055ee:	f47f af41 	bne.w	8005474 <_scanf_float+0x60>
 80055f2:	f04f 0a02 	mov.w	sl, #2
 80055f6:	e7d1      	b.n	800559c <_scanf_float+0x188>
 80055f8:	b97d      	cbnz	r5, 800561a <_scanf_float+0x206>
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	f47f af3c 	bne.w	800547a <_scanf_float+0x66>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800560c:	f47f af39 	bne.w	8005482 <_scanf_float+0x6e>
 8005610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	2501      	movs	r5, #1
 8005618:	e7c0      	b.n	800559c <_scanf_float+0x188>
 800561a:	2d03      	cmp	r5, #3
 800561c:	d0e2      	beq.n	80055e4 <_scanf_float+0x1d0>
 800561e:	2d05      	cmp	r5, #5
 8005620:	e7de      	b.n	80055e0 <_scanf_float+0x1cc>
 8005622:	2d02      	cmp	r5, #2
 8005624:	f47f af26 	bne.w	8005474 <_scanf_float+0x60>
 8005628:	2503      	movs	r5, #3
 800562a:	e7b7      	b.n	800559c <_scanf_float+0x188>
 800562c:	2d06      	cmp	r5, #6
 800562e:	f47f af21 	bne.w	8005474 <_scanf_float+0x60>
 8005632:	2507      	movs	r5, #7
 8005634:	e7b2      	b.n	800559c <_scanf_float+0x188>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	0591      	lsls	r1, r2, #22
 800563a:	f57f af1b 	bpl.w	8005474 <_scanf_float+0x60>
 800563e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005642:	6022      	str	r2, [r4, #0]
 8005644:	f8cd 9004 	str.w	r9, [sp, #4]
 8005648:	e7a8      	b.n	800559c <_scanf_float+0x188>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005654:	d006      	beq.n	8005664 <_scanf_float+0x250>
 8005656:	0550      	lsls	r0, r2, #21
 8005658:	f57f af0c 	bpl.w	8005474 <_scanf_float+0x60>
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	f43f af0f 	beq.w	8005482 <_scanf_float+0x6e>
 8005664:	0591      	lsls	r1, r2, #22
 8005666:	bf58      	it	pl
 8005668:	9901      	ldrpl	r1, [sp, #4]
 800566a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800566e:	bf58      	it	pl
 8005670:	eba9 0101 	subpl.w	r1, r9, r1
 8005674:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005678:	bf58      	it	pl
 800567a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	f04f 0900 	mov.w	r9, #0
 8005684:	e78a      	b.n	800559c <_scanf_float+0x188>
 8005686:	f04f 0a03 	mov.w	sl, #3
 800568a:	e787      	b.n	800559c <_scanf_float+0x188>
 800568c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005690:	4639      	mov	r1, r7
 8005692:	4640      	mov	r0, r8
 8005694:	4798      	blx	r3
 8005696:	2800      	cmp	r0, #0
 8005698:	f43f aedf 	beq.w	800545a <_scanf_float+0x46>
 800569c:	e6ea      	b.n	8005474 <_scanf_float+0x60>
 800569e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056a6:	463a      	mov	r2, r7
 80056a8:	4640      	mov	r0, r8
 80056aa:	4798      	blx	r3
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	e6ec      	b.n	800548e <_scanf_float+0x7a>
 80056b4:	1e6b      	subs	r3, r5, #1
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d825      	bhi.n	8005706 <_scanf_float+0x2f2>
 80056ba:	2d02      	cmp	r5, #2
 80056bc:	d836      	bhi.n	800572c <_scanf_float+0x318>
 80056be:	455e      	cmp	r6, fp
 80056c0:	f67f aee8 	bls.w	8005494 <_scanf_float+0x80>
 80056c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056cc:	463a      	mov	r2, r7
 80056ce:	4640      	mov	r0, r8
 80056d0:	4798      	blx	r3
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	e7f1      	b.n	80056be <_scanf_float+0x2aa>
 80056da:	9802      	ldr	r0, [sp, #8]
 80056dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056e4:	9002      	str	r0, [sp, #8]
 80056e6:	463a      	mov	r2, r7
 80056e8:	4640      	mov	r0, r8
 80056ea:	4798      	blx	r3
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056f6:	fa5f fa8a 	uxtb.w	sl, sl
 80056fa:	f1ba 0f02 	cmp.w	sl, #2
 80056fe:	d1ec      	bne.n	80056da <_scanf_float+0x2c6>
 8005700:	3d03      	subs	r5, #3
 8005702:	b2ed      	uxtb	r5, r5
 8005704:	1b76      	subs	r6, r6, r5
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	05da      	lsls	r2, r3, #23
 800570a:	d52f      	bpl.n	800576c <_scanf_float+0x358>
 800570c:	055b      	lsls	r3, r3, #21
 800570e:	d510      	bpl.n	8005732 <_scanf_float+0x31e>
 8005710:	455e      	cmp	r6, fp
 8005712:	f67f aebf 	bls.w	8005494 <_scanf_float+0x80>
 8005716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800571a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800571e:	463a      	mov	r2, r7
 8005720:	4640      	mov	r0, r8
 8005722:	4798      	blx	r3
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	3b01      	subs	r3, #1
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	e7f1      	b.n	8005710 <_scanf_float+0x2fc>
 800572c:	46aa      	mov	sl, r5
 800572e:	9602      	str	r6, [sp, #8]
 8005730:	e7df      	b.n	80056f2 <_scanf_float+0x2de>
 8005732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	2965      	cmp	r1, #101	; 0x65
 800573a:	f103 33ff 	add.w	r3, r3, #4294967295
 800573e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	d00c      	beq.n	8005760 <_scanf_float+0x34c>
 8005746:	2945      	cmp	r1, #69	; 0x45
 8005748:	d00a      	beq.n	8005760 <_scanf_float+0x34c>
 800574a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800574e:	463a      	mov	r2, r7
 8005750:	4640      	mov	r0, r8
 8005752:	4798      	blx	r3
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800575a:	3b01      	subs	r3, #1
 800575c:	1eb5      	subs	r5, r6, #2
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005764:	463a      	mov	r2, r7
 8005766:	4640      	mov	r0, r8
 8005768:	4798      	blx	r3
 800576a:	462e      	mov	r6, r5
 800576c:	6825      	ldr	r5, [r4, #0]
 800576e:	f015 0510 	ands.w	r5, r5, #16
 8005772:	d158      	bne.n	8005826 <_scanf_float+0x412>
 8005774:	7035      	strb	r5, [r6, #0]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d11c      	bne.n	80057bc <_scanf_float+0x3a8>
 8005782:	9b01      	ldr	r3, [sp, #4]
 8005784:	454b      	cmp	r3, r9
 8005786:	eba3 0209 	sub.w	r2, r3, r9
 800578a:	d124      	bne.n	80057d6 <_scanf_float+0x3c2>
 800578c:	2200      	movs	r2, #0
 800578e:	4659      	mov	r1, fp
 8005790:	4640      	mov	r0, r8
 8005792:	f002 fc31 	bl	8007ff8 <_strtod_r>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	6821      	ldr	r1, [r4, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f011 0f02 	tst.w	r1, #2
 80057a0:	ec57 6b10 	vmov	r6, r7, d0
 80057a4:	f103 0204 	add.w	r2, r3, #4
 80057a8:	d020      	beq.n	80057ec <_scanf_float+0x3d8>
 80057aa:	9903      	ldr	r1, [sp, #12]
 80057ac:	600a      	str	r2, [r1, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	e9c3 6700 	strd	r6, r7, [r3]
 80057b4:	68e3      	ldr	r3, [r4, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60e3      	str	r3, [r4, #12]
 80057ba:	e66c      	b.n	8005496 <_scanf_float+0x82>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0e4      	beq.n	800578c <_scanf_float+0x378>
 80057c2:	9905      	ldr	r1, [sp, #20]
 80057c4:	230a      	movs	r3, #10
 80057c6:	462a      	mov	r2, r5
 80057c8:	3101      	adds	r1, #1
 80057ca:	4640      	mov	r0, r8
 80057cc:	f002 fc9c 	bl	8008108 <_strtol_r>
 80057d0:	9b04      	ldr	r3, [sp, #16]
 80057d2:	9e05      	ldr	r6, [sp, #20]
 80057d4:	1ac2      	subs	r2, r0, r3
 80057d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057da:	429e      	cmp	r6, r3
 80057dc:	bf28      	it	cs
 80057de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057e2:	4912      	ldr	r1, [pc, #72]	; (800582c <_scanf_float+0x418>)
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 f8e7 	bl	80059b8 <siprintf>
 80057ea:	e7cf      	b.n	800578c <_scanf_float+0x378>
 80057ec:	f011 0f04 	tst.w	r1, #4
 80057f0:	9903      	ldr	r1, [sp, #12]
 80057f2:	600a      	str	r2, [r1, #0]
 80057f4:	d1db      	bne.n	80057ae <_scanf_float+0x39a>
 80057f6:	f8d3 8000 	ldr.w	r8, [r3]
 80057fa:	ee10 2a10 	vmov	r2, s0
 80057fe:	ee10 0a10 	vmov	r0, s0
 8005802:	463b      	mov	r3, r7
 8005804:	4639      	mov	r1, r7
 8005806:	f7fb f991 	bl	8000b2c <__aeabi_dcmpun>
 800580a:	b128      	cbz	r0, 8005818 <_scanf_float+0x404>
 800580c:	4808      	ldr	r0, [pc, #32]	; (8005830 <_scanf_float+0x41c>)
 800580e:	f000 f9b7 	bl	8005b80 <nanf>
 8005812:	ed88 0a00 	vstr	s0, [r8]
 8005816:	e7cd      	b.n	80057b4 <_scanf_float+0x3a0>
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f9e4 	bl	8000be8 <__aeabi_d2f>
 8005820:	f8c8 0000 	str.w	r0, [r8]
 8005824:	e7c6      	b.n	80057b4 <_scanf_float+0x3a0>
 8005826:	2500      	movs	r5, #0
 8005828:	e635      	b.n	8005496 <_scanf_float+0x82>
 800582a:	bf00      	nop
 800582c:	080093a4 	.word	0x080093a4
 8005830:	08009735 	.word	0x08009735

08005834 <std>:
 8005834:	2300      	movs	r3, #0
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	e9c0 3300 	strd	r3, r3, [r0]
 800583e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005842:	6083      	str	r3, [r0, #8]
 8005844:	8181      	strh	r1, [r0, #12]
 8005846:	6643      	str	r3, [r0, #100]	; 0x64
 8005848:	81c2      	strh	r2, [r0, #14]
 800584a:	6183      	str	r3, [r0, #24]
 800584c:	4619      	mov	r1, r3
 800584e:	2208      	movs	r2, #8
 8005850:	305c      	adds	r0, #92	; 0x5c
 8005852:	f000 f914 	bl	8005a7e <memset>
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <std+0x58>)
 8005858:	6263      	str	r3, [r4, #36]	; 0x24
 800585a:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <std+0x5c>)
 800585c:	62a3      	str	r3, [r4, #40]	; 0x28
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <std+0x60>)
 8005860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <std+0x64>)
 8005864:	6323      	str	r3, [r4, #48]	; 0x30
 8005866:	4b0d      	ldr	r3, [pc, #52]	; (800589c <std+0x68>)
 8005868:	6224      	str	r4, [r4, #32]
 800586a:	429c      	cmp	r4, r3
 800586c:	d006      	beq.n	800587c <std+0x48>
 800586e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005872:	4294      	cmp	r4, r2
 8005874:	d002      	beq.n	800587c <std+0x48>
 8005876:	33d0      	adds	r3, #208	; 0xd0
 8005878:	429c      	cmp	r4, r3
 800587a:	d105      	bne.n	8005888 <std+0x54>
 800587c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f000 b978 	b.w	8005b78 <__retarget_lock_init_recursive>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	080059f9 	.word	0x080059f9
 8005890:	08005a1b 	.word	0x08005a1b
 8005894:	08005a53 	.word	0x08005a53
 8005898:	08005a77 	.word	0x08005a77
 800589c:	200006d0 	.word	0x200006d0

080058a0 <stdio_exit_handler>:
 80058a0:	4a02      	ldr	r2, [pc, #8]	; (80058ac <stdio_exit_handler+0xc>)
 80058a2:	4903      	ldr	r1, [pc, #12]	; (80058b0 <stdio_exit_handler+0x10>)
 80058a4:	4803      	ldr	r0, [pc, #12]	; (80058b4 <stdio_exit_handler+0x14>)
 80058a6:	f000 b869 	b.w	800597c <_fwalk_sglue>
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	080084c9 	.word	0x080084c9
 80058b4:	20000018 	.word	0x20000018

080058b8 <cleanup_stdio>:
 80058b8:	6841      	ldr	r1, [r0, #4]
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <cleanup_stdio+0x34>)
 80058bc:	4299      	cmp	r1, r3
 80058be:	b510      	push	{r4, lr}
 80058c0:	4604      	mov	r4, r0
 80058c2:	d001      	beq.n	80058c8 <cleanup_stdio+0x10>
 80058c4:	f002 fe00 	bl	80084c8 <_fflush_r>
 80058c8:	68a1      	ldr	r1, [r4, #8]
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <cleanup_stdio+0x38>)
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <cleanup_stdio+0x1e>
 80058d0:	4620      	mov	r0, r4
 80058d2:	f002 fdf9 	bl	80084c8 <_fflush_r>
 80058d6:	68e1      	ldr	r1, [r4, #12]
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <cleanup_stdio+0x3c>)
 80058da:	4299      	cmp	r1, r3
 80058dc:	d004      	beq.n	80058e8 <cleanup_stdio+0x30>
 80058de:	4620      	mov	r0, r4
 80058e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e4:	f002 bdf0 	b.w	80084c8 <_fflush_r>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	200006d0 	.word	0x200006d0
 80058f0:	20000738 	.word	0x20000738
 80058f4:	200007a0 	.word	0x200007a0

080058f8 <global_stdio_init.part.0>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <global_stdio_init.part.0+0x30>)
 80058fc:	4c0b      	ldr	r4, [pc, #44]	; (800592c <global_stdio_init.part.0+0x34>)
 80058fe:	4a0c      	ldr	r2, [pc, #48]	; (8005930 <global_stdio_init.part.0+0x38>)
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	4620      	mov	r0, r4
 8005904:	2200      	movs	r2, #0
 8005906:	2104      	movs	r1, #4
 8005908:	f7ff ff94 	bl	8005834 <std>
 800590c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005910:	2201      	movs	r2, #1
 8005912:	2109      	movs	r1, #9
 8005914:	f7ff ff8e 	bl	8005834 <std>
 8005918:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800591c:	2202      	movs	r2, #2
 800591e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005922:	2112      	movs	r1, #18
 8005924:	f7ff bf86 	b.w	8005834 <std>
 8005928:	20000808 	.word	0x20000808
 800592c:	200006d0 	.word	0x200006d0
 8005930:	080058a1 	.word	0x080058a1

08005934 <__sfp_lock_acquire>:
 8005934:	4801      	ldr	r0, [pc, #4]	; (800593c <__sfp_lock_acquire+0x8>)
 8005936:	f000 b920 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 800593a:	bf00      	nop
 800593c:	20000811 	.word	0x20000811

08005940 <__sfp_lock_release>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__sfp_lock_release+0x8>)
 8005942:	f000 b91b 	b.w	8005b7c <__retarget_lock_release_recursive>
 8005946:	bf00      	nop
 8005948:	20000811 	.word	0x20000811

0800594c <__sinit>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	f7ff fff0 	bl	8005934 <__sfp_lock_acquire>
 8005954:	6a23      	ldr	r3, [r4, #32]
 8005956:	b11b      	cbz	r3, 8005960 <__sinit+0x14>
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595c:	f7ff bff0 	b.w	8005940 <__sfp_lock_release>
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <__sinit+0x28>)
 8005962:	6223      	str	r3, [r4, #32]
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <__sinit+0x2c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f5      	bne.n	8005958 <__sinit+0xc>
 800596c:	f7ff ffc4 	bl	80058f8 <global_stdio_init.part.0>
 8005970:	e7f2      	b.n	8005958 <__sinit+0xc>
 8005972:	bf00      	nop
 8005974:	080058b9 	.word	0x080058b9
 8005978:	20000808 	.word	0x20000808

0800597c <_fwalk_sglue>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	4607      	mov	r7, r0
 8005982:	4688      	mov	r8, r1
 8005984:	4614      	mov	r4, r2
 8005986:	2600      	movs	r6, #0
 8005988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800598c:	f1b9 0901 	subs.w	r9, r9, #1
 8005990:	d505      	bpl.n	800599e <_fwalk_sglue+0x22>
 8005992:	6824      	ldr	r4, [r4, #0]
 8005994:	2c00      	cmp	r4, #0
 8005996:	d1f7      	bne.n	8005988 <_fwalk_sglue+0xc>
 8005998:	4630      	mov	r0, r6
 800599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d907      	bls.n	80059b4 <_fwalk_sglue+0x38>
 80059a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a8:	3301      	adds	r3, #1
 80059aa:	d003      	beq.n	80059b4 <_fwalk_sglue+0x38>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4638      	mov	r0, r7
 80059b0:	47c0      	blx	r8
 80059b2:	4306      	orrs	r6, r0
 80059b4:	3568      	adds	r5, #104	; 0x68
 80059b6:	e7e9      	b.n	800598c <_fwalk_sglue+0x10>

080059b8 <siprintf>:
 80059b8:	b40e      	push	{r1, r2, r3}
 80059ba:	b500      	push	{lr}
 80059bc:	b09c      	sub	sp, #112	; 0x70
 80059be:	ab1d      	add	r3, sp, #116	; 0x74
 80059c0:	9002      	str	r0, [sp, #8]
 80059c2:	9006      	str	r0, [sp, #24]
 80059c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059c8:	4809      	ldr	r0, [pc, #36]	; (80059f0 <siprintf+0x38>)
 80059ca:	9107      	str	r1, [sp, #28]
 80059cc:	9104      	str	r1, [sp, #16]
 80059ce:	4909      	ldr	r1, [pc, #36]	; (80059f4 <siprintf+0x3c>)
 80059d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d4:	9105      	str	r1, [sp, #20]
 80059d6:	6800      	ldr	r0, [r0, #0]
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	a902      	add	r1, sp, #8
 80059dc:	f002 fbf0 	bl	80081c0 <_svfiprintf_r>
 80059e0:	9b02      	ldr	r3, [sp, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	b01c      	add	sp, #112	; 0x70
 80059e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ec:	b003      	add	sp, #12
 80059ee:	4770      	bx	lr
 80059f0:	20000064 	.word	0x20000064
 80059f4:	ffff0208 	.word	0xffff0208

080059f8 <__sread>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	f000 f86c 	bl	8005adc <_read_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bfab      	itete	ge
 8005a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a0c:	181b      	addge	r3, r3, r0
 8005a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a12:	bfac      	ite	ge
 8005a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a16:	81a3      	strhlt	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__swrite>:
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	461f      	mov	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	05db      	lsls	r3, r3, #23
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1e>
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f000 f840 	bl	8005ab8 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	4632      	mov	r2, r6
 8005a46:	463b      	mov	r3, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	f000 b857 	b.w	8005b00 <_write_r>

08005a52 <__sseek>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 f82d 	bl	8005ab8 <_lseek_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	bf15      	itete	ne
 8005a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a6e:	81a3      	strheq	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	81a3      	strhne	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__sclose>:
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 b80d 	b.w	8005a98 <_close_r>

08005a7e <memset>:
 8005a7e:	4402      	add	r2, r0
 8005a80:	4603      	mov	r3, r0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d100      	bne.n	8005a88 <memset+0xa>
 8005a86:	4770      	bx	lr
 8005a88:	f803 1b01 	strb.w	r1, [r3], #1
 8005a8c:	e7f9      	b.n	8005a82 <memset+0x4>
	...

08005a90 <_localeconv_r>:
 8005a90:	4800      	ldr	r0, [pc, #0]	; (8005a94 <_localeconv_r+0x4>)
 8005a92:	4770      	bx	lr
 8005a94:	20000158 	.word	0x20000158

08005a98 <_close_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	; (8005ab4 <_close_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fb fc2f 	bl	8001306 <_close>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_close_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_close_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	2000080c 	.word	0x2000080c

08005ab8 <_lseek_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_lseek_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fb fc44 	bl	8001354 <_lseek>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_lseek_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_lseek_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	2000080c 	.word	0x2000080c

08005adc <_read_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_read_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fb fbd2 	bl	8001294 <_read>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_read_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_read_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	2000080c 	.word	0x2000080c

08005b00 <_write_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_write_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fb fbdd 	bl	80012ce <_write>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_write_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_write_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	2000080c 	.word	0x2000080c

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	; (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000064 	.word	0x20000064

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4d0d      	ldr	r5, [pc, #52]	; (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	; (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	42a6      	cmp	r6, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4d0b      	ldr	r5, [pc, #44]	; (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	; (8005b74 <__libc_init_array+0x44>)
 8005b44:	f003 fbd8 	bl	80092f8 <_init>
 8005b48:	1b64      	subs	r4, r4, r5
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b58:	4798      	blx	r3
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b62:	4798      	blx	r3
 8005b64:	3601      	adds	r6, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	08009798 	.word	0x08009798
 8005b6c:	08009798 	.word	0x08009798
 8005b70:	08009798 	.word	0x08009798
 8005b74:	0800979c 	.word	0x0800979c

08005b78 <__retarget_lock_init_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_acquire_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <__retarget_lock_release_recursive>:
 8005b7c:	4770      	bx	lr
	...

08005b80 <nanf>:
 8005b80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b88 <nanf+0x8>
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	7fc00000 	.word	0x7fc00000

08005b8c <quorem>:
 8005b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	6903      	ldr	r3, [r0, #16]
 8005b92:	690c      	ldr	r4, [r1, #16]
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	4607      	mov	r7, r0
 8005b98:	db7e      	blt.n	8005c98 <quorem+0x10c>
 8005b9a:	3c01      	subs	r4, #1
 8005b9c:	f101 0814 	add.w	r8, r1, #20
 8005ba0:	f100 0514 	add.w	r5, r0, #20
 8005ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bc2:	d331      	bcc.n	8005c28 <quorem+0x9c>
 8005bc4:	f04f 0e00 	mov.w	lr, #0
 8005bc8:	4640      	mov	r0, r8
 8005bca:	46ac      	mov	ip, r5
 8005bcc:	46f2      	mov	sl, lr
 8005bce:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bd2:	b293      	uxth	r3, r2
 8005bd4:	fb06 e303 	mla	r3, r6, r3, lr
 8005bd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bdc:	0c1a      	lsrs	r2, r3, #16
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ebaa 0303 	sub.w	r3, sl, r3
 8005be4:	f8dc a000 	ldr.w	sl, [ip]
 8005be8:	fa13 f38a 	uxtah	r3, r3, sl
 8005bec:	fb06 220e 	mla	r2, r6, lr, r2
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	9b00      	ldr	r3, [sp, #0]
 8005bf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c02:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c06:	4581      	cmp	r9, r0
 8005c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c0c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c14:	d2db      	bcs.n	8005bce <quorem+0x42>
 8005c16:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c1a:	b92b      	cbnz	r3, 8005c28 <quorem+0x9c>
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	429d      	cmp	r5, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	d32c      	bcc.n	8005c80 <quorem+0xf4>
 8005c26:	613c      	str	r4, [r7, #16]
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f001 f9f1 	bl	8007010 <__mcmp>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	db22      	blt.n	8005c78 <quorem+0xec>
 8005c32:	3601      	adds	r6, #1
 8005c34:	4629      	mov	r1, r5
 8005c36:	2000      	movs	r0, #0
 8005c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c3c:	f8d1 c000 	ldr.w	ip, [r1]
 8005c40:	b293      	uxth	r3, r2
 8005c42:	1ac3      	subs	r3, r0, r3
 8005c44:	0c12      	lsrs	r2, r2, #16
 8005c46:	fa13 f38c 	uxtah	r3, r3, ip
 8005c4a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c58:	45c1      	cmp	r9, r8
 8005c5a:	f841 3b04 	str.w	r3, [r1], #4
 8005c5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c62:	d2e9      	bcs.n	8005c38 <quorem+0xac>
 8005c64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c6c:	b922      	cbnz	r2, 8005c78 <quorem+0xec>
 8005c6e:	3b04      	subs	r3, #4
 8005c70:	429d      	cmp	r5, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	d30a      	bcc.n	8005c8c <quorem+0x100>
 8005c76:	613c      	str	r4, [r7, #16]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	b003      	add	sp, #12
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	3b04      	subs	r3, #4
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d1ce      	bne.n	8005c26 <quorem+0x9a>
 8005c88:	3c01      	subs	r4, #1
 8005c8a:	e7c9      	b.n	8005c20 <quorem+0x94>
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	3b04      	subs	r3, #4
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	d1f0      	bne.n	8005c76 <quorem+0xea>
 8005c94:	3c01      	subs	r4, #1
 8005c96:	e7eb      	b.n	8005c70 <quorem+0xe4>
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e7ee      	b.n	8005c7a <quorem+0xee>
 8005c9c:	0000      	movs	r0, r0
	...

08005ca0 <_dtoa_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	ed2d 8b04 	vpush	{d8-d9}
 8005ca8:	69c5      	ldr	r5, [r0, #28]
 8005caa:	b093      	sub	sp, #76	; 0x4c
 8005cac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cb0:	ec57 6b10 	vmov	r6, r7, d0
 8005cb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cb8:	9107      	str	r1, [sp, #28]
 8005cba:	4604      	mov	r4, r0
 8005cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8005cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8005cc0:	b975      	cbnz	r5, 8005ce0 <_dtoa_r+0x40>
 8005cc2:	2010      	movs	r0, #16
 8005cc4:	f000 fe2a 	bl	800691c <malloc>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	61e0      	str	r0, [r4, #28]
 8005ccc:	b920      	cbnz	r0, 8005cd8 <_dtoa_r+0x38>
 8005cce:	4bae      	ldr	r3, [pc, #696]	; (8005f88 <_dtoa_r+0x2e8>)
 8005cd0:	21ef      	movs	r1, #239	; 0xef
 8005cd2:	48ae      	ldr	r0, [pc, #696]	; (8005f8c <_dtoa_r+0x2ec>)
 8005cd4:	f002 fc74 	bl	80085c0 <__assert_func>
 8005cd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cdc:	6005      	str	r5, [r0, #0]
 8005cde:	60c5      	str	r5, [r0, #12]
 8005ce0:	69e3      	ldr	r3, [r4, #28]
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	b151      	cbz	r1, 8005cfc <_dtoa_r+0x5c>
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	604a      	str	r2, [r1, #4]
 8005cea:	2301      	movs	r3, #1
 8005cec:	4093      	lsls	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 ff07 	bl	8006b04 <_Bfree>
 8005cf6:	69e3      	ldr	r3, [r4, #28]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	1e3b      	subs	r3, r7, #0
 8005cfe:	bfbb      	ittet	lt
 8005d00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d04:	9303      	strlt	r3, [sp, #12]
 8005d06:	2300      	movge	r3, #0
 8005d08:	2201      	movlt	r2, #1
 8005d0a:	bfac      	ite	ge
 8005d0c:	f8c8 3000 	strge.w	r3, [r8]
 8005d10:	f8c8 2000 	strlt.w	r2, [r8]
 8005d14:	4b9e      	ldr	r3, [pc, #632]	; (8005f90 <_dtoa_r+0x2f0>)
 8005d16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d1a:	ea33 0308 	bics.w	r3, r3, r8
 8005d1e:	d11b      	bne.n	8005d58 <_dtoa_r+0xb8>
 8005d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d22:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d2c:	4333      	orrs	r3, r6
 8005d2e:	f000 8593 	beq.w	8006858 <_dtoa_r+0xbb8>
 8005d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d34:	b963      	cbnz	r3, 8005d50 <_dtoa_r+0xb0>
 8005d36:	4b97      	ldr	r3, [pc, #604]	; (8005f94 <_dtoa_r+0x2f4>)
 8005d38:	e027      	b.n	8005d8a <_dtoa_r+0xea>
 8005d3a:	4b97      	ldr	r3, [pc, #604]	; (8005f98 <_dtoa_r+0x2f8>)
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	9800      	ldr	r0, [sp, #0]
 8005d46:	b013      	add	sp, #76	; 0x4c
 8005d48:	ecbd 8b04 	vpop	{d8-d9}
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	4b90      	ldr	r3, [pc, #576]	; (8005f94 <_dtoa_r+0x2f4>)
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	3303      	adds	r3, #3
 8005d56:	e7f3      	b.n	8005d40 <_dtoa_r+0xa0>
 8005d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	ec51 0b17 	vmov	r0, r1, d7
 8005d62:	eeb0 8a47 	vmov.f32	s16, s14
 8005d66:	eef0 8a67 	vmov.f32	s17, s15
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fa feac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d70:	4681      	mov	r9, r0
 8005d72:	b160      	cbz	r0, 8005d8e <_dtoa_r+0xee>
 8005d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d76:	2301      	movs	r3, #1
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8568 	beq.w	8006852 <_dtoa_r+0xbb2>
 8005d82:	4b86      	ldr	r3, [pc, #536]	; (8005f9c <_dtoa_r+0x2fc>)
 8005d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	e7da      	b.n	8005d44 <_dtoa_r+0xa4>
 8005d8e:	aa10      	add	r2, sp, #64	; 0x40
 8005d90:	a911      	add	r1, sp, #68	; 0x44
 8005d92:	4620      	mov	r0, r4
 8005d94:	eeb0 0a48 	vmov.f32	s0, s16
 8005d98:	eef0 0a68 	vmov.f32	s1, s17
 8005d9c:	f001 fa4e 	bl	800723c <__d2b>
 8005da0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005da4:	4682      	mov	sl, r0
 8005da6:	2d00      	cmp	r5, #0
 8005da8:	d07f      	beq.n	8005eaa <_dtoa_r+0x20a>
 8005daa:	ee18 3a90 	vmov	r3, s17
 8005dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005db6:	ec51 0b18 	vmov	r0, r1, d8
 8005dba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b75      	ldr	r3, [pc, #468]	; (8005fa0 <_dtoa_r+0x300>)
 8005dcc:	f7fa fa5c 	bl	8000288 <__aeabi_dsub>
 8005dd0:	a367      	add	r3, pc, #412	; (adr r3, 8005f70 <_dtoa_r+0x2d0>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fc0f 	bl	80005f8 <__aeabi_dmul>
 8005dda:	a367      	add	r3, pc, #412	; (adr r3, 8005f78 <_dtoa_r+0x2d8>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fa54 	bl	800028c <__adddf3>
 8005de4:	4606      	mov	r6, r0
 8005de6:	4628      	mov	r0, r5
 8005de8:	460f      	mov	r7, r1
 8005dea:	f7fa fb9b 	bl	8000524 <__aeabi_i2d>
 8005dee:	a364      	add	r3, pc, #400	; (adr r3, 8005f80 <_dtoa_r+0x2e0>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	4639      	mov	r1, r7
 8005e00:	f7fa fa44 	bl	800028c <__adddf3>
 8005e04:	4606      	mov	r6, r0
 8005e06:	460f      	mov	r7, r1
 8005e08:	f7fa fea6 	bl	8000b58 <__aeabi_d2iz>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4683      	mov	fp, r0
 8005e10:	2300      	movs	r3, #0
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fe61 	bl	8000adc <__aeabi_dcmplt>
 8005e1a:	b148      	cbz	r0, 8005e30 <_dtoa_r+0x190>
 8005e1c:	4658      	mov	r0, fp
 8005e1e:	f7fa fb81 	bl	8000524 <__aeabi_i2d>
 8005e22:	4632      	mov	r2, r6
 8005e24:	463b      	mov	r3, r7
 8005e26:	f7fa fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e2a:	b908      	cbnz	r0, 8005e30 <_dtoa_r+0x190>
 8005e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e30:	f1bb 0f16 	cmp.w	fp, #22
 8005e34:	d857      	bhi.n	8005ee6 <_dtoa_r+0x246>
 8005e36:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <_dtoa_r+0x304>)
 8005e38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	ec51 0b18 	vmov	r0, r1, d8
 8005e44:	f7fa fe4a 	bl	8000adc <__aeabi_dcmplt>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d04e      	beq.n	8005eea <_dtoa_r+0x24a>
 8005e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e50:	2300      	movs	r3, #0
 8005e52:	930c      	str	r3, [sp, #48]	; 0x30
 8005e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e56:	1b5b      	subs	r3, r3, r5
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	bf45      	ittet	mi
 8005e5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e60:	9305      	strmi	r3, [sp, #20]
 8005e62:	2300      	movpl	r3, #0
 8005e64:	2300      	movmi	r3, #0
 8005e66:	9206      	str	r2, [sp, #24]
 8005e68:	bf54      	ite	pl
 8005e6a:	9305      	strpl	r3, [sp, #20]
 8005e6c:	9306      	strmi	r3, [sp, #24]
 8005e6e:	f1bb 0f00 	cmp.w	fp, #0
 8005e72:	db3c      	blt.n	8005eee <_dtoa_r+0x24e>
 8005e74:	9b06      	ldr	r3, [sp, #24]
 8005e76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e7a:	445b      	add	r3, fp
 8005e7c:	9306      	str	r3, [sp, #24]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9308      	str	r3, [sp, #32]
 8005e82:	9b07      	ldr	r3, [sp, #28]
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d868      	bhi.n	8005f5a <_dtoa_r+0x2ba>
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	bfc4      	itt	gt
 8005e8c:	3b04      	subgt	r3, #4
 8005e8e:	9307      	strgt	r3, [sp, #28]
 8005e90:	9b07      	ldr	r3, [sp, #28]
 8005e92:	f1a3 0302 	sub.w	r3, r3, #2
 8005e96:	bfcc      	ite	gt
 8005e98:	2500      	movgt	r5, #0
 8005e9a:	2501      	movle	r5, #1
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	f200 8085 	bhi.w	8005fac <_dtoa_r+0x30c>
 8005ea2:	e8df f003 	tbb	[pc, r3]
 8005ea6:	3b2e      	.short	0x3b2e
 8005ea8:	5839      	.short	0x5839
 8005eaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005eae:	441d      	add	r5, r3
 8005eb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	bfc1      	itttt	gt
 8005eb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ebc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005ec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ec8:	bfd6      	itet	le
 8005eca:	f1c3 0320 	rsble	r3, r3, #32
 8005ece:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ed2:	fa06 f003 	lslle.w	r0, r6, r3
 8005ed6:	f7fa fb15 	bl	8000504 <__aeabi_ui2d>
 8005eda:	2201      	movs	r2, #1
 8005edc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ee0:	3d01      	subs	r5, #1
 8005ee2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ee4:	e76f      	b.n	8005dc6 <_dtoa_r+0x126>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e7b3      	b.n	8005e52 <_dtoa_r+0x1b2>
 8005eea:	900c      	str	r0, [sp, #48]	; 0x30
 8005eec:	e7b2      	b.n	8005e54 <_dtoa_r+0x1b4>
 8005eee:	9b05      	ldr	r3, [sp, #20]
 8005ef0:	eba3 030b 	sub.w	r3, r3, fp
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	f1cb 0300 	rsb	r3, fp, #0
 8005efa:	9308      	str	r3, [sp, #32]
 8005efc:	2300      	movs	r3, #0
 8005efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f00:	e7bf      	b.n	8005e82 <_dtoa_r+0x1e2>
 8005f02:	2300      	movs	r3, #0
 8005f04:	9309      	str	r3, [sp, #36]	; 0x24
 8005f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dc52      	bgt.n	8005fb2 <_dtoa_r+0x312>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	461a      	mov	r2, r3
 8005f14:	920a      	str	r2, [sp, #40]	; 0x28
 8005f16:	e00b      	b.n	8005f30 <_dtoa_r+0x290>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e7f3      	b.n	8005f04 <_dtoa_r+0x264>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f22:	445b      	add	r3, fp
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	3301      	adds	r3, #1
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	bfb8      	it	lt
 8005f2e:	2301      	movlt	r3, #1
 8005f30:	69e0      	ldr	r0, [r4, #28]
 8005f32:	2100      	movs	r1, #0
 8005f34:	2204      	movs	r2, #4
 8005f36:	f102 0614 	add.w	r6, r2, #20
 8005f3a:	429e      	cmp	r6, r3
 8005f3c:	d93d      	bls.n	8005fba <_dtoa_r+0x31a>
 8005f3e:	6041      	str	r1, [r0, #4]
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fd9f 	bl	8006a84 <_Balloc>
 8005f46:	9000      	str	r0, [sp, #0]
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d139      	bne.n	8005fc0 <_dtoa_r+0x320>
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <_dtoa_r+0x308>)
 8005f4e:	4602      	mov	r2, r0
 8005f50:	f240 11af 	movw	r1, #431	; 0x1af
 8005f54:	e6bd      	b.n	8005cd2 <_dtoa_r+0x32>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e7e1      	b.n	8005f1e <_dtoa_r+0x27e>
 8005f5a:	2501      	movs	r5, #1
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9307      	str	r3, [sp, #28]
 8005f60:	9509      	str	r5, [sp, #36]	; 0x24
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	9304      	str	r3, [sp, #16]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2312      	movs	r3, #18
 8005f6e:	e7d1      	b.n	8005f14 <_dtoa_r+0x274>
 8005f70:	636f4361 	.word	0x636f4361
 8005f74:	3fd287a7 	.word	0x3fd287a7
 8005f78:	8b60c8b3 	.word	0x8b60c8b3
 8005f7c:	3fc68a28 	.word	0x3fc68a28
 8005f80:	509f79fb 	.word	0x509f79fb
 8005f84:	3fd34413 	.word	0x3fd34413
 8005f88:	080093b6 	.word	0x080093b6
 8005f8c:	080093cd 	.word	0x080093cd
 8005f90:	7ff00000 	.word	0x7ff00000
 8005f94:	080093b2 	.word	0x080093b2
 8005f98:	080093a9 	.word	0x080093a9
 8005f9c:	08009381 	.word	0x08009381
 8005fa0:	3ff80000 	.word	0x3ff80000
 8005fa4:	080094b8 	.word	0x080094b8
 8005fa8:	08009425 	.word	0x08009425
 8005fac:	2301      	movs	r3, #1
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	e7d7      	b.n	8005f62 <_dtoa_r+0x2c2>
 8005fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	e7ba      	b.n	8005f30 <_dtoa_r+0x290>
 8005fba:	3101      	adds	r1, #1
 8005fbc:	0052      	lsls	r2, r2, #1
 8005fbe:	e7ba      	b.n	8005f36 <_dtoa_r+0x296>
 8005fc0:	69e3      	ldr	r3, [r4, #28]
 8005fc2:	9a00      	ldr	r2, [sp, #0]
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	2b0e      	cmp	r3, #14
 8005fca:	f200 80a8 	bhi.w	800611e <_dtoa_r+0x47e>
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	f000 80a5 	beq.w	800611e <_dtoa_r+0x47e>
 8005fd4:	f1bb 0f00 	cmp.w	fp, #0
 8005fd8:	dd38      	ble.n	800604c <_dtoa_r+0x3ac>
 8005fda:	4bc0      	ldr	r3, [pc, #768]	; (80062dc <_dtoa_r+0x63c>)
 8005fdc:	f00b 020f 	and.w	r2, fp, #15
 8005fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005fe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005fec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005ff0:	d019      	beq.n	8006026 <_dtoa_r+0x386>
 8005ff2:	4bbb      	ldr	r3, [pc, #748]	; (80062e0 <_dtoa_r+0x640>)
 8005ff4:	ec51 0b18 	vmov	r0, r1, d8
 8005ff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ffc:	f7fa fc26 	bl	800084c <__aeabi_ddiv>
 8006000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006004:	f008 080f 	and.w	r8, r8, #15
 8006008:	2503      	movs	r5, #3
 800600a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80062e0 <_dtoa_r+0x640>
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	d10a      	bne.n	800602a <_dtoa_r+0x38a>
 8006014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006018:	4632      	mov	r2, r6
 800601a:	463b      	mov	r3, r7
 800601c:	f7fa fc16 	bl	800084c <__aeabi_ddiv>
 8006020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006024:	e02b      	b.n	800607e <_dtoa_r+0x3de>
 8006026:	2502      	movs	r5, #2
 8006028:	e7ef      	b.n	800600a <_dtoa_r+0x36a>
 800602a:	f018 0f01 	tst.w	r8, #1
 800602e:	d008      	beq.n	8006042 <_dtoa_r+0x3a2>
 8006030:	4630      	mov	r0, r6
 8006032:	4639      	mov	r1, r7
 8006034:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006038:	f7fa fade 	bl	80005f8 <__aeabi_dmul>
 800603c:	3501      	adds	r5, #1
 800603e:	4606      	mov	r6, r0
 8006040:	460f      	mov	r7, r1
 8006042:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006046:	f109 0908 	add.w	r9, r9, #8
 800604a:	e7e0      	b.n	800600e <_dtoa_r+0x36e>
 800604c:	f000 809f 	beq.w	800618e <_dtoa_r+0x4ee>
 8006050:	f1cb 0600 	rsb	r6, fp, #0
 8006054:	4ba1      	ldr	r3, [pc, #644]	; (80062dc <_dtoa_r+0x63c>)
 8006056:	4fa2      	ldr	r7, [pc, #648]	; (80062e0 <_dtoa_r+0x640>)
 8006058:	f006 020f 	and.w	r2, r6, #15
 800605c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	ec51 0b18 	vmov	r0, r1, d8
 8006068:	f7fa fac6 	bl	80005f8 <__aeabi_dmul>
 800606c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006070:	1136      	asrs	r6, r6, #4
 8006072:	2300      	movs	r3, #0
 8006074:	2502      	movs	r5, #2
 8006076:	2e00      	cmp	r6, #0
 8006078:	d17e      	bne.n	8006178 <_dtoa_r+0x4d8>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1d0      	bne.n	8006020 <_dtoa_r+0x380>
 800607e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8084 	beq.w	8006192 <_dtoa_r+0x4f2>
 800608a:	4b96      	ldr	r3, [pc, #600]	; (80062e4 <_dtoa_r+0x644>)
 800608c:	2200      	movs	r2, #0
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa fd23 	bl	8000adc <__aeabi_dcmplt>
 8006096:	2800      	cmp	r0, #0
 8006098:	d07b      	beq.n	8006192 <_dtoa_r+0x4f2>
 800609a:	9b04      	ldr	r3, [sp, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d078      	beq.n	8006192 <_dtoa_r+0x4f2>
 80060a0:	9b01      	ldr	r3, [sp, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dd39      	ble.n	800611a <_dtoa_r+0x47a>
 80060a6:	4b90      	ldr	r3, [pc, #576]	; (80062e8 <_dtoa_r+0x648>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	4640      	mov	r0, r8
 80060ac:	4649      	mov	r1, r9
 80060ae:	f7fa faa3 	bl	80005f8 <__aeabi_dmul>
 80060b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b6:	9e01      	ldr	r6, [sp, #4]
 80060b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80060bc:	3501      	adds	r5, #1
 80060be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060c2:	4628      	mov	r0, r5
 80060c4:	f7fa fa2e 	bl	8000524 <__aeabi_i2d>
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	f7fa fa94 	bl	80005f8 <__aeabi_dmul>
 80060d0:	4b86      	ldr	r3, [pc, #536]	; (80062ec <_dtoa_r+0x64c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	f7fa f8da 	bl	800028c <__adddf3>
 80060d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d158      	bne.n	8006198 <_dtoa_r+0x4f8>
 80060e6:	4b82      	ldr	r3, [pc, #520]	; (80062f0 <_dtoa_r+0x650>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa f8cb 	bl	8000288 <__aeabi_dsub>
 80060f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060f6:	4680      	mov	r8, r0
 80060f8:	4689      	mov	r9, r1
 80060fa:	f7fa fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80060fe:	2800      	cmp	r0, #0
 8006100:	f040 8296 	bne.w	8006630 <_dtoa_r+0x990>
 8006104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006108:	4640      	mov	r0, r8
 800610a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800610e:	4649      	mov	r1, r9
 8006110:	f7fa fce4 	bl	8000adc <__aeabi_dcmplt>
 8006114:	2800      	cmp	r0, #0
 8006116:	f040 8289 	bne.w	800662c <_dtoa_r+0x98c>
 800611a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800611e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006120:	2b00      	cmp	r3, #0
 8006122:	f2c0 814e 	blt.w	80063c2 <_dtoa_r+0x722>
 8006126:	f1bb 0f0e 	cmp.w	fp, #14
 800612a:	f300 814a 	bgt.w	80063c2 <_dtoa_r+0x722>
 800612e:	4b6b      	ldr	r3, [pc, #428]	; (80062dc <_dtoa_r+0x63c>)
 8006130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	f280 80dc 	bge.w	80062f8 <_dtoa_r+0x658>
 8006140:	9b04      	ldr	r3, [sp, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f300 80d8 	bgt.w	80062f8 <_dtoa_r+0x658>
 8006148:	f040 826f 	bne.w	800662a <_dtoa_r+0x98a>
 800614c:	4b68      	ldr	r3, [pc, #416]	; (80062f0 <_dtoa_r+0x650>)
 800614e:	2200      	movs	r2, #0
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800615c:	f7fa fcd2 	bl	8000b04 <__aeabi_dcmpge>
 8006160:	9e04      	ldr	r6, [sp, #16]
 8006162:	4637      	mov	r7, r6
 8006164:	2800      	cmp	r0, #0
 8006166:	f040 8245 	bne.w	80065f4 <_dtoa_r+0x954>
 800616a:	9d00      	ldr	r5, [sp, #0]
 800616c:	2331      	movs	r3, #49	; 0x31
 800616e:	f805 3b01 	strb.w	r3, [r5], #1
 8006172:	f10b 0b01 	add.w	fp, fp, #1
 8006176:	e241      	b.n	80065fc <_dtoa_r+0x95c>
 8006178:	07f2      	lsls	r2, r6, #31
 800617a:	d505      	bpl.n	8006188 <_dtoa_r+0x4e8>
 800617c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006180:	f7fa fa3a 	bl	80005f8 <__aeabi_dmul>
 8006184:	3501      	adds	r5, #1
 8006186:	2301      	movs	r3, #1
 8006188:	1076      	asrs	r6, r6, #1
 800618a:	3708      	adds	r7, #8
 800618c:	e773      	b.n	8006076 <_dtoa_r+0x3d6>
 800618e:	2502      	movs	r5, #2
 8006190:	e775      	b.n	800607e <_dtoa_r+0x3de>
 8006192:	9e04      	ldr	r6, [sp, #16]
 8006194:	465f      	mov	r7, fp
 8006196:	e792      	b.n	80060be <_dtoa_r+0x41e>
 8006198:	9900      	ldr	r1, [sp, #0]
 800619a:	4b50      	ldr	r3, [pc, #320]	; (80062dc <_dtoa_r+0x63c>)
 800619c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061a0:	4431      	add	r1, r6
 80061a2:	9102      	str	r1, [sp, #8]
 80061a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a6:	eeb0 9a47 	vmov.f32	s18, s14
 80061aa:	eef0 9a67 	vmov.f32	s19, s15
 80061ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061b6:	2900      	cmp	r1, #0
 80061b8:	d044      	beq.n	8006244 <_dtoa_r+0x5a4>
 80061ba:	494e      	ldr	r1, [pc, #312]	; (80062f4 <_dtoa_r+0x654>)
 80061bc:	2000      	movs	r0, #0
 80061be:	f7fa fb45 	bl	800084c <__aeabi_ddiv>
 80061c2:	ec53 2b19 	vmov	r2, r3, d9
 80061c6:	f7fa f85f 	bl	8000288 <__aeabi_dsub>
 80061ca:	9d00      	ldr	r5, [sp, #0]
 80061cc:	ec41 0b19 	vmov	d9, r0, r1
 80061d0:	4649      	mov	r1, r9
 80061d2:	4640      	mov	r0, r8
 80061d4:	f7fa fcc0 	bl	8000b58 <__aeabi_d2iz>
 80061d8:	4606      	mov	r6, r0
 80061da:	f7fa f9a3 	bl	8000524 <__aeabi_i2d>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4640      	mov	r0, r8
 80061e4:	4649      	mov	r1, r9
 80061e6:	f7fa f84f 	bl	8000288 <__aeabi_dsub>
 80061ea:	3630      	adds	r6, #48	; 0x30
 80061ec:	f805 6b01 	strb.w	r6, [r5], #1
 80061f0:	ec53 2b19 	vmov	r2, r3, d9
 80061f4:	4680      	mov	r8, r0
 80061f6:	4689      	mov	r9, r1
 80061f8:	f7fa fc70 	bl	8000adc <__aeabi_dcmplt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d164      	bne.n	80062ca <_dtoa_r+0x62a>
 8006200:	4642      	mov	r2, r8
 8006202:	464b      	mov	r3, r9
 8006204:	4937      	ldr	r1, [pc, #220]	; (80062e4 <_dtoa_r+0x644>)
 8006206:	2000      	movs	r0, #0
 8006208:	f7fa f83e 	bl	8000288 <__aeabi_dsub>
 800620c:	ec53 2b19 	vmov	r2, r3, d9
 8006210:	f7fa fc64 	bl	8000adc <__aeabi_dcmplt>
 8006214:	2800      	cmp	r0, #0
 8006216:	f040 80b6 	bne.w	8006386 <_dtoa_r+0x6e6>
 800621a:	9b02      	ldr	r3, [sp, #8]
 800621c:	429d      	cmp	r5, r3
 800621e:	f43f af7c 	beq.w	800611a <_dtoa_r+0x47a>
 8006222:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <_dtoa_r+0x648>)
 8006224:	ec51 0b19 	vmov	r0, r1, d9
 8006228:	2200      	movs	r2, #0
 800622a:	f7fa f9e5 	bl	80005f8 <__aeabi_dmul>
 800622e:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <_dtoa_r+0x648>)
 8006230:	ec41 0b19 	vmov	d9, r0, r1
 8006234:	2200      	movs	r2, #0
 8006236:	4640      	mov	r0, r8
 8006238:	4649      	mov	r1, r9
 800623a:	f7fa f9dd 	bl	80005f8 <__aeabi_dmul>
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	e7c5      	b.n	80061d0 <_dtoa_r+0x530>
 8006244:	ec51 0b17 	vmov	r0, r1, d7
 8006248:	f7fa f9d6 	bl	80005f8 <__aeabi_dmul>
 800624c:	9b02      	ldr	r3, [sp, #8]
 800624e:	9d00      	ldr	r5, [sp, #0]
 8006250:	930f      	str	r3, [sp, #60]	; 0x3c
 8006252:	ec41 0b19 	vmov	d9, r0, r1
 8006256:	4649      	mov	r1, r9
 8006258:	4640      	mov	r0, r8
 800625a:	f7fa fc7d 	bl	8000b58 <__aeabi_d2iz>
 800625e:	4606      	mov	r6, r0
 8006260:	f7fa f960 	bl	8000524 <__aeabi_i2d>
 8006264:	3630      	adds	r6, #48	; 0x30
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7fa f80b 	bl	8000288 <__aeabi_dsub>
 8006272:	f805 6b01 	strb.w	r6, [r5], #1
 8006276:	9b02      	ldr	r3, [sp, #8]
 8006278:	429d      	cmp	r5, r3
 800627a:	4680      	mov	r8, r0
 800627c:	4689      	mov	r9, r1
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	d124      	bne.n	80062ce <_dtoa_r+0x62e>
 8006284:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <_dtoa_r+0x654>)
 8006286:	ec51 0b19 	vmov	r0, r1, d9
 800628a:	f7f9 ffff 	bl	800028c <__adddf3>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4640      	mov	r0, r8
 8006294:	4649      	mov	r1, r9
 8006296:	f7fa fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800629a:	2800      	cmp	r0, #0
 800629c:	d173      	bne.n	8006386 <_dtoa_r+0x6e6>
 800629e:	ec53 2b19 	vmov	r2, r3, d9
 80062a2:	4914      	ldr	r1, [pc, #80]	; (80062f4 <_dtoa_r+0x654>)
 80062a4:	2000      	movs	r0, #0
 80062a6:	f7f9 ffef 	bl	8000288 <__aeabi_dsub>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fc13 	bl	8000adc <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f43f af2f 	beq.w	800611a <_dtoa_r+0x47a>
 80062bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062be:	1e6b      	subs	r3, r5, #1
 80062c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062c6:	2b30      	cmp	r3, #48	; 0x30
 80062c8:	d0f8      	beq.n	80062bc <_dtoa_r+0x61c>
 80062ca:	46bb      	mov	fp, r7
 80062cc:	e04a      	b.n	8006364 <_dtoa_r+0x6c4>
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <_dtoa_r+0x648>)
 80062d0:	f7fa f992 	bl	80005f8 <__aeabi_dmul>
 80062d4:	4680      	mov	r8, r0
 80062d6:	4689      	mov	r9, r1
 80062d8:	e7bd      	b.n	8006256 <_dtoa_r+0x5b6>
 80062da:	bf00      	nop
 80062dc:	080094b8 	.word	0x080094b8
 80062e0:	08009490 	.word	0x08009490
 80062e4:	3ff00000 	.word	0x3ff00000
 80062e8:	40240000 	.word	0x40240000
 80062ec:	401c0000 	.word	0x401c0000
 80062f0:	40140000 	.word	0x40140000
 80062f4:	3fe00000 	.word	0x3fe00000
 80062f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062fc:	9d00      	ldr	r5, [sp, #0]
 80062fe:	4642      	mov	r2, r8
 8006300:	464b      	mov	r3, r9
 8006302:	4630      	mov	r0, r6
 8006304:	4639      	mov	r1, r7
 8006306:	f7fa faa1 	bl	800084c <__aeabi_ddiv>
 800630a:	f7fa fc25 	bl	8000b58 <__aeabi_d2iz>
 800630e:	9001      	str	r0, [sp, #4]
 8006310:	f7fa f908 	bl	8000524 <__aeabi_i2d>
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	f7fa f96e 	bl	80005f8 <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	f7f9 ffb0 	bl	8000288 <__aeabi_dsub>
 8006328:	9e01      	ldr	r6, [sp, #4]
 800632a:	9f04      	ldr	r7, [sp, #16]
 800632c:	3630      	adds	r6, #48	; 0x30
 800632e:	f805 6b01 	strb.w	r6, [r5], #1
 8006332:	9e00      	ldr	r6, [sp, #0]
 8006334:	1bae      	subs	r6, r5, r6
 8006336:	42b7      	cmp	r7, r6
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	d134      	bne.n	80063a8 <_dtoa_r+0x708>
 800633e:	f7f9 ffa5 	bl	800028c <__adddf3>
 8006342:	4642      	mov	r2, r8
 8006344:	464b      	mov	r3, r9
 8006346:	4606      	mov	r6, r0
 8006348:	460f      	mov	r7, r1
 800634a:	f7fa fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800634e:	b9c8      	cbnz	r0, 8006384 <_dtoa_r+0x6e4>
 8006350:	4642      	mov	r2, r8
 8006352:	464b      	mov	r3, r9
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7fa fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800635c:	b110      	cbz	r0, 8006364 <_dtoa_r+0x6c4>
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	07db      	lsls	r3, r3, #31
 8006362:	d40f      	bmi.n	8006384 <_dtoa_r+0x6e4>
 8006364:	4651      	mov	r1, sl
 8006366:	4620      	mov	r0, r4
 8006368:	f000 fbcc 	bl	8006b04 <_Bfree>
 800636c:	2300      	movs	r3, #0
 800636e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006370:	702b      	strb	r3, [r5, #0]
 8006372:	f10b 0301 	add.w	r3, fp, #1
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800637a:	2b00      	cmp	r3, #0
 800637c:	f43f ace2 	beq.w	8005d44 <_dtoa_r+0xa4>
 8006380:	601d      	str	r5, [r3, #0]
 8006382:	e4df      	b.n	8005d44 <_dtoa_r+0xa4>
 8006384:	465f      	mov	r7, fp
 8006386:	462b      	mov	r3, r5
 8006388:	461d      	mov	r5, r3
 800638a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800638e:	2a39      	cmp	r2, #57	; 0x39
 8006390:	d106      	bne.n	80063a0 <_dtoa_r+0x700>
 8006392:	9a00      	ldr	r2, [sp, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d1f7      	bne.n	8006388 <_dtoa_r+0x6e8>
 8006398:	9900      	ldr	r1, [sp, #0]
 800639a:	2230      	movs	r2, #48	; 0x30
 800639c:	3701      	adds	r7, #1
 800639e:	700a      	strb	r2, [r1, #0]
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	3201      	adds	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e790      	b.n	80062ca <_dtoa_r+0x62a>
 80063a8:	4ba3      	ldr	r3, [pc, #652]	; (8006638 <_dtoa_r+0x998>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	f7fa f924 	bl	80005f8 <__aeabi_dmul>
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	4606      	mov	r6, r0
 80063b6:	460f      	mov	r7, r1
 80063b8:	f7fa fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d09e      	beq.n	80062fe <_dtoa_r+0x65e>
 80063c0:	e7d0      	b.n	8006364 <_dtoa_r+0x6c4>
 80063c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f000 80ca 	beq.w	800655e <_dtoa_r+0x8be>
 80063ca:	9a07      	ldr	r2, [sp, #28]
 80063cc:	2a01      	cmp	r2, #1
 80063ce:	f300 80ad 	bgt.w	800652c <_dtoa_r+0x88c>
 80063d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	f000 80a5 	beq.w	8006524 <_dtoa_r+0x884>
 80063da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063de:	9e08      	ldr	r6, [sp, #32]
 80063e0:	9d05      	ldr	r5, [sp, #20]
 80063e2:	9a05      	ldr	r2, [sp, #20]
 80063e4:	441a      	add	r2, r3
 80063e6:	9205      	str	r2, [sp, #20]
 80063e8:	9a06      	ldr	r2, [sp, #24]
 80063ea:	2101      	movs	r1, #1
 80063ec:	441a      	add	r2, r3
 80063ee:	4620      	mov	r0, r4
 80063f0:	9206      	str	r2, [sp, #24]
 80063f2:	f000 fc87 	bl	8006d04 <__i2b>
 80063f6:	4607      	mov	r7, r0
 80063f8:	b165      	cbz	r5, 8006414 <_dtoa_r+0x774>
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	dd09      	ble.n	8006414 <_dtoa_r+0x774>
 8006400:	42ab      	cmp	r3, r5
 8006402:	9a05      	ldr	r2, [sp, #20]
 8006404:	bfa8      	it	ge
 8006406:	462b      	movge	r3, r5
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	9205      	str	r2, [sp, #20]
 800640c:	9a06      	ldr	r2, [sp, #24]
 800640e:	1aed      	subs	r5, r5, r3
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	9306      	str	r3, [sp, #24]
 8006414:	9b08      	ldr	r3, [sp, #32]
 8006416:	b1f3      	cbz	r3, 8006456 <_dtoa_r+0x7b6>
 8006418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 80a3 	beq.w	8006566 <_dtoa_r+0x8c6>
 8006420:	2e00      	cmp	r6, #0
 8006422:	dd10      	ble.n	8006446 <_dtoa_r+0x7a6>
 8006424:	4639      	mov	r1, r7
 8006426:	4632      	mov	r2, r6
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fd2b 	bl	8006e84 <__pow5mult>
 800642e:	4652      	mov	r2, sl
 8006430:	4601      	mov	r1, r0
 8006432:	4607      	mov	r7, r0
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fc7b 	bl	8006d30 <__multiply>
 800643a:	4651      	mov	r1, sl
 800643c:	4680      	mov	r8, r0
 800643e:	4620      	mov	r0, r4
 8006440:	f000 fb60 	bl	8006b04 <_Bfree>
 8006444:	46c2      	mov	sl, r8
 8006446:	9b08      	ldr	r3, [sp, #32]
 8006448:	1b9a      	subs	r2, r3, r6
 800644a:	d004      	beq.n	8006456 <_dtoa_r+0x7b6>
 800644c:	4651      	mov	r1, sl
 800644e:	4620      	mov	r0, r4
 8006450:	f000 fd18 	bl	8006e84 <__pow5mult>
 8006454:	4682      	mov	sl, r0
 8006456:	2101      	movs	r1, #1
 8006458:	4620      	mov	r0, r4
 800645a:	f000 fc53 	bl	8006d04 <__i2b>
 800645e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006460:	2b00      	cmp	r3, #0
 8006462:	4606      	mov	r6, r0
 8006464:	f340 8081 	ble.w	800656a <_dtoa_r+0x8ca>
 8006468:	461a      	mov	r2, r3
 800646a:	4601      	mov	r1, r0
 800646c:	4620      	mov	r0, r4
 800646e:	f000 fd09 	bl	8006e84 <__pow5mult>
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	2b01      	cmp	r3, #1
 8006476:	4606      	mov	r6, r0
 8006478:	dd7a      	ble.n	8006570 <_dtoa_r+0x8d0>
 800647a:	f04f 0800 	mov.w	r8, #0
 800647e:	6933      	ldr	r3, [r6, #16]
 8006480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006484:	6918      	ldr	r0, [r3, #16]
 8006486:	f000 fbef 	bl	8006c68 <__hi0bits>
 800648a:	f1c0 0020 	rsb	r0, r0, #32
 800648e:	9b06      	ldr	r3, [sp, #24]
 8006490:	4418      	add	r0, r3
 8006492:	f010 001f 	ands.w	r0, r0, #31
 8006496:	f000 8094 	beq.w	80065c2 <_dtoa_r+0x922>
 800649a:	f1c0 0320 	rsb	r3, r0, #32
 800649e:	2b04      	cmp	r3, #4
 80064a0:	f340 8085 	ble.w	80065ae <_dtoa_r+0x90e>
 80064a4:	9b05      	ldr	r3, [sp, #20]
 80064a6:	f1c0 001c 	rsb	r0, r0, #28
 80064aa:	4403      	add	r3, r0
 80064ac:	9305      	str	r3, [sp, #20]
 80064ae:	9b06      	ldr	r3, [sp, #24]
 80064b0:	4403      	add	r3, r0
 80064b2:	4405      	add	r5, r0
 80064b4:	9306      	str	r3, [sp, #24]
 80064b6:	9b05      	ldr	r3, [sp, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dd05      	ble.n	80064c8 <_dtoa_r+0x828>
 80064bc:	4651      	mov	r1, sl
 80064be:	461a      	mov	r2, r3
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fd39 	bl	8006f38 <__lshift>
 80064c6:	4682      	mov	sl, r0
 80064c8:	9b06      	ldr	r3, [sp, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dd05      	ble.n	80064da <_dtoa_r+0x83a>
 80064ce:	4631      	mov	r1, r6
 80064d0:	461a      	mov	r2, r3
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fd30 	bl	8006f38 <__lshift>
 80064d8:	4606      	mov	r6, r0
 80064da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d072      	beq.n	80065c6 <_dtoa_r+0x926>
 80064e0:	4631      	mov	r1, r6
 80064e2:	4650      	mov	r0, sl
 80064e4:	f000 fd94 	bl	8007010 <__mcmp>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	da6c      	bge.n	80065c6 <_dtoa_r+0x926>
 80064ec:	2300      	movs	r3, #0
 80064ee:	4651      	mov	r1, sl
 80064f0:	220a      	movs	r2, #10
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fb28 	bl	8006b48 <__multadd>
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064fe:	4682      	mov	sl, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 81b0 	beq.w	8006866 <_dtoa_r+0xbc6>
 8006506:	2300      	movs	r3, #0
 8006508:	4639      	mov	r1, r7
 800650a:	220a      	movs	r2, #10
 800650c:	4620      	mov	r0, r4
 800650e:	f000 fb1b 	bl	8006b48 <__multadd>
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	4607      	mov	r7, r0
 8006518:	f300 8096 	bgt.w	8006648 <_dtoa_r+0x9a8>
 800651c:	9b07      	ldr	r3, [sp, #28]
 800651e:	2b02      	cmp	r3, #2
 8006520:	dc59      	bgt.n	80065d6 <_dtoa_r+0x936>
 8006522:	e091      	b.n	8006648 <_dtoa_r+0x9a8>
 8006524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800652a:	e758      	b.n	80063de <_dtoa_r+0x73e>
 800652c:	9b04      	ldr	r3, [sp, #16]
 800652e:	1e5e      	subs	r6, r3, #1
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	42b3      	cmp	r3, r6
 8006534:	bfbf      	itttt	lt
 8006536:	9b08      	ldrlt	r3, [sp, #32]
 8006538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800653a:	9608      	strlt	r6, [sp, #32]
 800653c:	1af3      	sublt	r3, r6, r3
 800653e:	bfb4      	ite	lt
 8006540:	18d2      	addlt	r2, r2, r3
 8006542:	1b9e      	subge	r6, r3, r6
 8006544:	9b04      	ldr	r3, [sp, #16]
 8006546:	bfbc      	itt	lt
 8006548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800654a:	2600      	movlt	r6, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfb7      	itett	lt
 8006550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006558:	1a9d      	sublt	r5, r3, r2
 800655a:	2300      	movlt	r3, #0
 800655c:	e741      	b.n	80063e2 <_dtoa_r+0x742>
 800655e:	9e08      	ldr	r6, [sp, #32]
 8006560:	9d05      	ldr	r5, [sp, #20]
 8006562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006564:	e748      	b.n	80063f8 <_dtoa_r+0x758>
 8006566:	9a08      	ldr	r2, [sp, #32]
 8006568:	e770      	b.n	800644c <_dtoa_r+0x7ac>
 800656a:	9b07      	ldr	r3, [sp, #28]
 800656c:	2b01      	cmp	r3, #1
 800656e:	dc19      	bgt.n	80065a4 <_dtoa_r+0x904>
 8006570:	9b02      	ldr	r3, [sp, #8]
 8006572:	b9bb      	cbnz	r3, 80065a4 <_dtoa_r+0x904>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800657a:	b99b      	cbnz	r3, 80065a4 <_dtoa_r+0x904>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006582:	0d1b      	lsrs	r3, r3, #20
 8006584:	051b      	lsls	r3, r3, #20
 8006586:	b183      	cbz	r3, 80065aa <_dtoa_r+0x90a>
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	3301      	adds	r3, #1
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	9b06      	ldr	r3, [sp, #24]
 8006590:	3301      	adds	r3, #1
 8006592:	9306      	str	r3, [sp, #24]
 8006594:	f04f 0801 	mov.w	r8, #1
 8006598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f af6f 	bne.w	800647e <_dtoa_r+0x7de>
 80065a0:	2001      	movs	r0, #1
 80065a2:	e774      	b.n	800648e <_dtoa_r+0x7ee>
 80065a4:	f04f 0800 	mov.w	r8, #0
 80065a8:	e7f6      	b.n	8006598 <_dtoa_r+0x8f8>
 80065aa:	4698      	mov	r8, r3
 80065ac:	e7f4      	b.n	8006598 <_dtoa_r+0x8f8>
 80065ae:	d082      	beq.n	80064b6 <_dtoa_r+0x816>
 80065b0:	9a05      	ldr	r2, [sp, #20]
 80065b2:	331c      	adds	r3, #28
 80065b4:	441a      	add	r2, r3
 80065b6:	9205      	str	r2, [sp, #20]
 80065b8:	9a06      	ldr	r2, [sp, #24]
 80065ba:	441a      	add	r2, r3
 80065bc:	441d      	add	r5, r3
 80065be:	9206      	str	r2, [sp, #24]
 80065c0:	e779      	b.n	80064b6 <_dtoa_r+0x816>
 80065c2:	4603      	mov	r3, r0
 80065c4:	e7f4      	b.n	80065b0 <_dtoa_r+0x910>
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	dc37      	bgt.n	800663c <_dtoa_r+0x99c>
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	dd34      	ble.n	800663c <_dtoa_r+0x99c>
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	b963      	cbnz	r3, 80065f4 <_dtoa_r+0x954>
 80065da:	4631      	mov	r1, r6
 80065dc:	2205      	movs	r2, #5
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fab2 	bl	8006b48 <__multadd>
 80065e4:	4601      	mov	r1, r0
 80065e6:	4606      	mov	r6, r0
 80065e8:	4650      	mov	r0, sl
 80065ea:	f000 fd11 	bl	8007010 <__mcmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f73f adbb 	bgt.w	800616a <_dtoa_r+0x4ca>
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	9d00      	ldr	r5, [sp, #0]
 80065f8:	ea6f 0b03 	mvn.w	fp, r3
 80065fc:	f04f 0800 	mov.w	r8, #0
 8006600:	4631      	mov	r1, r6
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fa7e 	bl	8006b04 <_Bfree>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f43f aeab 	beq.w	8006364 <_dtoa_r+0x6c4>
 800660e:	f1b8 0f00 	cmp.w	r8, #0
 8006612:	d005      	beq.n	8006620 <_dtoa_r+0x980>
 8006614:	45b8      	cmp	r8, r7
 8006616:	d003      	beq.n	8006620 <_dtoa_r+0x980>
 8006618:	4641      	mov	r1, r8
 800661a:	4620      	mov	r0, r4
 800661c:	f000 fa72 	bl	8006b04 <_Bfree>
 8006620:	4639      	mov	r1, r7
 8006622:	4620      	mov	r0, r4
 8006624:	f000 fa6e 	bl	8006b04 <_Bfree>
 8006628:	e69c      	b.n	8006364 <_dtoa_r+0x6c4>
 800662a:	2600      	movs	r6, #0
 800662c:	4637      	mov	r7, r6
 800662e:	e7e1      	b.n	80065f4 <_dtoa_r+0x954>
 8006630:	46bb      	mov	fp, r7
 8006632:	4637      	mov	r7, r6
 8006634:	e599      	b.n	800616a <_dtoa_r+0x4ca>
 8006636:	bf00      	nop
 8006638:	40240000 	.word	0x40240000
 800663c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80c8 	beq.w	80067d4 <_dtoa_r+0xb34>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	2d00      	cmp	r5, #0
 800664a:	dd05      	ble.n	8006658 <_dtoa_r+0x9b8>
 800664c:	4639      	mov	r1, r7
 800664e:	462a      	mov	r2, r5
 8006650:	4620      	mov	r0, r4
 8006652:	f000 fc71 	bl	8006f38 <__lshift>
 8006656:	4607      	mov	r7, r0
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	d05b      	beq.n	8006716 <_dtoa_r+0xa76>
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fa0f 	bl	8006a84 <_Balloc>
 8006666:	4605      	mov	r5, r0
 8006668:	b928      	cbnz	r0, 8006676 <_dtoa_r+0x9d6>
 800666a:	4b83      	ldr	r3, [pc, #524]	; (8006878 <_dtoa_r+0xbd8>)
 800666c:	4602      	mov	r2, r0
 800666e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006672:	f7ff bb2e 	b.w	8005cd2 <_dtoa_r+0x32>
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	3202      	adds	r2, #2
 800667a:	0092      	lsls	r2, r2, #2
 800667c:	f107 010c 	add.w	r1, r7, #12
 8006680:	300c      	adds	r0, #12
 8006682:	f001 ff85 	bl	8008590 <memcpy>
 8006686:	2201      	movs	r2, #1
 8006688:	4629      	mov	r1, r5
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fc54 	bl	8006f38 <__lshift>
 8006690:	9b00      	ldr	r3, [sp, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800669a:	4413      	add	r3, r2
 800669c:	9308      	str	r3, [sp, #32]
 800669e:	9b02      	ldr	r3, [sp, #8]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	46b8      	mov	r8, r7
 80066a6:	9306      	str	r3, [sp, #24]
 80066a8:	4607      	mov	r7, r0
 80066aa:	9b04      	ldr	r3, [sp, #16]
 80066ac:	4631      	mov	r1, r6
 80066ae:	3b01      	subs	r3, #1
 80066b0:	4650      	mov	r0, sl
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	f7ff fa6a 	bl	8005b8c <quorem>
 80066b8:	4641      	mov	r1, r8
 80066ba:	9002      	str	r0, [sp, #8]
 80066bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066c0:	4650      	mov	r0, sl
 80066c2:	f000 fca5 	bl	8007010 <__mcmp>
 80066c6:	463a      	mov	r2, r7
 80066c8:	9005      	str	r0, [sp, #20]
 80066ca:	4631      	mov	r1, r6
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fcbb 	bl	8007048 <__mdiff>
 80066d2:	68c2      	ldr	r2, [r0, #12]
 80066d4:	4605      	mov	r5, r0
 80066d6:	bb02      	cbnz	r2, 800671a <_dtoa_r+0xa7a>
 80066d8:	4601      	mov	r1, r0
 80066da:	4650      	mov	r0, sl
 80066dc:	f000 fc98 	bl	8007010 <__mcmp>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4629      	mov	r1, r5
 80066e4:	4620      	mov	r0, r4
 80066e6:	9209      	str	r2, [sp, #36]	; 0x24
 80066e8:	f000 fa0c 	bl	8006b04 <_Bfree>
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f0:	9d04      	ldr	r5, [sp, #16]
 80066f2:	ea43 0102 	orr.w	r1, r3, r2
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	4319      	orrs	r1, r3
 80066fa:	d110      	bne.n	800671e <_dtoa_r+0xa7e>
 80066fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006700:	d029      	beq.n	8006756 <_dtoa_r+0xab6>
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dd02      	ble.n	800670e <_dtoa_r+0xa6e>
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	f883 9000 	strb.w	r9, [r3]
 8006714:	e774      	b.n	8006600 <_dtoa_r+0x960>
 8006716:	4638      	mov	r0, r7
 8006718:	e7ba      	b.n	8006690 <_dtoa_r+0x9f0>
 800671a:	2201      	movs	r2, #1
 800671c:	e7e1      	b.n	80066e2 <_dtoa_r+0xa42>
 800671e:	9b05      	ldr	r3, [sp, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	db04      	blt.n	800672e <_dtoa_r+0xa8e>
 8006724:	9907      	ldr	r1, [sp, #28]
 8006726:	430b      	orrs	r3, r1
 8006728:	9906      	ldr	r1, [sp, #24]
 800672a:	430b      	orrs	r3, r1
 800672c:	d120      	bne.n	8006770 <_dtoa_r+0xad0>
 800672e:	2a00      	cmp	r2, #0
 8006730:	dded      	ble.n	800670e <_dtoa_r+0xa6e>
 8006732:	4651      	mov	r1, sl
 8006734:	2201      	movs	r2, #1
 8006736:	4620      	mov	r0, r4
 8006738:	f000 fbfe 	bl	8006f38 <__lshift>
 800673c:	4631      	mov	r1, r6
 800673e:	4682      	mov	sl, r0
 8006740:	f000 fc66 	bl	8007010 <__mcmp>
 8006744:	2800      	cmp	r0, #0
 8006746:	dc03      	bgt.n	8006750 <_dtoa_r+0xab0>
 8006748:	d1e1      	bne.n	800670e <_dtoa_r+0xa6e>
 800674a:	f019 0f01 	tst.w	r9, #1
 800674e:	d0de      	beq.n	800670e <_dtoa_r+0xa6e>
 8006750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006754:	d1d8      	bne.n	8006708 <_dtoa_r+0xa68>
 8006756:	9a01      	ldr	r2, [sp, #4]
 8006758:	2339      	movs	r3, #57	; 0x39
 800675a:	7013      	strb	r3, [r2, #0]
 800675c:	462b      	mov	r3, r5
 800675e:	461d      	mov	r5, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006766:	2a39      	cmp	r2, #57	; 0x39
 8006768:	d06c      	beq.n	8006844 <_dtoa_r+0xba4>
 800676a:	3201      	adds	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e747      	b.n	8006600 <_dtoa_r+0x960>
 8006770:	2a00      	cmp	r2, #0
 8006772:	dd07      	ble.n	8006784 <_dtoa_r+0xae4>
 8006774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006778:	d0ed      	beq.n	8006756 <_dtoa_r+0xab6>
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	f109 0301 	add.w	r3, r9, #1
 8006780:	7013      	strb	r3, [r2, #0]
 8006782:	e73d      	b.n	8006600 <_dtoa_r+0x960>
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	9a08      	ldr	r2, [sp, #32]
 8006788:	f803 9c01 	strb.w	r9, [r3, #-1]
 800678c:	4293      	cmp	r3, r2
 800678e:	d043      	beq.n	8006818 <_dtoa_r+0xb78>
 8006790:	4651      	mov	r1, sl
 8006792:	2300      	movs	r3, #0
 8006794:	220a      	movs	r2, #10
 8006796:	4620      	mov	r0, r4
 8006798:	f000 f9d6 	bl	8006b48 <__multadd>
 800679c:	45b8      	cmp	r8, r7
 800679e:	4682      	mov	sl, r0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	f04f 020a 	mov.w	r2, #10
 80067a8:	4641      	mov	r1, r8
 80067aa:	4620      	mov	r0, r4
 80067ac:	d107      	bne.n	80067be <_dtoa_r+0xb1e>
 80067ae:	f000 f9cb 	bl	8006b48 <__multadd>
 80067b2:	4680      	mov	r8, r0
 80067b4:	4607      	mov	r7, r0
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	e775      	b.n	80066aa <_dtoa_r+0xa0a>
 80067be:	f000 f9c3 	bl	8006b48 <__multadd>
 80067c2:	4639      	mov	r1, r7
 80067c4:	4680      	mov	r8, r0
 80067c6:	2300      	movs	r3, #0
 80067c8:	220a      	movs	r2, #10
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 f9bc 	bl	8006b48 <__multadd>
 80067d0:	4607      	mov	r7, r0
 80067d2:	e7f0      	b.n	80067b6 <_dtoa_r+0xb16>
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	9d00      	ldr	r5, [sp, #0]
 80067da:	4631      	mov	r1, r6
 80067dc:	4650      	mov	r0, sl
 80067de:	f7ff f9d5 	bl	8005b8c <quorem>
 80067e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	f805 9b01 	strb.w	r9, [r5], #1
 80067ec:	1aea      	subs	r2, r5, r3
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	dd07      	ble.n	8006804 <_dtoa_r+0xb64>
 80067f4:	4651      	mov	r1, sl
 80067f6:	2300      	movs	r3, #0
 80067f8:	220a      	movs	r2, #10
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 f9a4 	bl	8006b48 <__multadd>
 8006800:	4682      	mov	sl, r0
 8006802:	e7ea      	b.n	80067da <_dtoa_r+0xb3a>
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	bfc8      	it	gt
 800680a:	461d      	movgt	r5, r3
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	bfd8      	it	le
 8006810:	2501      	movle	r5, #1
 8006812:	441d      	add	r5, r3
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	4651      	mov	r1, sl
 800681a:	2201      	movs	r2, #1
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fb8b 	bl	8006f38 <__lshift>
 8006822:	4631      	mov	r1, r6
 8006824:	4682      	mov	sl, r0
 8006826:	f000 fbf3 	bl	8007010 <__mcmp>
 800682a:	2800      	cmp	r0, #0
 800682c:	dc96      	bgt.n	800675c <_dtoa_r+0xabc>
 800682e:	d102      	bne.n	8006836 <_dtoa_r+0xb96>
 8006830:	f019 0f01 	tst.w	r9, #1
 8006834:	d192      	bne.n	800675c <_dtoa_r+0xabc>
 8006836:	462b      	mov	r3, r5
 8006838:	461d      	mov	r5, r3
 800683a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800683e:	2a30      	cmp	r2, #48	; 0x30
 8006840:	d0fa      	beq.n	8006838 <_dtoa_r+0xb98>
 8006842:	e6dd      	b.n	8006600 <_dtoa_r+0x960>
 8006844:	9a00      	ldr	r2, [sp, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d189      	bne.n	800675e <_dtoa_r+0xabe>
 800684a:	f10b 0b01 	add.w	fp, fp, #1
 800684e:	2331      	movs	r3, #49	; 0x31
 8006850:	e796      	b.n	8006780 <_dtoa_r+0xae0>
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <_dtoa_r+0xbdc>)
 8006854:	f7ff ba99 	b.w	8005d8a <_dtoa_r+0xea>
 8006858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800685a:	2b00      	cmp	r3, #0
 800685c:	f47f aa6d 	bne.w	8005d3a <_dtoa_r+0x9a>
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <_dtoa_r+0xbe0>)
 8006862:	f7ff ba92 	b.w	8005d8a <_dtoa_r+0xea>
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	dcb5      	bgt.n	80067d8 <_dtoa_r+0xb38>
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	2b02      	cmp	r3, #2
 8006870:	f73f aeb1 	bgt.w	80065d6 <_dtoa_r+0x936>
 8006874:	e7b0      	b.n	80067d8 <_dtoa_r+0xb38>
 8006876:	bf00      	nop
 8006878:	08009425 	.word	0x08009425
 800687c:	08009380 	.word	0x08009380
 8006880:	080093a9 	.word	0x080093a9

08006884 <_free_r>:
 8006884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006886:	2900      	cmp	r1, #0
 8006888:	d044      	beq.n	8006914 <_free_r+0x90>
 800688a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800688e:	9001      	str	r0, [sp, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f1a1 0404 	sub.w	r4, r1, #4
 8006896:	bfb8      	it	lt
 8006898:	18e4      	addlt	r4, r4, r3
 800689a:	f000 f8e7 	bl	8006a6c <__malloc_lock>
 800689e:	4a1e      	ldr	r2, [pc, #120]	; (8006918 <_free_r+0x94>)
 80068a0:	9801      	ldr	r0, [sp, #4]
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	b933      	cbnz	r3, 80068b4 <_free_r+0x30>
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	6014      	str	r4, [r2, #0]
 80068aa:	b003      	add	sp, #12
 80068ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b0:	f000 b8e2 	b.w	8006a78 <__malloc_unlock>
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	d908      	bls.n	80068ca <_free_r+0x46>
 80068b8:	6825      	ldr	r5, [r4, #0]
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	428b      	cmp	r3, r1
 80068be:	bf01      	itttt	eq
 80068c0:	6819      	ldreq	r1, [r3, #0]
 80068c2:	685b      	ldreq	r3, [r3, #4]
 80068c4:	1949      	addeq	r1, r1, r5
 80068c6:	6021      	streq	r1, [r4, #0]
 80068c8:	e7ed      	b.n	80068a6 <_free_r+0x22>
 80068ca:	461a      	mov	r2, r3
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b10b      	cbz	r3, 80068d4 <_free_r+0x50>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d9fa      	bls.n	80068ca <_free_r+0x46>
 80068d4:	6811      	ldr	r1, [r2, #0]
 80068d6:	1855      	adds	r5, r2, r1
 80068d8:	42a5      	cmp	r5, r4
 80068da:	d10b      	bne.n	80068f4 <_free_r+0x70>
 80068dc:	6824      	ldr	r4, [r4, #0]
 80068de:	4421      	add	r1, r4
 80068e0:	1854      	adds	r4, r2, r1
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	d1e0      	bne.n	80068aa <_free_r+0x26>
 80068e8:	681c      	ldr	r4, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	6053      	str	r3, [r2, #4]
 80068ee:	440c      	add	r4, r1
 80068f0:	6014      	str	r4, [r2, #0]
 80068f2:	e7da      	b.n	80068aa <_free_r+0x26>
 80068f4:	d902      	bls.n	80068fc <_free_r+0x78>
 80068f6:	230c      	movs	r3, #12
 80068f8:	6003      	str	r3, [r0, #0]
 80068fa:	e7d6      	b.n	80068aa <_free_r+0x26>
 80068fc:	6825      	ldr	r5, [r4, #0]
 80068fe:	1961      	adds	r1, r4, r5
 8006900:	428b      	cmp	r3, r1
 8006902:	bf04      	itt	eq
 8006904:	6819      	ldreq	r1, [r3, #0]
 8006906:	685b      	ldreq	r3, [r3, #4]
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	bf04      	itt	eq
 800690c:	1949      	addeq	r1, r1, r5
 800690e:	6021      	streq	r1, [r4, #0]
 8006910:	6054      	str	r4, [r2, #4]
 8006912:	e7ca      	b.n	80068aa <_free_r+0x26>
 8006914:	b003      	add	sp, #12
 8006916:	bd30      	pop	{r4, r5, pc}
 8006918:	20000814 	.word	0x20000814

0800691c <malloc>:
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <malloc+0xc>)
 800691e:	4601      	mov	r1, r0
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f000 b823 	b.w	800696c <_malloc_r>
 8006926:	bf00      	nop
 8006928:	20000064 	.word	0x20000064

0800692c <sbrk_aligned>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4e0e      	ldr	r6, [pc, #56]	; (8006968 <sbrk_aligned+0x3c>)
 8006930:	460c      	mov	r4, r1
 8006932:	6831      	ldr	r1, [r6, #0]
 8006934:	4605      	mov	r5, r0
 8006936:	b911      	cbnz	r1, 800693e <sbrk_aligned+0x12>
 8006938:	f001 fe1a 	bl	8008570 <_sbrk_r>
 800693c:	6030      	str	r0, [r6, #0]
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f001 fe15 	bl	8008570 <_sbrk_r>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d00a      	beq.n	8006960 <sbrk_aligned+0x34>
 800694a:	1cc4      	adds	r4, r0, #3
 800694c:	f024 0403 	bic.w	r4, r4, #3
 8006950:	42a0      	cmp	r0, r4
 8006952:	d007      	beq.n	8006964 <sbrk_aligned+0x38>
 8006954:	1a21      	subs	r1, r4, r0
 8006956:	4628      	mov	r0, r5
 8006958:	f001 fe0a 	bl	8008570 <_sbrk_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d101      	bne.n	8006964 <sbrk_aligned+0x38>
 8006960:	f04f 34ff 	mov.w	r4, #4294967295
 8006964:	4620      	mov	r0, r4
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	20000818 	.word	0x20000818

0800696c <_malloc_r>:
 800696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006970:	1ccd      	adds	r5, r1, #3
 8006972:	f025 0503 	bic.w	r5, r5, #3
 8006976:	3508      	adds	r5, #8
 8006978:	2d0c      	cmp	r5, #12
 800697a:	bf38      	it	cc
 800697c:	250c      	movcc	r5, #12
 800697e:	2d00      	cmp	r5, #0
 8006980:	4607      	mov	r7, r0
 8006982:	db01      	blt.n	8006988 <_malloc_r+0x1c>
 8006984:	42a9      	cmp	r1, r5
 8006986:	d905      	bls.n	8006994 <_malloc_r+0x28>
 8006988:	230c      	movs	r3, #12
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	2600      	movs	r6, #0
 800698e:	4630      	mov	r0, r6
 8006990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a68 <_malloc_r+0xfc>
 8006998:	f000 f868 	bl	8006a6c <__malloc_lock>
 800699c:	f8d8 3000 	ldr.w	r3, [r8]
 80069a0:	461c      	mov	r4, r3
 80069a2:	bb5c      	cbnz	r4, 80069fc <_malloc_r+0x90>
 80069a4:	4629      	mov	r1, r5
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7ff ffc0 	bl	800692c <sbrk_aligned>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	4604      	mov	r4, r0
 80069b0:	d155      	bne.n	8006a5e <_malloc_r+0xf2>
 80069b2:	f8d8 4000 	ldr.w	r4, [r8]
 80069b6:	4626      	mov	r6, r4
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d145      	bne.n	8006a48 <_malloc_r+0xdc>
 80069bc:	2c00      	cmp	r4, #0
 80069be:	d048      	beq.n	8006a52 <_malloc_r+0xe6>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	4631      	mov	r1, r6
 80069c4:	4638      	mov	r0, r7
 80069c6:	eb04 0903 	add.w	r9, r4, r3
 80069ca:	f001 fdd1 	bl	8008570 <_sbrk_r>
 80069ce:	4581      	cmp	r9, r0
 80069d0:	d13f      	bne.n	8006a52 <_malloc_r+0xe6>
 80069d2:	6821      	ldr	r1, [r4, #0]
 80069d4:	1a6d      	subs	r5, r5, r1
 80069d6:	4629      	mov	r1, r5
 80069d8:	4638      	mov	r0, r7
 80069da:	f7ff ffa7 	bl	800692c <sbrk_aligned>
 80069de:	3001      	adds	r0, #1
 80069e0:	d037      	beq.n	8006a52 <_malloc_r+0xe6>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	442b      	add	r3, r5
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	f8d8 3000 	ldr.w	r3, [r8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d038      	beq.n	8006a62 <_malloc_r+0xf6>
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	42a2      	cmp	r2, r4
 80069f4:	d12b      	bne.n	8006a4e <_malloc_r+0xe2>
 80069f6:	2200      	movs	r2, #0
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	e00f      	b.n	8006a1c <_malloc_r+0xb0>
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	1b52      	subs	r2, r2, r5
 8006a00:	d41f      	bmi.n	8006a42 <_malloc_r+0xd6>
 8006a02:	2a0b      	cmp	r2, #11
 8006a04:	d917      	bls.n	8006a36 <_malloc_r+0xca>
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	6025      	str	r5, [r4, #0]
 8006a0c:	bf18      	it	ne
 8006a0e:	6059      	strne	r1, [r3, #4]
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	bf08      	it	eq
 8006a14:	f8c8 1000 	streq.w	r1, [r8]
 8006a18:	5162      	str	r2, [r4, r5]
 8006a1a:	604b      	str	r3, [r1, #4]
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f104 060b 	add.w	r6, r4, #11
 8006a22:	f000 f829 	bl	8006a78 <__malloc_unlock>
 8006a26:	f026 0607 	bic.w	r6, r6, #7
 8006a2a:	1d23      	adds	r3, r4, #4
 8006a2c:	1af2      	subs	r2, r6, r3
 8006a2e:	d0ae      	beq.n	800698e <_malloc_r+0x22>
 8006a30:	1b9b      	subs	r3, r3, r6
 8006a32:	50a3      	str	r3, [r4, r2]
 8006a34:	e7ab      	b.n	800698e <_malloc_r+0x22>
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	6862      	ldr	r2, [r4, #4]
 8006a3a:	d1dd      	bne.n	80069f8 <_malloc_r+0x8c>
 8006a3c:	f8c8 2000 	str.w	r2, [r8]
 8006a40:	e7ec      	b.n	8006a1c <_malloc_r+0xb0>
 8006a42:	4623      	mov	r3, r4
 8006a44:	6864      	ldr	r4, [r4, #4]
 8006a46:	e7ac      	b.n	80069a2 <_malloc_r+0x36>
 8006a48:	4634      	mov	r4, r6
 8006a4a:	6876      	ldr	r6, [r6, #4]
 8006a4c:	e7b4      	b.n	80069b8 <_malloc_r+0x4c>
 8006a4e:	4613      	mov	r3, r2
 8006a50:	e7cc      	b.n	80069ec <_malloc_r+0x80>
 8006a52:	230c      	movs	r3, #12
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	4638      	mov	r0, r7
 8006a58:	f000 f80e 	bl	8006a78 <__malloc_unlock>
 8006a5c:	e797      	b.n	800698e <_malloc_r+0x22>
 8006a5e:	6025      	str	r5, [r4, #0]
 8006a60:	e7dc      	b.n	8006a1c <_malloc_r+0xb0>
 8006a62:	605b      	str	r3, [r3, #4]
 8006a64:	deff      	udf	#255	; 0xff
 8006a66:	bf00      	nop
 8006a68:	20000814 	.word	0x20000814

08006a6c <__malloc_lock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__malloc_lock+0x8>)
 8006a6e:	f7ff b884 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	20000810 	.word	0x20000810

08006a78 <__malloc_unlock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_unlock+0x8>)
 8006a7a:	f7ff b87f 	b.w	8005b7c <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20000810 	.word	0x20000810

08006a84 <_Balloc>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	69c6      	ldr	r6, [r0, #28]
 8006a88:	4604      	mov	r4, r0
 8006a8a:	460d      	mov	r5, r1
 8006a8c:	b976      	cbnz	r6, 8006aac <_Balloc+0x28>
 8006a8e:	2010      	movs	r0, #16
 8006a90:	f7ff ff44 	bl	800691c <malloc>
 8006a94:	4602      	mov	r2, r0
 8006a96:	61e0      	str	r0, [r4, #28]
 8006a98:	b920      	cbnz	r0, 8006aa4 <_Balloc+0x20>
 8006a9a:	4b18      	ldr	r3, [pc, #96]	; (8006afc <_Balloc+0x78>)
 8006a9c:	4818      	ldr	r0, [pc, #96]	; (8006b00 <_Balloc+0x7c>)
 8006a9e:	216b      	movs	r1, #107	; 0x6b
 8006aa0:	f001 fd8e 	bl	80085c0 <__assert_func>
 8006aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aa8:	6006      	str	r6, [r0, #0]
 8006aaa:	60c6      	str	r6, [r0, #12]
 8006aac:	69e6      	ldr	r6, [r4, #28]
 8006aae:	68f3      	ldr	r3, [r6, #12]
 8006ab0:	b183      	cbz	r3, 8006ad4 <_Balloc+0x50>
 8006ab2:	69e3      	ldr	r3, [r4, #28]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006aba:	b9b8      	cbnz	r0, 8006aec <_Balloc+0x68>
 8006abc:	2101      	movs	r1, #1
 8006abe:	fa01 f605 	lsl.w	r6, r1, r5
 8006ac2:	1d72      	adds	r2, r6, #5
 8006ac4:	0092      	lsls	r2, r2, #2
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f001 fd98 	bl	80085fc <_calloc_r>
 8006acc:	b160      	cbz	r0, 8006ae8 <_Balloc+0x64>
 8006ace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ad2:	e00e      	b.n	8006af2 <_Balloc+0x6e>
 8006ad4:	2221      	movs	r2, #33	; 0x21
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f001 fd8f 	bl	80085fc <_calloc_r>
 8006ade:	69e3      	ldr	r3, [r4, #28]
 8006ae0:	60f0      	str	r0, [r6, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e4      	bne.n	8006ab2 <_Balloc+0x2e>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	6802      	ldr	r2, [r0, #0]
 8006aee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006af2:	2300      	movs	r3, #0
 8006af4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006af8:	e7f7      	b.n	8006aea <_Balloc+0x66>
 8006afa:	bf00      	nop
 8006afc:	080093b6 	.word	0x080093b6
 8006b00:	08009436 	.word	0x08009436

08006b04 <_Bfree>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	69c6      	ldr	r6, [r0, #28]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b976      	cbnz	r6, 8006b2c <_Bfree+0x28>
 8006b0e:	2010      	movs	r0, #16
 8006b10:	f7ff ff04 	bl	800691c <malloc>
 8006b14:	4602      	mov	r2, r0
 8006b16:	61e8      	str	r0, [r5, #28]
 8006b18:	b920      	cbnz	r0, 8006b24 <_Bfree+0x20>
 8006b1a:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <_Bfree+0x3c>)
 8006b1c:	4809      	ldr	r0, [pc, #36]	; (8006b44 <_Bfree+0x40>)
 8006b1e:	218f      	movs	r1, #143	; 0x8f
 8006b20:	f001 fd4e 	bl	80085c0 <__assert_func>
 8006b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b28:	6006      	str	r6, [r0, #0]
 8006b2a:	60c6      	str	r6, [r0, #12]
 8006b2c:	b13c      	cbz	r4, 8006b3e <_Bfree+0x3a>
 8006b2e:	69eb      	ldr	r3, [r5, #28]
 8006b30:	6862      	ldr	r2, [r4, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b38:	6021      	str	r1, [r4, #0]
 8006b3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	080093b6 	.word	0x080093b6
 8006b44:	08009436 	.word	0x08009436

08006b48 <__multadd>:
 8006b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4c:	690d      	ldr	r5, [r1, #16]
 8006b4e:	4607      	mov	r7, r0
 8006b50:	460c      	mov	r4, r1
 8006b52:	461e      	mov	r6, r3
 8006b54:	f101 0c14 	add.w	ip, r1, #20
 8006b58:	2000      	movs	r0, #0
 8006b5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b5e:	b299      	uxth	r1, r3
 8006b60:	fb02 6101 	mla	r1, r2, r1, r6
 8006b64:	0c1e      	lsrs	r6, r3, #16
 8006b66:	0c0b      	lsrs	r3, r1, #16
 8006b68:	fb02 3306 	mla	r3, r2, r6, r3
 8006b6c:	b289      	uxth	r1, r1
 8006b6e:	3001      	adds	r0, #1
 8006b70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b74:	4285      	cmp	r5, r0
 8006b76:	f84c 1b04 	str.w	r1, [ip], #4
 8006b7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b7e:	dcec      	bgt.n	8006b5a <__multadd+0x12>
 8006b80:	b30e      	cbz	r6, 8006bc6 <__multadd+0x7e>
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	42ab      	cmp	r3, r5
 8006b86:	dc19      	bgt.n	8006bbc <__multadd+0x74>
 8006b88:	6861      	ldr	r1, [r4, #4]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	3101      	adds	r1, #1
 8006b8e:	f7ff ff79 	bl	8006a84 <_Balloc>
 8006b92:	4680      	mov	r8, r0
 8006b94:	b928      	cbnz	r0, 8006ba2 <__multadd+0x5a>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <__multadd+0x84>)
 8006b9a:	480d      	ldr	r0, [pc, #52]	; (8006bd0 <__multadd+0x88>)
 8006b9c:	21ba      	movs	r1, #186	; 0xba
 8006b9e:	f001 fd0f 	bl	80085c0 <__assert_func>
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	3202      	adds	r2, #2
 8006ba6:	f104 010c 	add.w	r1, r4, #12
 8006baa:	0092      	lsls	r2, r2, #2
 8006bac:	300c      	adds	r0, #12
 8006bae:	f001 fcef 	bl	8008590 <memcpy>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	f7ff ffa5 	bl	8006b04 <_Bfree>
 8006bba:	4644      	mov	r4, r8
 8006bbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	615e      	str	r6, [r3, #20]
 8006bc4:	6125      	str	r5, [r4, #16]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bcc:	08009425 	.word	0x08009425
 8006bd0:	08009436 	.word	0x08009436

08006bd4 <__s2b>:
 8006bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	4615      	mov	r5, r2
 8006bdc:	461f      	mov	r7, r3
 8006bde:	2209      	movs	r2, #9
 8006be0:	3308      	adds	r3, #8
 8006be2:	4606      	mov	r6, r0
 8006be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006be8:	2100      	movs	r1, #0
 8006bea:	2201      	movs	r2, #1
 8006bec:	429a      	cmp	r2, r3
 8006bee:	db09      	blt.n	8006c04 <__s2b+0x30>
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff ff47 	bl	8006a84 <_Balloc>
 8006bf6:	b940      	cbnz	r0, 8006c0a <__s2b+0x36>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <__s2b+0x8c>)
 8006bfc:	4819      	ldr	r0, [pc, #100]	; (8006c64 <__s2b+0x90>)
 8006bfe:	21d3      	movs	r1, #211	; 0xd3
 8006c00:	f001 fcde 	bl	80085c0 <__assert_func>
 8006c04:	0052      	lsls	r2, r2, #1
 8006c06:	3101      	adds	r1, #1
 8006c08:	e7f0      	b.n	8006bec <__s2b+0x18>
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	6143      	str	r3, [r0, #20]
 8006c0e:	2d09      	cmp	r5, #9
 8006c10:	f04f 0301 	mov.w	r3, #1
 8006c14:	6103      	str	r3, [r0, #16]
 8006c16:	dd16      	ble.n	8006c46 <__s2b+0x72>
 8006c18:	f104 0909 	add.w	r9, r4, #9
 8006c1c:	46c8      	mov	r8, r9
 8006c1e:	442c      	add	r4, r5
 8006c20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c24:	4601      	mov	r1, r0
 8006c26:	3b30      	subs	r3, #48	; 0x30
 8006c28:	220a      	movs	r2, #10
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff ff8c 	bl	8006b48 <__multadd>
 8006c30:	45a0      	cmp	r8, r4
 8006c32:	d1f5      	bne.n	8006c20 <__s2b+0x4c>
 8006c34:	f1a5 0408 	sub.w	r4, r5, #8
 8006c38:	444c      	add	r4, r9
 8006c3a:	1b2d      	subs	r5, r5, r4
 8006c3c:	1963      	adds	r3, r4, r5
 8006c3e:	42bb      	cmp	r3, r7
 8006c40:	db04      	blt.n	8006c4c <__s2b+0x78>
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c46:	340a      	adds	r4, #10
 8006c48:	2509      	movs	r5, #9
 8006c4a:	e7f6      	b.n	8006c3a <__s2b+0x66>
 8006c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c50:	4601      	mov	r1, r0
 8006c52:	3b30      	subs	r3, #48	; 0x30
 8006c54:	220a      	movs	r2, #10
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff ff76 	bl	8006b48 <__multadd>
 8006c5c:	e7ee      	b.n	8006c3c <__s2b+0x68>
 8006c5e:	bf00      	nop
 8006c60:	08009425 	.word	0x08009425
 8006c64:	08009436 	.word	0x08009436

08006c68 <__hi0bits>:
 8006c68:	0c03      	lsrs	r3, r0, #16
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	b9d3      	cbnz	r3, 8006ca4 <__hi0bits+0x3c>
 8006c6e:	0400      	lsls	r0, r0, #16
 8006c70:	2310      	movs	r3, #16
 8006c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c76:	bf04      	itt	eq
 8006c78:	0200      	lsleq	r0, r0, #8
 8006c7a:	3308      	addeq	r3, #8
 8006c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c80:	bf04      	itt	eq
 8006c82:	0100      	lsleq	r0, r0, #4
 8006c84:	3304      	addeq	r3, #4
 8006c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c8a:	bf04      	itt	eq
 8006c8c:	0080      	lsleq	r0, r0, #2
 8006c8e:	3302      	addeq	r3, #2
 8006c90:	2800      	cmp	r0, #0
 8006c92:	db05      	blt.n	8006ca0 <__hi0bits+0x38>
 8006c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c98:	f103 0301 	add.w	r3, r3, #1
 8006c9c:	bf08      	it	eq
 8006c9e:	2320      	moveq	r3, #32
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	4770      	bx	lr
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e7e4      	b.n	8006c72 <__hi0bits+0xa>

08006ca8 <__lo0bits>:
 8006ca8:	6803      	ldr	r3, [r0, #0]
 8006caa:	f013 0207 	ands.w	r2, r3, #7
 8006cae:	d00c      	beq.n	8006cca <__lo0bits+0x22>
 8006cb0:	07d9      	lsls	r1, r3, #31
 8006cb2:	d422      	bmi.n	8006cfa <__lo0bits+0x52>
 8006cb4:	079a      	lsls	r2, r3, #30
 8006cb6:	bf49      	itett	mi
 8006cb8:	085b      	lsrmi	r3, r3, #1
 8006cba:	089b      	lsrpl	r3, r3, #2
 8006cbc:	6003      	strmi	r3, [r0, #0]
 8006cbe:	2201      	movmi	r2, #1
 8006cc0:	bf5c      	itt	pl
 8006cc2:	6003      	strpl	r3, [r0, #0]
 8006cc4:	2202      	movpl	r2, #2
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4770      	bx	lr
 8006cca:	b299      	uxth	r1, r3
 8006ccc:	b909      	cbnz	r1, 8006cd2 <__lo0bits+0x2a>
 8006cce:	0c1b      	lsrs	r3, r3, #16
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	b2d9      	uxtb	r1, r3
 8006cd4:	b909      	cbnz	r1, 8006cda <__lo0bits+0x32>
 8006cd6:	3208      	adds	r2, #8
 8006cd8:	0a1b      	lsrs	r3, r3, #8
 8006cda:	0719      	lsls	r1, r3, #28
 8006cdc:	bf04      	itt	eq
 8006cde:	091b      	lsreq	r3, r3, #4
 8006ce0:	3204      	addeq	r2, #4
 8006ce2:	0799      	lsls	r1, r3, #30
 8006ce4:	bf04      	itt	eq
 8006ce6:	089b      	lsreq	r3, r3, #2
 8006ce8:	3202      	addeq	r2, #2
 8006cea:	07d9      	lsls	r1, r3, #31
 8006cec:	d403      	bmi.n	8006cf6 <__lo0bits+0x4e>
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	f102 0201 	add.w	r2, r2, #1
 8006cf4:	d003      	beq.n	8006cfe <__lo0bits+0x56>
 8006cf6:	6003      	str	r3, [r0, #0]
 8006cf8:	e7e5      	b.n	8006cc6 <__lo0bits+0x1e>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	e7e3      	b.n	8006cc6 <__lo0bits+0x1e>
 8006cfe:	2220      	movs	r2, #32
 8006d00:	e7e1      	b.n	8006cc6 <__lo0bits+0x1e>
	...

08006d04 <__i2b>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	460c      	mov	r4, r1
 8006d08:	2101      	movs	r1, #1
 8006d0a:	f7ff febb 	bl	8006a84 <_Balloc>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	b928      	cbnz	r0, 8006d1e <__i2b+0x1a>
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <__i2b+0x24>)
 8006d14:	4805      	ldr	r0, [pc, #20]	; (8006d2c <__i2b+0x28>)
 8006d16:	f240 1145 	movw	r1, #325	; 0x145
 8006d1a:	f001 fc51 	bl	80085c0 <__assert_func>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	6144      	str	r4, [r0, #20]
 8006d22:	6103      	str	r3, [r0, #16]
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	08009425 	.word	0x08009425
 8006d2c:	08009436 	.word	0x08009436

08006d30 <__multiply>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	4691      	mov	r9, r2
 8006d36:	690a      	ldr	r2, [r1, #16]
 8006d38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	bfb8      	it	lt
 8006d40:	460b      	movlt	r3, r1
 8006d42:	460c      	mov	r4, r1
 8006d44:	bfbc      	itt	lt
 8006d46:	464c      	movlt	r4, r9
 8006d48:	4699      	movlt	r9, r3
 8006d4a:	6927      	ldr	r7, [r4, #16]
 8006d4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d50:	68a3      	ldr	r3, [r4, #8]
 8006d52:	6861      	ldr	r1, [r4, #4]
 8006d54:	eb07 060a 	add.w	r6, r7, sl
 8006d58:	42b3      	cmp	r3, r6
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	bfb8      	it	lt
 8006d5e:	3101      	addlt	r1, #1
 8006d60:	f7ff fe90 	bl	8006a84 <_Balloc>
 8006d64:	b930      	cbnz	r0, 8006d74 <__multiply+0x44>
 8006d66:	4602      	mov	r2, r0
 8006d68:	4b44      	ldr	r3, [pc, #272]	; (8006e7c <__multiply+0x14c>)
 8006d6a:	4845      	ldr	r0, [pc, #276]	; (8006e80 <__multiply+0x150>)
 8006d6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006d70:	f001 fc26 	bl	80085c0 <__assert_func>
 8006d74:	f100 0514 	add.w	r5, r0, #20
 8006d78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4543      	cmp	r3, r8
 8006d82:	d321      	bcc.n	8006dc8 <__multiply+0x98>
 8006d84:	f104 0314 	add.w	r3, r4, #20
 8006d88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d8c:	f109 0314 	add.w	r3, r9, #20
 8006d90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d94:	9202      	str	r2, [sp, #8]
 8006d96:	1b3a      	subs	r2, r7, r4
 8006d98:	3a15      	subs	r2, #21
 8006d9a:	f022 0203 	bic.w	r2, r2, #3
 8006d9e:	3204      	adds	r2, #4
 8006da0:	f104 0115 	add.w	r1, r4, #21
 8006da4:	428f      	cmp	r7, r1
 8006da6:	bf38      	it	cc
 8006da8:	2204      	movcc	r2, #4
 8006daa:	9201      	str	r2, [sp, #4]
 8006dac:	9a02      	ldr	r2, [sp, #8]
 8006dae:	9303      	str	r3, [sp, #12]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d80c      	bhi.n	8006dce <__multiply+0x9e>
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	dd03      	ble.n	8006dc0 <__multiply+0x90>
 8006db8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d05b      	beq.n	8006e78 <__multiply+0x148>
 8006dc0:	6106      	str	r6, [r0, #16]
 8006dc2:	b005      	add	sp, #20
 8006dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	f843 2b04 	str.w	r2, [r3], #4
 8006dcc:	e7d8      	b.n	8006d80 <__multiply+0x50>
 8006dce:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dd2:	f1ba 0f00 	cmp.w	sl, #0
 8006dd6:	d024      	beq.n	8006e22 <__multiply+0xf2>
 8006dd8:	f104 0e14 	add.w	lr, r4, #20
 8006ddc:	46a9      	mov	r9, r5
 8006dde:	f04f 0c00 	mov.w	ip, #0
 8006de2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006de6:	f8d9 1000 	ldr.w	r1, [r9]
 8006dea:	fa1f fb82 	uxth.w	fp, r2
 8006dee:	b289      	uxth	r1, r1
 8006df0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006df4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006df8:	f8d9 2000 	ldr.w	r2, [r9]
 8006dfc:	4461      	add	r1, ip
 8006dfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e02:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e0a:	b289      	uxth	r1, r1
 8006e0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e10:	4577      	cmp	r7, lr
 8006e12:	f849 1b04 	str.w	r1, [r9], #4
 8006e16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e1a:	d8e2      	bhi.n	8006de2 <__multiply+0xb2>
 8006e1c:	9a01      	ldr	r2, [sp, #4]
 8006e1e:	f845 c002 	str.w	ip, [r5, r2]
 8006e22:	9a03      	ldr	r2, [sp, #12]
 8006e24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	f1b9 0f00 	cmp.w	r9, #0
 8006e2e:	d021      	beq.n	8006e74 <__multiply+0x144>
 8006e30:	6829      	ldr	r1, [r5, #0]
 8006e32:	f104 0c14 	add.w	ip, r4, #20
 8006e36:	46ae      	mov	lr, r5
 8006e38:	f04f 0a00 	mov.w	sl, #0
 8006e3c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e44:	fb09 220b 	mla	r2, r9, fp, r2
 8006e48:	4452      	add	r2, sl
 8006e4a:	b289      	uxth	r1, r1
 8006e4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e50:	f84e 1b04 	str.w	r1, [lr], #4
 8006e54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e5c:	f8be 1000 	ldrh.w	r1, [lr]
 8006e60:	fb09 110a 	mla	r1, r9, sl, r1
 8006e64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006e68:	4567      	cmp	r7, ip
 8006e6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e6e:	d8e5      	bhi.n	8006e3c <__multiply+0x10c>
 8006e70:	9a01      	ldr	r2, [sp, #4]
 8006e72:	50a9      	str	r1, [r5, r2]
 8006e74:	3504      	adds	r5, #4
 8006e76:	e799      	b.n	8006dac <__multiply+0x7c>
 8006e78:	3e01      	subs	r6, #1
 8006e7a:	e79b      	b.n	8006db4 <__multiply+0x84>
 8006e7c:	08009425 	.word	0x08009425
 8006e80:	08009436 	.word	0x08009436

08006e84 <__pow5mult>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	4615      	mov	r5, r2
 8006e8a:	f012 0203 	ands.w	r2, r2, #3
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	d007      	beq.n	8006ea4 <__pow5mult+0x20>
 8006e94:	4c25      	ldr	r4, [pc, #148]	; (8006f2c <__pow5mult+0xa8>)
 8006e96:	3a01      	subs	r2, #1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e9e:	f7ff fe53 	bl	8006b48 <__multadd>
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	10ad      	asrs	r5, r5, #2
 8006ea6:	d03d      	beq.n	8006f24 <__pow5mult+0xa0>
 8006ea8:	69f4      	ldr	r4, [r6, #28]
 8006eaa:	b97c      	cbnz	r4, 8006ecc <__pow5mult+0x48>
 8006eac:	2010      	movs	r0, #16
 8006eae:	f7ff fd35 	bl	800691c <malloc>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	61f0      	str	r0, [r6, #28]
 8006eb6:	b928      	cbnz	r0, 8006ec4 <__pow5mult+0x40>
 8006eb8:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <__pow5mult+0xac>)
 8006eba:	481e      	ldr	r0, [pc, #120]	; (8006f34 <__pow5mult+0xb0>)
 8006ebc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006ec0:	f001 fb7e 	bl	80085c0 <__assert_func>
 8006ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ec8:	6004      	str	r4, [r0, #0]
 8006eca:	60c4      	str	r4, [r0, #12]
 8006ecc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ed4:	b94c      	cbnz	r4, 8006eea <__pow5mult+0x66>
 8006ed6:	f240 2171 	movw	r1, #625	; 0x271
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff ff12 	bl	8006d04 <__i2b>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	6003      	str	r3, [r0, #0]
 8006eea:	f04f 0900 	mov.w	r9, #0
 8006eee:	07eb      	lsls	r3, r5, #31
 8006ef0:	d50a      	bpl.n	8006f08 <__pow5mult+0x84>
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f7ff ff1a 	bl	8006d30 <__multiply>
 8006efc:	4639      	mov	r1, r7
 8006efe:	4680      	mov	r8, r0
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff fdff 	bl	8006b04 <_Bfree>
 8006f06:	4647      	mov	r7, r8
 8006f08:	106d      	asrs	r5, r5, #1
 8006f0a:	d00b      	beq.n	8006f24 <__pow5mult+0xa0>
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	b938      	cbnz	r0, 8006f20 <__pow5mult+0x9c>
 8006f10:	4622      	mov	r2, r4
 8006f12:	4621      	mov	r1, r4
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff ff0b 	bl	8006d30 <__multiply>
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	f8c0 9000 	str.w	r9, [r0]
 8006f20:	4604      	mov	r4, r0
 8006f22:	e7e4      	b.n	8006eee <__pow5mult+0x6a>
 8006f24:	4638      	mov	r0, r7
 8006f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08009580 	.word	0x08009580
 8006f30:	080093b6 	.word	0x080093b6
 8006f34:	08009436 	.word	0x08009436

08006f38 <__lshift>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	6849      	ldr	r1, [r1, #4]
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f46:	68a3      	ldr	r3, [r4, #8]
 8006f48:	4607      	mov	r7, r0
 8006f4a:	4691      	mov	r9, r2
 8006f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f50:	f108 0601 	add.w	r6, r8, #1
 8006f54:	42b3      	cmp	r3, r6
 8006f56:	db0b      	blt.n	8006f70 <__lshift+0x38>
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f7ff fd93 	bl	8006a84 <_Balloc>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	b948      	cbnz	r0, 8006f76 <__lshift+0x3e>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b28      	ldr	r3, [pc, #160]	; (8007008 <__lshift+0xd0>)
 8006f66:	4829      	ldr	r0, [pc, #164]	; (800700c <__lshift+0xd4>)
 8006f68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006f6c:	f001 fb28 	bl	80085c0 <__assert_func>
 8006f70:	3101      	adds	r1, #1
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	e7ee      	b.n	8006f54 <__lshift+0x1c>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f100 0114 	add.w	r1, r0, #20
 8006f7c:	f100 0210 	add.w	r2, r0, #16
 8006f80:	4618      	mov	r0, r3
 8006f82:	4553      	cmp	r3, sl
 8006f84:	db33      	blt.n	8006fee <__lshift+0xb6>
 8006f86:	6920      	ldr	r0, [r4, #16]
 8006f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f8c:	f104 0314 	add.w	r3, r4, #20
 8006f90:	f019 091f 	ands.w	r9, r9, #31
 8006f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f9c:	d02b      	beq.n	8006ff6 <__lshift+0xbe>
 8006f9e:	f1c9 0e20 	rsb	lr, r9, #32
 8006fa2:	468a      	mov	sl, r1
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	fa00 f009 	lsl.w	r0, r0, r9
 8006fac:	4310      	orrs	r0, r2
 8006fae:	f84a 0b04 	str.w	r0, [sl], #4
 8006fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb6:	459c      	cmp	ip, r3
 8006fb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fbc:	d8f3      	bhi.n	8006fa6 <__lshift+0x6e>
 8006fbe:	ebac 0304 	sub.w	r3, ip, r4
 8006fc2:	3b15      	subs	r3, #21
 8006fc4:	f023 0303 	bic.w	r3, r3, #3
 8006fc8:	3304      	adds	r3, #4
 8006fca:	f104 0015 	add.w	r0, r4, #21
 8006fce:	4584      	cmp	ip, r0
 8006fd0:	bf38      	it	cc
 8006fd2:	2304      	movcc	r3, #4
 8006fd4:	50ca      	str	r2, [r1, r3]
 8006fd6:	b10a      	cbz	r2, 8006fdc <__lshift+0xa4>
 8006fd8:	f108 0602 	add.w	r6, r8, #2
 8006fdc:	3e01      	subs	r6, #1
 8006fde:	4638      	mov	r0, r7
 8006fe0:	612e      	str	r6, [r5, #16]
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	f7ff fd8e 	bl	8006b04 <_Bfree>
 8006fe8:	4628      	mov	r0, r5
 8006fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	e7c5      	b.n	8006f82 <__lshift+0x4a>
 8006ff6:	3904      	subs	r1, #4
 8006ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007000:	459c      	cmp	ip, r3
 8007002:	d8f9      	bhi.n	8006ff8 <__lshift+0xc0>
 8007004:	e7ea      	b.n	8006fdc <__lshift+0xa4>
 8007006:	bf00      	nop
 8007008:	08009425 	.word	0x08009425
 800700c:	08009436 	.word	0x08009436

08007010 <__mcmp>:
 8007010:	b530      	push	{r4, r5, lr}
 8007012:	6902      	ldr	r2, [r0, #16]
 8007014:	690c      	ldr	r4, [r1, #16]
 8007016:	1b12      	subs	r2, r2, r4
 8007018:	d10e      	bne.n	8007038 <__mcmp+0x28>
 800701a:	f100 0314 	add.w	r3, r0, #20
 800701e:	3114      	adds	r1, #20
 8007020:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007024:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007028:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800702c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007030:	42a5      	cmp	r5, r4
 8007032:	d003      	beq.n	800703c <__mcmp+0x2c>
 8007034:	d305      	bcc.n	8007042 <__mcmp+0x32>
 8007036:	2201      	movs	r2, #1
 8007038:	4610      	mov	r0, r2
 800703a:	bd30      	pop	{r4, r5, pc}
 800703c:	4283      	cmp	r3, r0
 800703e:	d3f3      	bcc.n	8007028 <__mcmp+0x18>
 8007040:	e7fa      	b.n	8007038 <__mcmp+0x28>
 8007042:	f04f 32ff 	mov.w	r2, #4294967295
 8007046:	e7f7      	b.n	8007038 <__mcmp+0x28>

08007048 <__mdiff>:
 8007048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	4606      	mov	r6, r0
 8007050:	4611      	mov	r1, r2
 8007052:	4620      	mov	r0, r4
 8007054:	4690      	mov	r8, r2
 8007056:	f7ff ffdb 	bl	8007010 <__mcmp>
 800705a:	1e05      	subs	r5, r0, #0
 800705c:	d110      	bne.n	8007080 <__mdiff+0x38>
 800705e:	4629      	mov	r1, r5
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff fd0f 	bl	8006a84 <_Balloc>
 8007066:	b930      	cbnz	r0, 8007076 <__mdiff+0x2e>
 8007068:	4b3a      	ldr	r3, [pc, #232]	; (8007154 <__mdiff+0x10c>)
 800706a:	4602      	mov	r2, r0
 800706c:	f240 2137 	movw	r1, #567	; 0x237
 8007070:	4839      	ldr	r0, [pc, #228]	; (8007158 <__mdiff+0x110>)
 8007072:	f001 faa5 	bl	80085c0 <__assert_func>
 8007076:	2301      	movs	r3, #1
 8007078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800707c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	bfa4      	itt	ge
 8007082:	4643      	movge	r3, r8
 8007084:	46a0      	movge	r8, r4
 8007086:	4630      	mov	r0, r6
 8007088:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800708c:	bfa6      	itte	ge
 800708e:	461c      	movge	r4, r3
 8007090:	2500      	movge	r5, #0
 8007092:	2501      	movlt	r5, #1
 8007094:	f7ff fcf6 	bl	8006a84 <_Balloc>
 8007098:	b920      	cbnz	r0, 80070a4 <__mdiff+0x5c>
 800709a:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <__mdiff+0x10c>)
 800709c:	4602      	mov	r2, r0
 800709e:	f240 2145 	movw	r1, #581	; 0x245
 80070a2:	e7e5      	b.n	8007070 <__mdiff+0x28>
 80070a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80070a8:	6926      	ldr	r6, [r4, #16]
 80070aa:	60c5      	str	r5, [r0, #12]
 80070ac:	f104 0914 	add.w	r9, r4, #20
 80070b0:	f108 0514 	add.w	r5, r8, #20
 80070b4:	f100 0e14 	add.w	lr, r0, #20
 80070b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80070bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070c0:	f108 0210 	add.w	r2, r8, #16
 80070c4:	46f2      	mov	sl, lr
 80070c6:	2100      	movs	r1, #0
 80070c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80070cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80070d0:	fa11 f88b 	uxtah	r8, r1, fp
 80070d4:	b299      	uxth	r1, r3
 80070d6:	0c1b      	lsrs	r3, r3, #16
 80070d8:	eba8 0801 	sub.w	r8, r8, r1
 80070dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070e4:	fa1f f888 	uxth.w	r8, r8
 80070e8:	1419      	asrs	r1, r3, #16
 80070ea:	454e      	cmp	r6, r9
 80070ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070f0:	f84a 3b04 	str.w	r3, [sl], #4
 80070f4:	d8e8      	bhi.n	80070c8 <__mdiff+0x80>
 80070f6:	1b33      	subs	r3, r6, r4
 80070f8:	3b15      	subs	r3, #21
 80070fa:	f023 0303 	bic.w	r3, r3, #3
 80070fe:	3304      	adds	r3, #4
 8007100:	3415      	adds	r4, #21
 8007102:	42a6      	cmp	r6, r4
 8007104:	bf38      	it	cc
 8007106:	2304      	movcc	r3, #4
 8007108:	441d      	add	r5, r3
 800710a:	4473      	add	r3, lr
 800710c:	469e      	mov	lr, r3
 800710e:	462e      	mov	r6, r5
 8007110:	4566      	cmp	r6, ip
 8007112:	d30e      	bcc.n	8007132 <__mdiff+0xea>
 8007114:	f10c 0203 	add.w	r2, ip, #3
 8007118:	1b52      	subs	r2, r2, r5
 800711a:	f022 0203 	bic.w	r2, r2, #3
 800711e:	3d03      	subs	r5, #3
 8007120:	45ac      	cmp	ip, r5
 8007122:	bf38      	it	cc
 8007124:	2200      	movcc	r2, #0
 8007126:	4413      	add	r3, r2
 8007128:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800712c:	b17a      	cbz	r2, 800714e <__mdiff+0x106>
 800712e:	6107      	str	r7, [r0, #16]
 8007130:	e7a4      	b.n	800707c <__mdiff+0x34>
 8007132:	f856 8b04 	ldr.w	r8, [r6], #4
 8007136:	fa11 f288 	uxtah	r2, r1, r8
 800713a:	1414      	asrs	r4, r2, #16
 800713c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007140:	b292      	uxth	r2, r2
 8007142:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007146:	f84e 2b04 	str.w	r2, [lr], #4
 800714a:	1421      	asrs	r1, r4, #16
 800714c:	e7e0      	b.n	8007110 <__mdiff+0xc8>
 800714e:	3f01      	subs	r7, #1
 8007150:	e7ea      	b.n	8007128 <__mdiff+0xe0>
 8007152:	bf00      	nop
 8007154:	08009425 	.word	0x08009425
 8007158:	08009436 	.word	0x08009436

0800715c <__ulp>:
 800715c:	b082      	sub	sp, #8
 800715e:	ed8d 0b00 	vstr	d0, [sp]
 8007162:	9a01      	ldr	r2, [sp, #4]
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <__ulp+0x48>)
 8007166:	4013      	ands	r3, r2
 8007168:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800716c:	2b00      	cmp	r3, #0
 800716e:	dc08      	bgt.n	8007182 <__ulp+0x26>
 8007170:	425b      	negs	r3, r3
 8007172:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007176:	ea4f 5223 	mov.w	r2, r3, asr #20
 800717a:	da04      	bge.n	8007186 <__ulp+0x2a>
 800717c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007180:	4113      	asrs	r3, r2
 8007182:	2200      	movs	r2, #0
 8007184:	e008      	b.n	8007198 <__ulp+0x3c>
 8007186:	f1a2 0314 	sub.w	r3, r2, #20
 800718a:	2b1e      	cmp	r3, #30
 800718c:	bfda      	itte	le
 800718e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007192:	40da      	lsrle	r2, r3
 8007194:	2201      	movgt	r2, #1
 8007196:	2300      	movs	r3, #0
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	ec41 0b10 	vmov	d0, r0, r1
 80071a0:	b002      	add	sp, #8
 80071a2:	4770      	bx	lr
 80071a4:	7ff00000 	.word	0x7ff00000

080071a8 <__b2d>:
 80071a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ac:	6906      	ldr	r6, [r0, #16]
 80071ae:	f100 0814 	add.w	r8, r0, #20
 80071b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80071b6:	1f37      	subs	r7, r6, #4
 80071b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071bc:	4610      	mov	r0, r2
 80071be:	f7ff fd53 	bl	8006c68 <__hi0bits>
 80071c2:	f1c0 0320 	rsb	r3, r0, #32
 80071c6:	280a      	cmp	r0, #10
 80071c8:	600b      	str	r3, [r1, #0]
 80071ca:	491b      	ldr	r1, [pc, #108]	; (8007238 <__b2d+0x90>)
 80071cc:	dc15      	bgt.n	80071fa <__b2d+0x52>
 80071ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80071d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80071d6:	45b8      	cmp	r8, r7
 80071d8:	ea43 0501 	orr.w	r5, r3, r1
 80071dc:	bf34      	ite	cc
 80071de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80071e2:	2300      	movcs	r3, #0
 80071e4:	3015      	adds	r0, #21
 80071e6:	fa02 f000 	lsl.w	r0, r2, r0
 80071ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80071ee:	4303      	orrs	r3, r0
 80071f0:	461c      	mov	r4, r3
 80071f2:	ec45 4b10 	vmov	d0, r4, r5
 80071f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fa:	45b8      	cmp	r8, r7
 80071fc:	bf3a      	itte	cc
 80071fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007202:	f1a6 0708 	subcc.w	r7, r6, #8
 8007206:	2300      	movcs	r3, #0
 8007208:	380b      	subs	r0, #11
 800720a:	d012      	beq.n	8007232 <__b2d+0x8a>
 800720c:	f1c0 0120 	rsb	r1, r0, #32
 8007210:	fa23 f401 	lsr.w	r4, r3, r1
 8007214:	4082      	lsls	r2, r0
 8007216:	4322      	orrs	r2, r4
 8007218:	4547      	cmp	r7, r8
 800721a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800721e:	bf8c      	ite	hi
 8007220:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007224:	2200      	movls	r2, #0
 8007226:	4083      	lsls	r3, r0
 8007228:	40ca      	lsrs	r2, r1
 800722a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800722e:	4313      	orrs	r3, r2
 8007230:	e7de      	b.n	80071f0 <__b2d+0x48>
 8007232:	ea42 0501 	orr.w	r5, r2, r1
 8007236:	e7db      	b.n	80071f0 <__b2d+0x48>
 8007238:	3ff00000 	.word	0x3ff00000

0800723c <__d2b>:
 800723c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007240:	460f      	mov	r7, r1
 8007242:	2101      	movs	r1, #1
 8007244:	ec59 8b10 	vmov	r8, r9, d0
 8007248:	4616      	mov	r6, r2
 800724a:	f7ff fc1b 	bl	8006a84 <_Balloc>
 800724e:	4604      	mov	r4, r0
 8007250:	b930      	cbnz	r0, 8007260 <__d2b+0x24>
 8007252:	4602      	mov	r2, r0
 8007254:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <__d2b+0xac>)
 8007256:	4825      	ldr	r0, [pc, #148]	; (80072ec <__d2b+0xb0>)
 8007258:	f240 310f 	movw	r1, #783	; 0x30f
 800725c:	f001 f9b0 	bl	80085c0 <__assert_func>
 8007260:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007268:	bb2d      	cbnz	r5, 80072b6 <__d2b+0x7a>
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	f1b8 0300 	subs.w	r3, r8, #0
 8007270:	d026      	beq.n	80072c0 <__d2b+0x84>
 8007272:	4668      	mov	r0, sp
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	f7ff fd17 	bl	8006ca8 <__lo0bits>
 800727a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800727e:	b1e8      	cbz	r0, 80072bc <__d2b+0x80>
 8007280:	f1c0 0320 	rsb	r3, r0, #32
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	430b      	orrs	r3, r1
 800728a:	40c2      	lsrs	r2, r0
 800728c:	6163      	str	r3, [r4, #20]
 800728e:	9201      	str	r2, [sp, #4]
 8007290:	9b01      	ldr	r3, [sp, #4]
 8007292:	61a3      	str	r3, [r4, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	bf14      	ite	ne
 8007298:	2202      	movne	r2, #2
 800729a:	2201      	moveq	r2, #1
 800729c:	6122      	str	r2, [r4, #16]
 800729e:	b1bd      	cbz	r5, 80072d0 <__d2b+0x94>
 80072a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072a4:	4405      	add	r5, r0
 80072a6:	603d      	str	r5, [r7, #0]
 80072a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072ac:	6030      	str	r0, [r6, #0]
 80072ae:	4620      	mov	r0, r4
 80072b0:	b003      	add	sp, #12
 80072b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ba:	e7d6      	b.n	800726a <__d2b+0x2e>
 80072bc:	6161      	str	r1, [r4, #20]
 80072be:	e7e7      	b.n	8007290 <__d2b+0x54>
 80072c0:	a801      	add	r0, sp, #4
 80072c2:	f7ff fcf1 	bl	8006ca8 <__lo0bits>
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	6163      	str	r3, [r4, #20]
 80072ca:	3020      	adds	r0, #32
 80072cc:	2201      	movs	r2, #1
 80072ce:	e7e5      	b.n	800729c <__d2b+0x60>
 80072d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072d8:	6038      	str	r0, [r7, #0]
 80072da:	6918      	ldr	r0, [r3, #16]
 80072dc:	f7ff fcc4 	bl	8006c68 <__hi0bits>
 80072e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072e4:	e7e2      	b.n	80072ac <__d2b+0x70>
 80072e6:	bf00      	nop
 80072e8:	08009425 	.word	0x08009425
 80072ec:	08009436 	.word	0x08009436

080072f0 <__ratio>:
 80072f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	4688      	mov	r8, r1
 80072f6:	4669      	mov	r1, sp
 80072f8:	4681      	mov	r9, r0
 80072fa:	f7ff ff55 	bl	80071a8 <__b2d>
 80072fe:	a901      	add	r1, sp, #4
 8007300:	4640      	mov	r0, r8
 8007302:	ec55 4b10 	vmov	r4, r5, d0
 8007306:	f7ff ff4f 	bl	80071a8 <__b2d>
 800730a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800730e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007312:	eba3 0c02 	sub.w	ip, r3, r2
 8007316:	e9dd 3200 	ldrd	r3, r2, [sp]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007320:	ec51 0b10 	vmov	r0, r1, d0
 8007324:	2b00      	cmp	r3, #0
 8007326:	bfd6      	itet	le
 8007328:	460a      	movle	r2, r1
 800732a:	462a      	movgt	r2, r5
 800732c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007330:	468b      	mov	fp, r1
 8007332:	462f      	mov	r7, r5
 8007334:	bfd4      	ite	le
 8007336:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800733a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800733e:	4620      	mov	r0, r4
 8007340:	ee10 2a10 	vmov	r2, s0
 8007344:	465b      	mov	r3, fp
 8007346:	4639      	mov	r1, r7
 8007348:	f7f9 fa80 	bl	800084c <__aeabi_ddiv>
 800734c:	ec41 0b10 	vmov	d0, r0, r1
 8007350:	b003      	add	sp, #12
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007356 <__copybits>:
 8007356:	3901      	subs	r1, #1
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	1149      	asrs	r1, r1, #5
 800735c:	6914      	ldr	r4, [r2, #16]
 800735e:	3101      	adds	r1, #1
 8007360:	f102 0314 	add.w	r3, r2, #20
 8007364:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007368:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800736c:	1f05      	subs	r5, r0, #4
 800736e:	42a3      	cmp	r3, r4
 8007370:	d30c      	bcc.n	800738c <__copybits+0x36>
 8007372:	1aa3      	subs	r3, r4, r2
 8007374:	3b11      	subs	r3, #17
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	3211      	adds	r2, #17
 800737c:	42a2      	cmp	r2, r4
 800737e:	bf88      	it	hi
 8007380:	2300      	movhi	r3, #0
 8007382:	4418      	add	r0, r3
 8007384:	2300      	movs	r3, #0
 8007386:	4288      	cmp	r0, r1
 8007388:	d305      	bcc.n	8007396 <__copybits+0x40>
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007390:	f845 6f04 	str.w	r6, [r5, #4]!
 8007394:	e7eb      	b.n	800736e <__copybits+0x18>
 8007396:	f840 3b04 	str.w	r3, [r0], #4
 800739a:	e7f4      	b.n	8007386 <__copybits+0x30>

0800739c <__any_on>:
 800739c:	f100 0214 	add.w	r2, r0, #20
 80073a0:	6900      	ldr	r0, [r0, #16]
 80073a2:	114b      	asrs	r3, r1, #5
 80073a4:	4298      	cmp	r0, r3
 80073a6:	b510      	push	{r4, lr}
 80073a8:	db11      	blt.n	80073ce <__any_on+0x32>
 80073aa:	dd0a      	ble.n	80073c2 <__any_on+0x26>
 80073ac:	f011 011f 	ands.w	r1, r1, #31
 80073b0:	d007      	beq.n	80073c2 <__any_on+0x26>
 80073b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073b6:	fa24 f001 	lsr.w	r0, r4, r1
 80073ba:	fa00 f101 	lsl.w	r1, r0, r1
 80073be:	428c      	cmp	r4, r1
 80073c0:	d10b      	bne.n	80073da <__any_on+0x3e>
 80073c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d803      	bhi.n	80073d2 <__any_on+0x36>
 80073ca:	2000      	movs	r0, #0
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	4603      	mov	r3, r0
 80073d0:	e7f7      	b.n	80073c2 <__any_on+0x26>
 80073d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073d6:	2900      	cmp	r1, #0
 80073d8:	d0f5      	beq.n	80073c6 <__any_on+0x2a>
 80073da:	2001      	movs	r0, #1
 80073dc:	e7f6      	b.n	80073cc <__any_on+0x30>

080073de <sulp>:
 80073de:	b570      	push	{r4, r5, r6, lr}
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	ec45 4b10 	vmov	d0, r4, r5
 80073e8:	4616      	mov	r6, r2
 80073ea:	f7ff feb7 	bl	800715c <__ulp>
 80073ee:	ec51 0b10 	vmov	r0, r1, d0
 80073f2:	b17e      	cbz	r6, 8007414 <sulp+0x36>
 80073f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80073f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd09      	ble.n	8007414 <sulp+0x36>
 8007400:	051b      	lsls	r3, r3, #20
 8007402:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007406:	2400      	movs	r4, #0
 8007408:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800740c:	4622      	mov	r2, r4
 800740e:	462b      	mov	r3, r5
 8007410:	f7f9 f8f2 	bl	80005f8 <__aeabi_dmul>
 8007414:	bd70      	pop	{r4, r5, r6, pc}
	...

08007418 <_strtod_l>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	ed2d 8b02 	vpush	{d8}
 8007420:	b09b      	sub	sp, #108	; 0x6c
 8007422:	4604      	mov	r4, r0
 8007424:	9213      	str	r2, [sp, #76]	; 0x4c
 8007426:	2200      	movs	r2, #0
 8007428:	9216      	str	r2, [sp, #88]	; 0x58
 800742a:	460d      	mov	r5, r1
 800742c:	f04f 0800 	mov.w	r8, #0
 8007430:	f04f 0900 	mov.w	r9, #0
 8007434:	460a      	mov	r2, r1
 8007436:	9215      	str	r2, [sp, #84]	; 0x54
 8007438:	7811      	ldrb	r1, [r2, #0]
 800743a:	292b      	cmp	r1, #43	; 0x2b
 800743c:	d04c      	beq.n	80074d8 <_strtod_l+0xc0>
 800743e:	d83a      	bhi.n	80074b6 <_strtod_l+0x9e>
 8007440:	290d      	cmp	r1, #13
 8007442:	d834      	bhi.n	80074ae <_strtod_l+0x96>
 8007444:	2908      	cmp	r1, #8
 8007446:	d834      	bhi.n	80074b2 <_strtod_l+0x9a>
 8007448:	2900      	cmp	r1, #0
 800744a:	d03d      	beq.n	80074c8 <_strtod_l+0xb0>
 800744c:	2200      	movs	r2, #0
 800744e:	920a      	str	r2, [sp, #40]	; 0x28
 8007450:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007452:	7832      	ldrb	r2, [r6, #0]
 8007454:	2a30      	cmp	r2, #48	; 0x30
 8007456:	f040 80b4 	bne.w	80075c2 <_strtod_l+0x1aa>
 800745a:	7872      	ldrb	r2, [r6, #1]
 800745c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007460:	2a58      	cmp	r2, #88	; 0x58
 8007462:	d170      	bne.n	8007546 <_strtod_l+0x12e>
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	ab16      	add	r3, sp, #88	; 0x58
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4a8e      	ldr	r2, [pc, #568]	; (80076a8 <_strtod_l+0x290>)
 8007470:	ab17      	add	r3, sp, #92	; 0x5c
 8007472:	a915      	add	r1, sp, #84	; 0x54
 8007474:	4620      	mov	r0, r4
 8007476:	f001 f93f 	bl	80086f8 <__gethex>
 800747a:	f010 070f 	ands.w	r7, r0, #15
 800747e:	4605      	mov	r5, r0
 8007480:	d005      	beq.n	800748e <_strtod_l+0x76>
 8007482:	2f06      	cmp	r7, #6
 8007484:	d12a      	bne.n	80074dc <_strtod_l+0xc4>
 8007486:	3601      	adds	r6, #1
 8007488:	2300      	movs	r3, #0
 800748a:	9615      	str	r6, [sp, #84]	; 0x54
 800748c:	930a      	str	r3, [sp, #40]	; 0x28
 800748e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007490:	2b00      	cmp	r3, #0
 8007492:	f040 857f 	bne.w	8007f94 <_strtod_l+0xb7c>
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	b1db      	cbz	r3, 80074d2 <_strtod_l+0xba>
 800749a:	4642      	mov	r2, r8
 800749c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074a0:	ec43 2b10 	vmov	d0, r2, r3
 80074a4:	b01b      	add	sp, #108	; 0x6c
 80074a6:	ecbd 8b02 	vpop	{d8}
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	2920      	cmp	r1, #32
 80074b0:	d1cc      	bne.n	800744c <_strtod_l+0x34>
 80074b2:	3201      	adds	r2, #1
 80074b4:	e7bf      	b.n	8007436 <_strtod_l+0x1e>
 80074b6:	292d      	cmp	r1, #45	; 0x2d
 80074b8:	d1c8      	bne.n	800744c <_strtod_l+0x34>
 80074ba:	2101      	movs	r1, #1
 80074bc:	910a      	str	r1, [sp, #40]	; 0x28
 80074be:	1c51      	adds	r1, r2, #1
 80074c0:	9115      	str	r1, [sp, #84]	; 0x54
 80074c2:	7852      	ldrb	r2, [r2, #1]
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	d1c3      	bne.n	8007450 <_strtod_l+0x38>
 80074c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074ca:	9515      	str	r5, [sp, #84]	; 0x54
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f040 855f 	bne.w	8007f90 <_strtod_l+0xb78>
 80074d2:	4642      	mov	r2, r8
 80074d4:	464b      	mov	r3, r9
 80074d6:	e7e3      	b.n	80074a0 <_strtod_l+0x88>
 80074d8:	2100      	movs	r1, #0
 80074da:	e7ef      	b.n	80074bc <_strtod_l+0xa4>
 80074dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80074de:	b13a      	cbz	r2, 80074f0 <_strtod_l+0xd8>
 80074e0:	2135      	movs	r1, #53	; 0x35
 80074e2:	a818      	add	r0, sp, #96	; 0x60
 80074e4:	f7ff ff37 	bl	8007356 <__copybits>
 80074e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff fb0a 	bl	8006b04 <_Bfree>
 80074f0:	3f01      	subs	r7, #1
 80074f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074f4:	2f04      	cmp	r7, #4
 80074f6:	d806      	bhi.n	8007506 <_strtod_l+0xee>
 80074f8:	e8df f007 	tbb	[pc, r7]
 80074fc:	201d0314 	.word	0x201d0314
 8007500:	14          	.byte	0x14
 8007501:	00          	.byte	0x00
 8007502:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007506:	05e9      	lsls	r1, r5, #23
 8007508:	bf48      	it	mi
 800750a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800750e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007512:	0d1b      	lsrs	r3, r3, #20
 8007514:	051b      	lsls	r3, r3, #20
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1b9      	bne.n	800748e <_strtod_l+0x76>
 800751a:	f7fe fb03 	bl	8005b24 <__errno>
 800751e:	2322      	movs	r3, #34	; 0x22
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	e7b4      	b.n	800748e <_strtod_l+0x76>
 8007524:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007528:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800752c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007530:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007534:	e7e7      	b.n	8007506 <_strtod_l+0xee>
 8007536:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80076b0 <_strtod_l+0x298>
 800753a:	e7e4      	b.n	8007506 <_strtod_l+0xee>
 800753c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007540:	f04f 38ff 	mov.w	r8, #4294967295
 8007544:	e7df      	b.n	8007506 <_strtod_l+0xee>
 8007546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	9215      	str	r2, [sp, #84]	; 0x54
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b30      	cmp	r3, #48	; 0x30
 8007550:	d0f9      	beq.n	8007546 <_strtod_l+0x12e>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d09b      	beq.n	800748e <_strtod_l+0x76>
 8007556:	2301      	movs	r3, #1
 8007558:	f04f 0a00 	mov.w	sl, #0
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007560:	930b      	str	r3, [sp, #44]	; 0x2c
 8007562:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007566:	46d3      	mov	fp, sl
 8007568:	220a      	movs	r2, #10
 800756a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800756c:	7806      	ldrb	r6, [r0, #0]
 800756e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007572:	b2d9      	uxtb	r1, r3
 8007574:	2909      	cmp	r1, #9
 8007576:	d926      	bls.n	80075c6 <_strtod_l+0x1ae>
 8007578:	494c      	ldr	r1, [pc, #304]	; (80076ac <_strtod_l+0x294>)
 800757a:	2201      	movs	r2, #1
 800757c:	f000 ffe6 	bl	800854c <strncmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	d030      	beq.n	80075e6 <_strtod_l+0x1ce>
 8007584:	2000      	movs	r0, #0
 8007586:	4632      	mov	r2, r6
 8007588:	9005      	str	r0, [sp, #20]
 800758a:	465e      	mov	r6, fp
 800758c:	4603      	mov	r3, r0
 800758e:	2a65      	cmp	r2, #101	; 0x65
 8007590:	d001      	beq.n	8007596 <_strtod_l+0x17e>
 8007592:	2a45      	cmp	r2, #69	; 0x45
 8007594:	d113      	bne.n	80075be <_strtod_l+0x1a6>
 8007596:	b91e      	cbnz	r6, 80075a0 <_strtod_l+0x188>
 8007598:	9a04      	ldr	r2, [sp, #16]
 800759a:	4302      	orrs	r2, r0
 800759c:	d094      	beq.n	80074c8 <_strtod_l+0xb0>
 800759e:	2600      	movs	r6, #0
 80075a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80075a2:	1c6a      	adds	r2, r5, #1
 80075a4:	9215      	str	r2, [sp, #84]	; 0x54
 80075a6:	786a      	ldrb	r2, [r5, #1]
 80075a8:	2a2b      	cmp	r2, #43	; 0x2b
 80075aa:	d074      	beq.n	8007696 <_strtod_l+0x27e>
 80075ac:	2a2d      	cmp	r2, #45	; 0x2d
 80075ae:	d078      	beq.n	80076a2 <_strtod_l+0x28a>
 80075b0:	f04f 0c00 	mov.w	ip, #0
 80075b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075b8:	2909      	cmp	r1, #9
 80075ba:	d97f      	bls.n	80076bc <_strtod_l+0x2a4>
 80075bc:	9515      	str	r5, [sp, #84]	; 0x54
 80075be:	2700      	movs	r7, #0
 80075c0:	e09e      	b.n	8007700 <_strtod_l+0x2e8>
 80075c2:	2300      	movs	r3, #0
 80075c4:	e7c8      	b.n	8007558 <_strtod_l+0x140>
 80075c6:	f1bb 0f08 	cmp.w	fp, #8
 80075ca:	bfd8      	it	le
 80075cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80075ce:	f100 0001 	add.w	r0, r0, #1
 80075d2:	bfda      	itte	le
 80075d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80075d8:	9309      	strle	r3, [sp, #36]	; 0x24
 80075da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80075de:	f10b 0b01 	add.w	fp, fp, #1
 80075e2:	9015      	str	r0, [sp, #84]	; 0x54
 80075e4:	e7c1      	b.n	800756a <_strtod_l+0x152>
 80075e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	9215      	str	r2, [sp, #84]	; 0x54
 80075ec:	785a      	ldrb	r2, [r3, #1]
 80075ee:	f1bb 0f00 	cmp.w	fp, #0
 80075f2:	d037      	beq.n	8007664 <_strtod_l+0x24c>
 80075f4:	9005      	str	r0, [sp, #20]
 80075f6:	465e      	mov	r6, fp
 80075f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d912      	bls.n	8007626 <_strtod_l+0x20e>
 8007600:	2301      	movs	r3, #1
 8007602:	e7c4      	b.n	800758e <_strtod_l+0x176>
 8007604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	9215      	str	r2, [sp, #84]	; 0x54
 800760a:	785a      	ldrb	r2, [r3, #1]
 800760c:	3001      	adds	r0, #1
 800760e:	2a30      	cmp	r2, #48	; 0x30
 8007610:	d0f8      	beq.n	8007604 <_strtod_l+0x1ec>
 8007612:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007616:	2b08      	cmp	r3, #8
 8007618:	f200 84c1 	bhi.w	8007f9e <_strtod_l+0xb86>
 800761c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800761e:	9005      	str	r0, [sp, #20]
 8007620:	2000      	movs	r0, #0
 8007622:	930b      	str	r3, [sp, #44]	; 0x2c
 8007624:	4606      	mov	r6, r0
 8007626:	3a30      	subs	r2, #48	; 0x30
 8007628:	f100 0301 	add.w	r3, r0, #1
 800762c:	d014      	beq.n	8007658 <_strtod_l+0x240>
 800762e:	9905      	ldr	r1, [sp, #20]
 8007630:	4419      	add	r1, r3
 8007632:	9105      	str	r1, [sp, #20]
 8007634:	4633      	mov	r3, r6
 8007636:	eb00 0c06 	add.w	ip, r0, r6
 800763a:	210a      	movs	r1, #10
 800763c:	4563      	cmp	r3, ip
 800763e:	d113      	bne.n	8007668 <_strtod_l+0x250>
 8007640:	1833      	adds	r3, r6, r0
 8007642:	2b08      	cmp	r3, #8
 8007644:	f106 0601 	add.w	r6, r6, #1
 8007648:	4406      	add	r6, r0
 800764a:	dc1a      	bgt.n	8007682 <_strtod_l+0x26a>
 800764c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800764e:	230a      	movs	r3, #10
 8007650:	fb03 2301 	mla	r3, r3, r1, r2
 8007654:	9309      	str	r3, [sp, #36]	; 0x24
 8007656:	2300      	movs	r3, #0
 8007658:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800765a:	1c51      	adds	r1, r2, #1
 800765c:	9115      	str	r1, [sp, #84]	; 0x54
 800765e:	7852      	ldrb	r2, [r2, #1]
 8007660:	4618      	mov	r0, r3
 8007662:	e7c9      	b.n	80075f8 <_strtod_l+0x1e0>
 8007664:	4658      	mov	r0, fp
 8007666:	e7d2      	b.n	800760e <_strtod_l+0x1f6>
 8007668:	2b08      	cmp	r3, #8
 800766a:	f103 0301 	add.w	r3, r3, #1
 800766e:	dc03      	bgt.n	8007678 <_strtod_l+0x260>
 8007670:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007672:	434f      	muls	r7, r1
 8007674:	9709      	str	r7, [sp, #36]	; 0x24
 8007676:	e7e1      	b.n	800763c <_strtod_l+0x224>
 8007678:	2b10      	cmp	r3, #16
 800767a:	bfd8      	it	le
 800767c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007680:	e7dc      	b.n	800763c <_strtod_l+0x224>
 8007682:	2e10      	cmp	r6, #16
 8007684:	bfdc      	itt	le
 8007686:	230a      	movle	r3, #10
 8007688:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800768c:	e7e3      	b.n	8007656 <_strtod_l+0x23e>
 800768e:	2300      	movs	r3, #0
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	2301      	movs	r3, #1
 8007694:	e780      	b.n	8007598 <_strtod_l+0x180>
 8007696:	f04f 0c00 	mov.w	ip, #0
 800769a:	1caa      	adds	r2, r5, #2
 800769c:	9215      	str	r2, [sp, #84]	; 0x54
 800769e:	78aa      	ldrb	r2, [r5, #2]
 80076a0:	e788      	b.n	80075b4 <_strtod_l+0x19c>
 80076a2:	f04f 0c01 	mov.w	ip, #1
 80076a6:	e7f8      	b.n	800769a <_strtod_l+0x282>
 80076a8:	08009590 	.word	0x08009590
 80076ac:	0800958c 	.word	0x0800958c
 80076b0:	7ff00000 	.word	0x7ff00000
 80076b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076b6:	1c51      	adds	r1, r2, #1
 80076b8:	9115      	str	r1, [sp, #84]	; 0x54
 80076ba:	7852      	ldrb	r2, [r2, #1]
 80076bc:	2a30      	cmp	r2, #48	; 0x30
 80076be:	d0f9      	beq.n	80076b4 <_strtod_l+0x29c>
 80076c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80076c4:	2908      	cmp	r1, #8
 80076c6:	f63f af7a 	bhi.w	80075be <_strtod_l+0x1a6>
 80076ca:	3a30      	subs	r2, #48	; 0x30
 80076cc:	9208      	str	r2, [sp, #32]
 80076ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076d0:	920c      	str	r2, [sp, #48]	; 0x30
 80076d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076d4:	1c57      	adds	r7, r2, #1
 80076d6:	9715      	str	r7, [sp, #84]	; 0x54
 80076d8:	7852      	ldrb	r2, [r2, #1]
 80076da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80076de:	f1be 0f09 	cmp.w	lr, #9
 80076e2:	d938      	bls.n	8007756 <_strtod_l+0x33e>
 80076e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076e6:	1a7f      	subs	r7, r7, r1
 80076e8:	2f08      	cmp	r7, #8
 80076ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80076ee:	dc03      	bgt.n	80076f8 <_strtod_l+0x2e0>
 80076f0:	9908      	ldr	r1, [sp, #32]
 80076f2:	428f      	cmp	r7, r1
 80076f4:	bfa8      	it	ge
 80076f6:	460f      	movge	r7, r1
 80076f8:	f1bc 0f00 	cmp.w	ip, #0
 80076fc:	d000      	beq.n	8007700 <_strtod_l+0x2e8>
 80076fe:	427f      	negs	r7, r7
 8007700:	2e00      	cmp	r6, #0
 8007702:	d14f      	bne.n	80077a4 <_strtod_l+0x38c>
 8007704:	9904      	ldr	r1, [sp, #16]
 8007706:	4301      	orrs	r1, r0
 8007708:	f47f aec1 	bne.w	800748e <_strtod_l+0x76>
 800770c:	2b00      	cmp	r3, #0
 800770e:	f47f aedb 	bne.w	80074c8 <_strtod_l+0xb0>
 8007712:	2a69      	cmp	r2, #105	; 0x69
 8007714:	d029      	beq.n	800776a <_strtod_l+0x352>
 8007716:	dc26      	bgt.n	8007766 <_strtod_l+0x34e>
 8007718:	2a49      	cmp	r2, #73	; 0x49
 800771a:	d026      	beq.n	800776a <_strtod_l+0x352>
 800771c:	2a4e      	cmp	r2, #78	; 0x4e
 800771e:	f47f aed3 	bne.w	80074c8 <_strtod_l+0xb0>
 8007722:	499b      	ldr	r1, [pc, #620]	; (8007990 <_strtod_l+0x578>)
 8007724:	a815      	add	r0, sp, #84	; 0x54
 8007726:	f001 fa27 	bl	8008b78 <__match>
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f aecc 	beq.w	80074c8 <_strtod_l+0xb0>
 8007730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b28      	cmp	r3, #40	; 0x28
 8007736:	d12f      	bne.n	8007798 <_strtod_l+0x380>
 8007738:	4996      	ldr	r1, [pc, #600]	; (8007994 <_strtod_l+0x57c>)
 800773a:	aa18      	add	r2, sp, #96	; 0x60
 800773c:	a815      	add	r0, sp, #84	; 0x54
 800773e:	f001 fa2f 	bl	8008ba0 <__hexnan>
 8007742:	2805      	cmp	r0, #5
 8007744:	d128      	bne.n	8007798 <_strtod_l+0x380>
 8007746:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007748:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800774c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007750:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007754:	e69b      	b.n	800748e <_strtod_l+0x76>
 8007756:	9f08      	ldr	r7, [sp, #32]
 8007758:	210a      	movs	r1, #10
 800775a:	fb01 2107 	mla	r1, r1, r7, r2
 800775e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007762:	9208      	str	r2, [sp, #32]
 8007764:	e7b5      	b.n	80076d2 <_strtod_l+0x2ba>
 8007766:	2a6e      	cmp	r2, #110	; 0x6e
 8007768:	e7d9      	b.n	800771e <_strtod_l+0x306>
 800776a:	498b      	ldr	r1, [pc, #556]	; (8007998 <_strtod_l+0x580>)
 800776c:	a815      	add	r0, sp, #84	; 0x54
 800776e:	f001 fa03 	bl	8008b78 <__match>
 8007772:	2800      	cmp	r0, #0
 8007774:	f43f aea8 	beq.w	80074c8 <_strtod_l+0xb0>
 8007778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800777a:	4988      	ldr	r1, [pc, #544]	; (800799c <_strtod_l+0x584>)
 800777c:	3b01      	subs	r3, #1
 800777e:	a815      	add	r0, sp, #84	; 0x54
 8007780:	9315      	str	r3, [sp, #84]	; 0x54
 8007782:	f001 f9f9 	bl	8008b78 <__match>
 8007786:	b910      	cbnz	r0, 800778e <_strtod_l+0x376>
 8007788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800778a:	3301      	adds	r3, #1
 800778c:	9315      	str	r3, [sp, #84]	; 0x54
 800778e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80079ac <_strtod_l+0x594>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	e67a      	b.n	800748e <_strtod_l+0x76>
 8007798:	4881      	ldr	r0, [pc, #516]	; (80079a0 <_strtod_l+0x588>)
 800779a:	f000 ff09 	bl	80085b0 <nan>
 800779e:	ec59 8b10 	vmov	r8, r9, d0
 80077a2:	e674      	b.n	800748e <_strtod_l+0x76>
 80077a4:	9b05      	ldr	r3, [sp, #20]
 80077a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077a8:	1afb      	subs	r3, r7, r3
 80077aa:	f1bb 0f00 	cmp.w	fp, #0
 80077ae:	bf08      	it	eq
 80077b0:	46b3      	moveq	fp, r6
 80077b2:	2e10      	cmp	r6, #16
 80077b4:	9308      	str	r3, [sp, #32]
 80077b6:	4635      	mov	r5, r6
 80077b8:	bfa8      	it	ge
 80077ba:	2510      	movge	r5, #16
 80077bc:	f7f8 fea2 	bl	8000504 <__aeabi_ui2d>
 80077c0:	2e09      	cmp	r6, #9
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	dd13      	ble.n	80077f0 <_strtod_l+0x3d8>
 80077c8:	4b76      	ldr	r3, [pc, #472]	; (80079a4 <_strtod_l+0x58c>)
 80077ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80077ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	4680      	mov	r8, r0
 80077d8:	4650      	mov	r0, sl
 80077da:	4689      	mov	r9, r1
 80077dc:	f7f8 fe92 	bl	8000504 <__aeabi_ui2d>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4640      	mov	r0, r8
 80077e6:	4649      	mov	r1, r9
 80077e8:	f7f8 fd50 	bl	800028c <__adddf3>
 80077ec:	4680      	mov	r8, r0
 80077ee:	4689      	mov	r9, r1
 80077f0:	2e0f      	cmp	r6, #15
 80077f2:	dc38      	bgt.n	8007866 <_strtod_l+0x44e>
 80077f4:	9b08      	ldr	r3, [sp, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f43f ae49 	beq.w	800748e <_strtod_l+0x76>
 80077fc:	dd24      	ble.n	8007848 <_strtod_l+0x430>
 80077fe:	2b16      	cmp	r3, #22
 8007800:	dc0b      	bgt.n	800781a <_strtod_l+0x402>
 8007802:	4968      	ldr	r1, [pc, #416]	; (80079a4 <_strtod_l+0x58c>)
 8007804:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800780c:	4642      	mov	r2, r8
 800780e:	464b      	mov	r3, r9
 8007810:	f7f8 fef2 	bl	80005f8 <__aeabi_dmul>
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	e639      	b.n	800748e <_strtod_l+0x76>
 800781a:	9a08      	ldr	r2, [sp, #32]
 800781c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007820:	4293      	cmp	r3, r2
 8007822:	db20      	blt.n	8007866 <_strtod_l+0x44e>
 8007824:	4c5f      	ldr	r4, [pc, #380]	; (80079a4 <_strtod_l+0x58c>)
 8007826:	f1c6 060f 	rsb	r6, r6, #15
 800782a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800782e:	4642      	mov	r2, r8
 8007830:	464b      	mov	r3, r9
 8007832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007836:	f7f8 fedf 	bl	80005f8 <__aeabi_dmul>
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	1b9e      	subs	r6, r3, r6
 800783e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007842:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007846:	e7e3      	b.n	8007810 <_strtod_l+0x3f8>
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	3316      	adds	r3, #22
 800784c:	db0b      	blt.n	8007866 <_strtod_l+0x44e>
 800784e:	9b05      	ldr	r3, [sp, #20]
 8007850:	1bdf      	subs	r7, r3, r7
 8007852:	4b54      	ldr	r3, [pc, #336]	; (80079a4 <_strtod_l+0x58c>)
 8007854:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f8 fff4 	bl	800084c <__aeabi_ddiv>
 8007864:	e7d6      	b.n	8007814 <_strtod_l+0x3fc>
 8007866:	9b08      	ldr	r3, [sp, #32]
 8007868:	1b75      	subs	r5, r6, r5
 800786a:	441d      	add	r5, r3
 800786c:	2d00      	cmp	r5, #0
 800786e:	dd70      	ble.n	8007952 <_strtod_l+0x53a>
 8007870:	f015 030f 	ands.w	r3, r5, #15
 8007874:	d00a      	beq.n	800788c <_strtod_l+0x474>
 8007876:	494b      	ldr	r1, [pc, #300]	; (80079a4 <_strtod_l+0x58c>)
 8007878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007884:	f7f8 feb8 	bl	80005f8 <__aeabi_dmul>
 8007888:	4680      	mov	r8, r0
 800788a:	4689      	mov	r9, r1
 800788c:	f035 050f 	bics.w	r5, r5, #15
 8007890:	d04d      	beq.n	800792e <_strtod_l+0x516>
 8007892:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007896:	dd22      	ble.n	80078de <_strtod_l+0x4c6>
 8007898:	2500      	movs	r5, #0
 800789a:	46ab      	mov	fp, r5
 800789c:	9509      	str	r5, [sp, #36]	; 0x24
 800789e:	9505      	str	r5, [sp, #20]
 80078a0:	2322      	movs	r3, #34	; 0x22
 80078a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80079ac <_strtod_l+0x594>
 80078a6:	6023      	str	r3, [r4, #0]
 80078a8:	f04f 0800 	mov.w	r8, #0
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f43f aded 	beq.w	800748e <_strtod_l+0x76>
 80078b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80078b6:	4620      	mov	r0, r4
 80078b8:	f7ff f924 	bl	8006b04 <_Bfree>
 80078bc:	9905      	ldr	r1, [sp, #20]
 80078be:	4620      	mov	r0, r4
 80078c0:	f7ff f920 	bl	8006b04 <_Bfree>
 80078c4:	4659      	mov	r1, fp
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7ff f91c 	bl	8006b04 <_Bfree>
 80078cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7ff f918 	bl	8006b04 <_Bfree>
 80078d4:	4629      	mov	r1, r5
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff f914 	bl	8006b04 <_Bfree>
 80078dc:	e5d7      	b.n	800748e <_strtod_l+0x76>
 80078de:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <_strtod_l+0x590>)
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	2300      	movs	r3, #0
 80078e4:	112d      	asrs	r5, r5, #4
 80078e6:	4640      	mov	r0, r8
 80078e8:	4649      	mov	r1, r9
 80078ea:	469a      	mov	sl, r3
 80078ec:	2d01      	cmp	r5, #1
 80078ee:	dc21      	bgt.n	8007934 <_strtod_l+0x51c>
 80078f0:	b10b      	cbz	r3, 80078f6 <_strtod_l+0x4de>
 80078f2:	4680      	mov	r8, r0
 80078f4:	4689      	mov	r9, r1
 80078f6:	492c      	ldr	r1, [pc, #176]	; (80079a8 <_strtod_l+0x590>)
 80078f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80078fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007908:	f7f8 fe76 	bl	80005f8 <__aeabi_dmul>
 800790c:	4b27      	ldr	r3, [pc, #156]	; (80079ac <_strtod_l+0x594>)
 800790e:	460a      	mov	r2, r1
 8007910:	400b      	ands	r3, r1
 8007912:	4927      	ldr	r1, [pc, #156]	; (80079b0 <_strtod_l+0x598>)
 8007914:	428b      	cmp	r3, r1
 8007916:	4680      	mov	r8, r0
 8007918:	d8be      	bhi.n	8007898 <_strtod_l+0x480>
 800791a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800791e:	428b      	cmp	r3, r1
 8007920:	bf86      	itte	hi
 8007922:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80079b4 <_strtod_l+0x59c>
 8007926:	f04f 38ff 	movhi.w	r8, #4294967295
 800792a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800792e:	2300      	movs	r3, #0
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	e07b      	b.n	8007a2c <_strtod_l+0x614>
 8007934:	07ea      	lsls	r2, r5, #31
 8007936:	d505      	bpl.n	8007944 <_strtod_l+0x52c>
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f7f8 fe5b 	bl	80005f8 <__aeabi_dmul>
 8007942:	2301      	movs	r3, #1
 8007944:	9a04      	ldr	r2, [sp, #16]
 8007946:	3208      	adds	r2, #8
 8007948:	f10a 0a01 	add.w	sl, sl, #1
 800794c:	106d      	asrs	r5, r5, #1
 800794e:	9204      	str	r2, [sp, #16]
 8007950:	e7cc      	b.n	80078ec <_strtod_l+0x4d4>
 8007952:	d0ec      	beq.n	800792e <_strtod_l+0x516>
 8007954:	426d      	negs	r5, r5
 8007956:	f015 020f 	ands.w	r2, r5, #15
 800795a:	d00a      	beq.n	8007972 <_strtod_l+0x55a>
 800795c:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <_strtod_l+0x58c>)
 800795e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 ff6f 	bl	800084c <__aeabi_ddiv>
 800796e:	4680      	mov	r8, r0
 8007970:	4689      	mov	r9, r1
 8007972:	112d      	asrs	r5, r5, #4
 8007974:	d0db      	beq.n	800792e <_strtod_l+0x516>
 8007976:	2d1f      	cmp	r5, #31
 8007978:	dd1e      	ble.n	80079b8 <_strtod_l+0x5a0>
 800797a:	2500      	movs	r5, #0
 800797c:	46ab      	mov	fp, r5
 800797e:	9509      	str	r5, [sp, #36]	; 0x24
 8007980:	9505      	str	r5, [sp, #20]
 8007982:	2322      	movs	r3, #34	; 0x22
 8007984:	f04f 0800 	mov.w	r8, #0
 8007988:	f04f 0900 	mov.w	r9, #0
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	e78d      	b.n	80078ac <_strtod_l+0x494>
 8007990:	0800937d 	.word	0x0800937d
 8007994:	080095a4 	.word	0x080095a4
 8007998:	08009375 	.word	0x08009375
 800799c:	080093ac 	.word	0x080093ac
 80079a0:	08009735 	.word	0x08009735
 80079a4:	080094b8 	.word	0x080094b8
 80079a8:	08009490 	.word	0x08009490
 80079ac:	7ff00000 	.word	0x7ff00000
 80079b0:	7ca00000 	.word	0x7ca00000
 80079b4:	7fefffff 	.word	0x7fefffff
 80079b8:	f015 0310 	ands.w	r3, r5, #16
 80079bc:	bf18      	it	ne
 80079be:	236a      	movne	r3, #106	; 0x6a
 80079c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007d64 <_strtod_l+0x94c>
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	4640      	mov	r0, r8
 80079c8:	4649      	mov	r1, r9
 80079ca:	2300      	movs	r3, #0
 80079cc:	07ea      	lsls	r2, r5, #31
 80079ce:	d504      	bpl.n	80079da <_strtod_l+0x5c2>
 80079d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80079d4:	f7f8 fe10 	bl	80005f8 <__aeabi_dmul>
 80079d8:	2301      	movs	r3, #1
 80079da:	106d      	asrs	r5, r5, #1
 80079dc:	f10a 0a08 	add.w	sl, sl, #8
 80079e0:	d1f4      	bne.n	80079cc <_strtod_l+0x5b4>
 80079e2:	b10b      	cbz	r3, 80079e8 <_strtod_l+0x5d0>
 80079e4:	4680      	mov	r8, r0
 80079e6:	4689      	mov	r9, r1
 80079e8:	9b04      	ldr	r3, [sp, #16]
 80079ea:	b1bb      	cbz	r3, 8007a1c <_strtod_l+0x604>
 80079ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80079f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	4649      	mov	r1, r9
 80079f8:	dd10      	ble.n	8007a1c <_strtod_l+0x604>
 80079fa:	2b1f      	cmp	r3, #31
 80079fc:	f340 811e 	ble.w	8007c3c <_strtod_l+0x824>
 8007a00:	2b34      	cmp	r3, #52	; 0x34
 8007a02:	bfde      	ittt	le
 8007a04:	f04f 33ff 	movle.w	r3, #4294967295
 8007a08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a0c:	4093      	lslle	r3, r2
 8007a0e:	f04f 0800 	mov.w	r8, #0
 8007a12:	bfcc      	ite	gt
 8007a14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a18:	ea03 0901 	andle.w	r9, r3, r1
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f9 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d1a6      	bne.n	800797a <_strtod_l+0x562>
 8007a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a32:	4633      	mov	r3, r6
 8007a34:	465a      	mov	r2, fp
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7ff f8cc 	bl	8006bd4 <__s2b>
 8007a3c:	9009      	str	r0, [sp, #36]	; 0x24
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f af2a 	beq.w	8007898 <_strtod_l+0x480>
 8007a44:	9a08      	ldr	r2, [sp, #32]
 8007a46:	9b05      	ldr	r3, [sp, #20]
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	eba3 0307 	sub.w	r3, r3, r7
 8007a4e:	bfa8      	it	ge
 8007a50:	2300      	movge	r3, #0
 8007a52:	930c      	str	r3, [sp, #48]	; 0x30
 8007a54:	2500      	movs	r5, #0
 8007a56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a5a:	9312      	str	r3, [sp, #72]	; 0x48
 8007a5c:	46ab      	mov	fp, r5
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	4620      	mov	r0, r4
 8007a62:	6859      	ldr	r1, [r3, #4]
 8007a64:	f7ff f80e 	bl	8006a84 <_Balloc>
 8007a68:	9005      	str	r0, [sp, #20]
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f43f af18 	beq.w	80078a0 <_strtod_l+0x488>
 8007a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	3202      	adds	r2, #2
 8007a76:	f103 010c 	add.w	r1, r3, #12
 8007a7a:	0092      	lsls	r2, r2, #2
 8007a7c:	300c      	adds	r0, #12
 8007a7e:	f000 fd87 	bl	8008590 <memcpy>
 8007a82:	ec49 8b10 	vmov	d0, r8, r9
 8007a86:	aa18      	add	r2, sp, #96	; 0x60
 8007a88:	a917      	add	r1, sp, #92	; 0x5c
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7ff fbd6 	bl	800723c <__d2b>
 8007a90:	ec49 8b18 	vmov	d8, r8, r9
 8007a94:	9016      	str	r0, [sp, #88]	; 0x58
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f af02 	beq.w	80078a0 <_strtod_l+0x488>
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7ff f930 	bl	8006d04 <__i2b>
 8007aa4:	4683      	mov	fp, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f43f aefa 	beq.w	80078a0 <_strtod_l+0x488>
 8007aac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007aae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007ab6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007ab8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007aba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007abe:	bfac      	ite	ge
 8007ac0:	eb06 0a03 	addge.w	sl, r6, r3
 8007ac4:	1b9f      	sublt	r7, r3, r6
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	1af6      	subs	r6, r6, r3
 8007aca:	4416      	add	r6, r2
 8007acc:	4ba0      	ldr	r3, [pc, #640]	; (8007d50 <_strtod_l+0x938>)
 8007ace:	3e01      	subs	r6, #1
 8007ad0:	429e      	cmp	r6, r3
 8007ad2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ad6:	f280 80c4 	bge.w	8007c62 <_strtod_l+0x84a>
 8007ada:	1b9b      	subs	r3, r3, r6
 8007adc:	2b1f      	cmp	r3, #31
 8007ade:	eba2 0203 	sub.w	r2, r2, r3
 8007ae2:	f04f 0101 	mov.w	r1, #1
 8007ae6:	f300 80b0 	bgt.w	8007c4a <_strtod_l+0x832>
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	930e      	str	r3, [sp, #56]	; 0x38
 8007af0:	2300      	movs	r3, #0
 8007af2:	930d      	str	r3, [sp, #52]	; 0x34
 8007af4:	eb0a 0602 	add.w	r6, sl, r2
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	45b2      	cmp	sl, r6
 8007afc:	4417      	add	r7, r2
 8007afe:	441f      	add	r7, r3
 8007b00:	4653      	mov	r3, sl
 8007b02:	bfa8      	it	ge
 8007b04:	4633      	movge	r3, r6
 8007b06:	42bb      	cmp	r3, r7
 8007b08:	bfa8      	it	ge
 8007b0a:	463b      	movge	r3, r7
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bfc2      	ittt	gt
 8007b10:	1af6      	subgt	r6, r6, r3
 8007b12:	1aff      	subgt	r7, r7, r3
 8007b14:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dd17      	ble.n	8007b4e <_strtod_l+0x736>
 8007b1e:	4659      	mov	r1, fp
 8007b20:	461a      	mov	r2, r3
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff f9ae 	bl	8006e84 <__pow5mult>
 8007b28:	4683      	mov	fp, r0
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f43f aeb8 	beq.w	80078a0 <_strtod_l+0x488>
 8007b30:	4601      	mov	r1, r0
 8007b32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b34:	4620      	mov	r0, r4
 8007b36:	f7ff f8fb 	bl	8006d30 <__multiply>
 8007b3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f43f aeaf 	beq.w	80078a0 <_strtod_l+0x488>
 8007b42:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b44:	4620      	mov	r0, r4
 8007b46:	f7fe ffdd 	bl	8006b04 <_Bfree>
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	9316      	str	r3, [sp, #88]	; 0x58
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	f300 808c 	bgt.w	8007c6c <_strtod_l+0x854>
 8007b54:	9b08      	ldr	r3, [sp, #32]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd08      	ble.n	8007b6c <_strtod_l+0x754>
 8007b5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b5c:	9905      	ldr	r1, [sp, #20]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f7ff f990 	bl	8006e84 <__pow5mult>
 8007b64:	9005      	str	r0, [sp, #20]
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f43f ae9a 	beq.w	80078a0 <_strtod_l+0x488>
 8007b6c:	2f00      	cmp	r7, #0
 8007b6e:	dd08      	ble.n	8007b82 <_strtod_l+0x76a>
 8007b70:	9905      	ldr	r1, [sp, #20]
 8007b72:	463a      	mov	r2, r7
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff f9df 	bl	8006f38 <__lshift>
 8007b7a:	9005      	str	r0, [sp, #20]
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f43f ae8f 	beq.w	80078a0 <_strtod_l+0x488>
 8007b82:	f1ba 0f00 	cmp.w	sl, #0
 8007b86:	dd08      	ble.n	8007b9a <_strtod_l+0x782>
 8007b88:	4659      	mov	r1, fp
 8007b8a:	4652      	mov	r2, sl
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f7ff f9d3 	bl	8006f38 <__lshift>
 8007b92:	4683      	mov	fp, r0
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f43f ae83 	beq.w	80078a0 <_strtod_l+0x488>
 8007b9a:	9a05      	ldr	r2, [sp, #20]
 8007b9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff fa52 	bl	8007048 <__mdiff>
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f ae7a 	beq.w	80078a0 <_strtod_l+0x488>
 8007bac:	68c3      	ldr	r3, [r0, #12]
 8007bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60c3      	str	r3, [r0, #12]
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	f7ff fa2b 	bl	8007010 <__mcmp>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	da60      	bge.n	8007c80 <_strtod_l+0x868>
 8007bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc0:	ea53 0308 	orrs.w	r3, r3, r8
 8007bc4:	f040 8084 	bne.w	8007cd0 <_strtod_l+0x8b8>
 8007bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d17f      	bne.n	8007cd0 <_strtod_l+0x8b8>
 8007bd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bd4:	0d1b      	lsrs	r3, r3, #20
 8007bd6:	051b      	lsls	r3, r3, #20
 8007bd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007bdc:	d978      	bls.n	8007cd0 <_strtod_l+0x8b8>
 8007bde:	696b      	ldr	r3, [r5, #20]
 8007be0:	b913      	cbnz	r3, 8007be8 <_strtod_l+0x7d0>
 8007be2:	692b      	ldr	r3, [r5, #16]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	dd73      	ble.n	8007cd0 <_strtod_l+0x8b8>
 8007be8:	4629      	mov	r1, r5
 8007bea:	2201      	movs	r2, #1
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff f9a3 	bl	8006f38 <__lshift>
 8007bf2:	4659      	mov	r1, fp
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	f7ff fa0b 	bl	8007010 <__mcmp>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	dd68      	ble.n	8007cd0 <_strtod_l+0x8b8>
 8007bfe:	9904      	ldr	r1, [sp, #16]
 8007c00:	4a54      	ldr	r2, [pc, #336]	; (8007d54 <_strtod_l+0x93c>)
 8007c02:	464b      	mov	r3, r9
 8007c04:	2900      	cmp	r1, #0
 8007c06:	f000 8084 	beq.w	8007d12 <_strtod_l+0x8fa>
 8007c0a:	ea02 0109 	and.w	r1, r2, r9
 8007c0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c12:	dc7e      	bgt.n	8007d12 <_strtod_l+0x8fa>
 8007c14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c18:	f77f aeb3 	ble.w	8007982 <_strtod_l+0x56a>
 8007c1c:	4b4e      	ldr	r3, [pc, #312]	; (8007d58 <_strtod_l+0x940>)
 8007c1e:	4640      	mov	r0, r8
 8007c20:	4649      	mov	r1, r9
 8007c22:	2200      	movs	r2, #0
 8007c24:	f7f8 fce8 	bl	80005f8 <__aeabi_dmul>
 8007c28:	4b4a      	ldr	r3, [pc, #296]	; (8007d54 <_strtod_l+0x93c>)
 8007c2a:	400b      	ands	r3, r1
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4689      	mov	r9, r1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f47f ae3f 	bne.w	80078b4 <_strtod_l+0x49c>
 8007c36:	2322      	movs	r3, #34	; 0x22
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	e63b      	b.n	80078b4 <_strtod_l+0x49c>
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	ea03 0808 	and.w	r8, r3, r8
 8007c48:	e6e8      	b.n	8007a1c <_strtod_l+0x604>
 8007c4a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007c4e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007c52:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007c56:	36e2      	adds	r6, #226	; 0xe2
 8007c58:	fa01 f306 	lsl.w	r3, r1, r6
 8007c5c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007c60:	e748      	b.n	8007af4 <_strtod_l+0x6dc>
 8007c62:	2100      	movs	r1, #0
 8007c64:	2301      	movs	r3, #1
 8007c66:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007c6a:	e743      	b.n	8007af4 <_strtod_l+0x6dc>
 8007c6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4620      	mov	r0, r4
 8007c72:	f7ff f961 	bl	8006f38 <__lshift>
 8007c76:	9016      	str	r0, [sp, #88]	; 0x58
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f47f af6b 	bne.w	8007b54 <_strtod_l+0x73c>
 8007c7e:	e60f      	b.n	80078a0 <_strtod_l+0x488>
 8007c80:	46ca      	mov	sl, r9
 8007c82:	d171      	bne.n	8007d68 <_strtod_l+0x950>
 8007c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c8a:	b352      	cbz	r2, 8007ce2 <_strtod_l+0x8ca>
 8007c8c:	4a33      	ldr	r2, [pc, #204]	; (8007d5c <_strtod_l+0x944>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d12a      	bne.n	8007ce8 <_strtod_l+0x8d0>
 8007c92:	9b04      	ldr	r3, [sp, #16]
 8007c94:	4641      	mov	r1, r8
 8007c96:	b1fb      	cbz	r3, 8007cd8 <_strtod_l+0x8c0>
 8007c98:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <_strtod_l+0x93c>)
 8007c9a:	ea09 0303 	and.w	r3, r9, r3
 8007c9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca6:	d81a      	bhi.n	8007cde <_strtod_l+0x8c6>
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	d118      	bne.n	8007ce8 <_strtod_l+0x8d0>
 8007cb6:	4b2a      	ldr	r3, [pc, #168]	; (8007d60 <_strtod_l+0x948>)
 8007cb8:	459a      	cmp	sl, r3
 8007cba:	d102      	bne.n	8007cc2 <_strtod_l+0x8aa>
 8007cbc:	3101      	adds	r1, #1
 8007cbe:	f43f adef 	beq.w	80078a0 <_strtod_l+0x488>
 8007cc2:	4b24      	ldr	r3, [pc, #144]	; (8007d54 <_strtod_l+0x93c>)
 8007cc4:	ea0a 0303 	and.w	r3, sl, r3
 8007cc8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	9b04      	ldr	r3, [sp, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1a2      	bne.n	8007c1c <_strtod_l+0x804>
 8007cd6:	e5ed      	b.n	80078b4 <_strtod_l+0x49c>
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cdc:	e7e9      	b.n	8007cb2 <_strtod_l+0x89a>
 8007cde:	4613      	mov	r3, r2
 8007ce0:	e7e7      	b.n	8007cb2 <_strtod_l+0x89a>
 8007ce2:	ea53 0308 	orrs.w	r3, r3, r8
 8007ce6:	d08a      	beq.n	8007bfe <_strtod_l+0x7e6>
 8007ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cea:	b1e3      	cbz	r3, 8007d26 <_strtod_l+0x90e>
 8007cec:	ea13 0f0a 	tst.w	r3, sl
 8007cf0:	d0ee      	beq.n	8007cd0 <_strtod_l+0x8b8>
 8007cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cf4:	9a04      	ldr	r2, [sp, #16]
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	b1c3      	cbz	r3, 8007d2e <_strtod_l+0x916>
 8007cfc:	f7ff fb6f 	bl	80073de <sulp>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	ec51 0b18 	vmov	r0, r1, d8
 8007d08:	f7f8 fac0 	bl	800028c <__adddf3>
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	4689      	mov	r9, r1
 8007d10:	e7de      	b.n	8007cd0 <_strtod_l+0x8b8>
 8007d12:	4013      	ands	r3, r2
 8007d14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d18:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007d1c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d20:	f04f 38ff 	mov.w	r8, #4294967295
 8007d24:	e7d4      	b.n	8007cd0 <_strtod_l+0x8b8>
 8007d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d28:	ea13 0f08 	tst.w	r3, r8
 8007d2c:	e7e0      	b.n	8007cf0 <_strtod_l+0x8d8>
 8007d2e:	f7ff fb56 	bl	80073de <sulp>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	ec51 0b18 	vmov	r0, r1, d8
 8007d3a:	f7f8 faa5 	bl	8000288 <__aeabi_dsub>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2300      	movs	r3, #0
 8007d42:	4680      	mov	r8, r0
 8007d44:	4689      	mov	r9, r1
 8007d46:	f7f8 febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d0c0      	beq.n	8007cd0 <_strtod_l+0x8b8>
 8007d4e:	e618      	b.n	8007982 <_strtod_l+0x56a>
 8007d50:	fffffc02 	.word	0xfffffc02
 8007d54:	7ff00000 	.word	0x7ff00000
 8007d58:	39500000 	.word	0x39500000
 8007d5c:	000fffff 	.word	0x000fffff
 8007d60:	7fefffff 	.word	0x7fefffff
 8007d64:	080095b8 	.word	0x080095b8
 8007d68:	4659      	mov	r1, fp
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7ff fac0 	bl	80072f0 <__ratio>
 8007d70:	ec57 6b10 	vmov	r6, r7, d0
 8007d74:	ee10 0a10 	vmov	r0, s0
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 feb6 	bl	8000af0 <__aeabi_dcmple>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d071      	beq.n	8007e6c <_strtod_l+0xa54>
 8007d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d17c      	bne.n	8007e88 <_strtod_l+0xa70>
 8007d8e:	f1b8 0f00 	cmp.w	r8, #0
 8007d92:	d15a      	bne.n	8007e4a <_strtod_l+0xa32>
 8007d94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d15d      	bne.n	8007e58 <_strtod_l+0xa40>
 8007d9c:	4b90      	ldr	r3, [pc, #576]	; (8007fe0 <_strtod_l+0xbc8>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 fe9a 	bl	8000adc <__aeabi_dcmplt>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d15c      	bne.n	8007e66 <_strtod_l+0xa4e>
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	4b8c      	ldr	r3, [pc, #560]	; (8007fe4 <_strtod_l+0xbcc>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	f7f8 fc20 	bl	80005f8 <__aeabi_dmul>
 8007db8:	4606      	mov	r6, r0
 8007dba:	460f      	mov	r7, r1
 8007dbc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007dc0:	9606      	str	r6, [sp, #24]
 8007dc2:	9307      	str	r3, [sp, #28]
 8007dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007dcc:	4b86      	ldr	r3, [pc, #536]	; (8007fe8 <_strtod_l+0xbd0>)
 8007dce:	ea0a 0303 	and.w	r3, sl, r3
 8007dd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd6:	4b85      	ldr	r3, [pc, #532]	; (8007fec <_strtod_l+0xbd4>)
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	f040 8090 	bne.w	8007efe <_strtod_l+0xae6>
 8007dde:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007de2:	ec49 8b10 	vmov	d0, r8, r9
 8007de6:	f7ff f9b9 	bl	800715c <__ulp>
 8007dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dee:	ec51 0b10 	vmov	r0, r1, d0
 8007df2:	f7f8 fc01 	bl	80005f8 <__aeabi_dmul>
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	f7f8 fa47 	bl	800028c <__adddf3>
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4979      	ldr	r1, [pc, #484]	; (8007fe8 <_strtod_l+0xbd0>)
 8007e02:	4a7b      	ldr	r2, [pc, #492]	; (8007ff0 <_strtod_l+0xbd8>)
 8007e04:	4019      	ands	r1, r3
 8007e06:	4291      	cmp	r1, r2
 8007e08:	4680      	mov	r8, r0
 8007e0a:	d944      	bls.n	8007e96 <_strtod_l+0xa7e>
 8007e0c:	ee18 2a90 	vmov	r2, s17
 8007e10:	4b78      	ldr	r3, [pc, #480]	; (8007ff4 <_strtod_l+0xbdc>)
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d104      	bne.n	8007e20 <_strtod_l+0xa08>
 8007e16:	ee18 3a10 	vmov	r3, s16
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	f43f ad40 	beq.w	80078a0 <_strtod_l+0x488>
 8007e20:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007ff4 <_strtod_l+0xbdc>
 8007e24:	f04f 38ff 	mov.w	r8, #4294967295
 8007e28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f7fe fe6a 	bl	8006b04 <_Bfree>
 8007e30:	9905      	ldr	r1, [sp, #20]
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7fe fe66 	bl	8006b04 <_Bfree>
 8007e38:	4659      	mov	r1, fp
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7fe fe62 	bl	8006b04 <_Bfree>
 8007e40:	4629      	mov	r1, r5
 8007e42:	4620      	mov	r0, r4
 8007e44:	f7fe fe5e 	bl	8006b04 <_Bfree>
 8007e48:	e609      	b.n	8007a5e <_strtod_l+0x646>
 8007e4a:	f1b8 0f01 	cmp.w	r8, #1
 8007e4e:	d103      	bne.n	8007e58 <_strtod_l+0xa40>
 8007e50:	f1b9 0f00 	cmp.w	r9, #0
 8007e54:	f43f ad95 	beq.w	8007982 <_strtod_l+0x56a>
 8007e58:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007fb0 <_strtod_l+0xb98>
 8007e5c:	4f60      	ldr	r7, [pc, #384]	; (8007fe0 <_strtod_l+0xbc8>)
 8007e5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e62:	2600      	movs	r6, #0
 8007e64:	e7ae      	b.n	8007dc4 <_strtod_l+0x9ac>
 8007e66:	4f5f      	ldr	r7, [pc, #380]	; (8007fe4 <_strtod_l+0xbcc>)
 8007e68:	2600      	movs	r6, #0
 8007e6a:	e7a7      	b.n	8007dbc <_strtod_l+0x9a4>
 8007e6c:	4b5d      	ldr	r3, [pc, #372]	; (8007fe4 <_strtod_l+0xbcc>)
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d09c      	beq.n	8007dbc <_strtod_l+0x9a4>
 8007e82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007e86:	e79d      	b.n	8007dc4 <_strtod_l+0x9ac>
 8007e88:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007fb8 <_strtod_l+0xba0>
 8007e8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e90:	ec57 6b17 	vmov	r6, r7, d7
 8007e94:	e796      	b.n	8007dc4 <_strtod_l+0x9ac>
 8007e96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	46ca      	mov	sl, r9
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1c2      	bne.n	8007e28 <_strtod_l+0xa10>
 8007ea2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea8:	0d1b      	lsrs	r3, r3, #20
 8007eaa:	051b      	lsls	r3, r3, #20
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d1bb      	bne.n	8007e28 <_strtod_l+0xa10>
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	f7f8 fee8 	bl	8000c88 <__aeabi_d2lz>
 8007eb8:	f7f8 fb70 	bl	800059c <__aeabi_l2d>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 f9e0 	bl	8000288 <__aeabi_dsub>
 8007ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ece:	ea43 0308 	orr.w	r3, r3, r8
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	d054      	beq.n	8007f84 <_strtod_l+0xb6c>
 8007eda:	a339      	add	r3, pc, #228	; (adr r3, 8007fc0 <_strtod_l+0xba8>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 fdfc 	bl	8000adc <__aeabi_dcmplt>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f47f ace5 	bne.w	80078b4 <_strtod_l+0x49c>
 8007eea:	a337      	add	r3, pc, #220	; (adr r3, 8007fc8 <_strtod_l+0xbb0>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d095      	beq.n	8007e28 <_strtod_l+0xa10>
 8007efc:	e4da      	b.n	80078b4 <_strtod_l+0x49c>
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	b333      	cbz	r3, 8007f50 <_strtod_l+0xb38>
 8007f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f08:	d822      	bhi.n	8007f50 <_strtod_l+0xb38>
 8007f0a:	a331      	add	r3, pc, #196	; (adr r3, 8007fd0 <_strtod_l+0xbb8>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fdec 	bl	8000af0 <__aeabi_dcmple>
 8007f18:	b1a0      	cbz	r0, 8007f44 <_strtod_l+0xb2c>
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7f8 fe43 	bl	8000ba8 <__aeabi_d2uiz>
 8007f22:	2801      	cmp	r0, #1
 8007f24:	bf38      	it	cc
 8007f26:	2001      	movcc	r0, #1
 8007f28:	f7f8 faec 	bl	8000504 <__aeabi_ui2d>
 8007f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460f      	mov	r7, r1
 8007f32:	bb23      	cbnz	r3, 8007f7e <_strtod_l+0xb66>
 8007f34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f38:	9010      	str	r0, [sp, #64]	; 0x40
 8007f3a:	9311      	str	r3, [sp, #68]	; 0x44
 8007f3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007f54:	eeb0 0a48 	vmov.f32	s0, s16
 8007f58:	eef0 0a68 	vmov.f32	s1, s17
 8007f5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007f60:	f7ff f8fc 	bl	800715c <__ulp>
 8007f64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007f68:	ec53 2b10 	vmov	r2, r3, d0
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	ec53 2b18 	vmov	r2, r3, d8
 8007f74:	f7f8 f98a 	bl	800028c <__adddf3>
 8007f78:	4680      	mov	r8, r0
 8007f7a:	4689      	mov	r9, r1
 8007f7c:	e78d      	b.n	8007e9a <_strtod_l+0xa82>
 8007f7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007f82:	e7db      	b.n	8007f3c <_strtod_l+0xb24>
 8007f84:	a314      	add	r3, pc, #80	; (adr r3, 8007fd8 <_strtod_l+0xbc0>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 fda7 	bl	8000adc <__aeabi_dcmplt>
 8007f8e:	e7b3      	b.n	8007ef8 <_strtod_l+0xae0>
 8007f90:	2300      	movs	r3, #0
 8007f92:	930a      	str	r3, [sp, #40]	; 0x28
 8007f94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	f7ff ba7c 	b.w	8007496 <_strtod_l+0x7e>
 8007f9e:	2a65      	cmp	r2, #101	; 0x65
 8007fa0:	f43f ab75 	beq.w	800768e <_strtod_l+0x276>
 8007fa4:	2a45      	cmp	r2, #69	; 0x45
 8007fa6:	f43f ab72 	beq.w	800768e <_strtod_l+0x276>
 8007faa:	2301      	movs	r3, #1
 8007fac:	f7ff bbaa 	b.w	8007704 <_strtod_l+0x2ec>
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	bff00000 	.word	0xbff00000
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	3ff00000 	.word	0x3ff00000
 8007fc0:	94a03595 	.word	0x94a03595
 8007fc4:	3fdfffff 	.word	0x3fdfffff
 8007fc8:	35afe535 	.word	0x35afe535
 8007fcc:	3fe00000 	.word	0x3fe00000
 8007fd0:	ffc00000 	.word	0xffc00000
 8007fd4:	41dfffff 	.word	0x41dfffff
 8007fd8:	94a03595 	.word	0x94a03595
 8007fdc:	3fcfffff 	.word	0x3fcfffff
 8007fe0:	3ff00000 	.word	0x3ff00000
 8007fe4:	3fe00000 	.word	0x3fe00000
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	7fe00000 	.word	0x7fe00000
 8007ff0:	7c9fffff 	.word	0x7c9fffff
 8007ff4:	7fefffff 	.word	0x7fefffff

08007ff8 <_strtod_r>:
 8007ff8:	4b01      	ldr	r3, [pc, #4]	; (8008000 <_strtod_r+0x8>)
 8007ffa:	f7ff ba0d 	b.w	8007418 <_strtod_l>
 8007ffe:	bf00      	nop
 8008000:	20000068 	.word	0x20000068

08008004 <_strtol_l.constprop.0>:
 8008004:	2b01      	cmp	r3, #1
 8008006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800a:	d001      	beq.n	8008010 <_strtol_l.constprop.0+0xc>
 800800c:	2b24      	cmp	r3, #36	; 0x24
 800800e:	d906      	bls.n	800801e <_strtol_l.constprop.0+0x1a>
 8008010:	f7fd fd88 	bl	8005b24 <__errno>
 8008014:	2316      	movs	r3, #22
 8008016:	6003      	str	r3, [r0, #0]
 8008018:	2000      	movs	r0, #0
 800801a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008104 <_strtol_l.constprop.0+0x100>
 8008022:	460d      	mov	r5, r1
 8008024:	462e      	mov	r6, r5
 8008026:	f815 4b01 	ldrb.w	r4, [r5], #1
 800802a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800802e:	f017 0708 	ands.w	r7, r7, #8
 8008032:	d1f7      	bne.n	8008024 <_strtol_l.constprop.0+0x20>
 8008034:	2c2d      	cmp	r4, #45	; 0x2d
 8008036:	d132      	bne.n	800809e <_strtol_l.constprop.0+0x9a>
 8008038:	782c      	ldrb	r4, [r5, #0]
 800803a:	2701      	movs	r7, #1
 800803c:	1cb5      	adds	r5, r6, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d05b      	beq.n	80080fa <_strtol_l.constprop.0+0xf6>
 8008042:	2b10      	cmp	r3, #16
 8008044:	d109      	bne.n	800805a <_strtol_l.constprop.0+0x56>
 8008046:	2c30      	cmp	r4, #48	; 0x30
 8008048:	d107      	bne.n	800805a <_strtol_l.constprop.0+0x56>
 800804a:	782c      	ldrb	r4, [r5, #0]
 800804c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008050:	2c58      	cmp	r4, #88	; 0x58
 8008052:	d14d      	bne.n	80080f0 <_strtol_l.constprop.0+0xec>
 8008054:	786c      	ldrb	r4, [r5, #1]
 8008056:	2310      	movs	r3, #16
 8008058:	3502      	adds	r5, #2
 800805a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800805e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008062:	f04f 0e00 	mov.w	lr, #0
 8008066:	fbb8 f9f3 	udiv	r9, r8, r3
 800806a:	4676      	mov	r6, lr
 800806c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008070:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008074:	f1bc 0f09 	cmp.w	ip, #9
 8008078:	d816      	bhi.n	80080a8 <_strtol_l.constprop.0+0xa4>
 800807a:	4664      	mov	r4, ip
 800807c:	42a3      	cmp	r3, r4
 800807e:	dd24      	ble.n	80080ca <_strtol_l.constprop.0+0xc6>
 8008080:	f1be 3fff 	cmp.w	lr, #4294967295
 8008084:	d008      	beq.n	8008098 <_strtol_l.constprop.0+0x94>
 8008086:	45b1      	cmp	r9, r6
 8008088:	d31c      	bcc.n	80080c4 <_strtol_l.constprop.0+0xc0>
 800808a:	d101      	bne.n	8008090 <_strtol_l.constprop.0+0x8c>
 800808c:	45a2      	cmp	sl, r4
 800808e:	db19      	blt.n	80080c4 <_strtol_l.constprop.0+0xc0>
 8008090:	fb06 4603 	mla	r6, r6, r3, r4
 8008094:	f04f 0e01 	mov.w	lr, #1
 8008098:	f815 4b01 	ldrb.w	r4, [r5], #1
 800809c:	e7e8      	b.n	8008070 <_strtol_l.constprop.0+0x6c>
 800809e:	2c2b      	cmp	r4, #43	; 0x2b
 80080a0:	bf04      	itt	eq
 80080a2:	782c      	ldrbeq	r4, [r5, #0]
 80080a4:	1cb5      	addeq	r5, r6, #2
 80080a6:	e7ca      	b.n	800803e <_strtol_l.constprop.0+0x3a>
 80080a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80080ac:	f1bc 0f19 	cmp.w	ip, #25
 80080b0:	d801      	bhi.n	80080b6 <_strtol_l.constprop.0+0xb2>
 80080b2:	3c37      	subs	r4, #55	; 0x37
 80080b4:	e7e2      	b.n	800807c <_strtol_l.constprop.0+0x78>
 80080b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080ba:	f1bc 0f19 	cmp.w	ip, #25
 80080be:	d804      	bhi.n	80080ca <_strtol_l.constprop.0+0xc6>
 80080c0:	3c57      	subs	r4, #87	; 0x57
 80080c2:	e7db      	b.n	800807c <_strtol_l.constprop.0+0x78>
 80080c4:	f04f 3eff 	mov.w	lr, #4294967295
 80080c8:	e7e6      	b.n	8008098 <_strtol_l.constprop.0+0x94>
 80080ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80080ce:	d105      	bne.n	80080dc <_strtol_l.constprop.0+0xd8>
 80080d0:	2322      	movs	r3, #34	; 0x22
 80080d2:	6003      	str	r3, [r0, #0]
 80080d4:	4646      	mov	r6, r8
 80080d6:	b942      	cbnz	r2, 80080ea <_strtol_l.constprop.0+0xe6>
 80080d8:	4630      	mov	r0, r6
 80080da:	e79e      	b.n	800801a <_strtol_l.constprop.0+0x16>
 80080dc:	b107      	cbz	r7, 80080e0 <_strtol_l.constprop.0+0xdc>
 80080de:	4276      	negs	r6, r6
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d0f9      	beq.n	80080d8 <_strtol_l.constprop.0+0xd4>
 80080e4:	f1be 0f00 	cmp.w	lr, #0
 80080e8:	d000      	beq.n	80080ec <_strtol_l.constprop.0+0xe8>
 80080ea:	1e69      	subs	r1, r5, #1
 80080ec:	6011      	str	r1, [r2, #0]
 80080ee:	e7f3      	b.n	80080d8 <_strtol_l.constprop.0+0xd4>
 80080f0:	2430      	movs	r4, #48	; 0x30
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1b1      	bne.n	800805a <_strtol_l.constprop.0+0x56>
 80080f6:	2308      	movs	r3, #8
 80080f8:	e7af      	b.n	800805a <_strtol_l.constprop.0+0x56>
 80080fa:	2c30      	cmp	r4, #48	; 0x30
 80080fc:	d0a5      	beq.n	800804a <_strtol_l.constprop.0+0x46>
 80080fe:	230a      	movs	r3, #10
 8008100:	e7ab      	b.n	800805a <_strtol_l.constprop.0+0x56>
 8008102:	bf00      	nop
 8008104:	080095e1 	.word	0x080095e1

08008108 <_strtol_r>:
 8008108:	f7ff bf7c 	b.w	8008004 <_strtol_l.constprop.0>

0800810c <__ssputs_r>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	688e      	ldr	r6, [r1, #8]
 8008112:	461f      	mov	r7, r3
 8008114:	42be      	cmp	r6, r7
 8008116:	680b      	ldr	r3, [r1, #0]
 8008118:	4682      	mov	sl, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4690      	mov	r8, r2
 800811e:	d82c      	bhi.n	800817a <__ssputs_r+0x6e>
 8008120:	898a      	ldrh	r2, [r1, #12]
 8008122:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008126:	d026      	beq.n	8008176 <__ssputs_r+0x6a>
 8008128:	6965      	ldr	r5, [r4, #20]
 800812a:	6909      	ldr	r1, [r1, #16]
 800812c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008130:	eba3 0901 	sub.w	r9, r3, r1
 8008134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008138:	1c7b      	adds	r3, r7, #1
 800813a:	444b      	add	r3, r9
 800813c:	106d      	asrs	r5, r5, #1
 800813e:	429d      	cmp	r5, r3
 8008140:	bf38      	it	cc
 8008142:	461d      	movcc	r5, r3
 8008144:	0553      	lsls	r3, r2, #21
 8008146:	d527      	bpl.n	8008198 <__ssputs_r+0x8c>
 8008148:	4629      	mov	r1, r5
 800814a:	f7fe fc0f 	bl	800696c <_malloc_r>
 800814e:	4606      	mov	r6, r0
 8008150:	b360      	cbz	r0, 80081ac <__ssputs_r+0xa0>
 8008152:	6921      	ldr	r1, [r4, #16]
 8008154:	464a      	mov	r2, r9
 8008156:	f000 fa1b 	bl	8008590 <memcpy>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	6126      	str	r6, [r4, #16]
 8008168:	6165      	str	r5, [r4, #20]
 800816a:	444e      	add	r6, r9
 800816c:	eba5 0509 	sub.w	r5, r5, r9
 8008170:	6026      	str	r6, [r4, #0]
 8008172:	60a5      	str	r5, [r4, #8]
 8008174:	463e      	mov	r6, r7
 8008176:	42be      	cmp	r6, r7
 8008178:	d900      	bls.n	800817c <__ssputs_r+0x70>
 800817a:	463e      	mov	r6, r7
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	4632      	mov	r2, r6
 8008180:	4641      	mov	r1, r8
 8008182:	f000 f9c9 	bl	8008518 <memmove>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	1b9b      	subs	r3, r3, r6
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	4433      	add	r3, r6
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	2000      	movs	r0, #0
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	462a      	mov	r2, r5
 800819a:	f000 fdae 	bl	8008cfa <_realloc_r>
 800819e:	4606      	mov	r6, r0
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1e0      	bne.n	8008166 <__ssputs_r+0x5a>
 80081a4:	6921      	ldr	r1, [r4, #16]
 80081a6:	4650      	mov	r0, sl
 80081a8:	f7fe fb6c 	bl	8006884 <_free_r>
 80081ac:	230c      	movs	r3, #12
 80081ae:	f8ca 3000 	str.w	r3, [sl]
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	e7e9      	b.n	8008194 <__ssputs_r+0x88>

080081c0 <_svfiprintf_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	4698      	mov	r8, r3
 80081c6:	898b      	ldrh	r3, [r1, #12]
 80081c8:	061b      	lsls	r3, r3, #24
 80081ca:	b09d      	sub	sp, #116	; 0x74
 80081cc:	4607      	mov	r7, r0
 80081ce:	460d      	mov	r5, r1
 80081d0:	4614      	mov	r4, r2
 80081d2:	d50e      	bpl.n	80081f2 <_svfiprintf_r+0x32>
 80081d4:	690b      	ldr	r3, [r1, #16]
 80081d6:	b963      	cbnz	r3, 80081f2 <_svfiprintf_r+0x32>
 80081d8:	2140      	movs	r1, #64	; 0x40
 80081da:	f7fe fbc7 	bl	800696c <_malloc_r>
 80081de:	6028      	str	r0, [r5, #0]
 80081e0:	6128      	str	r0, [r5, #16]
 80081e2:	b920      	cbnz	r0, 80081ee <_svfiprintf_r+0x2e>
 80081e4:	230c      	movs	r3, #12
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e0d0      	b.n	8008390 <_svfiprintf_r+0x1d0>
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	616b      	str	r3, [r5, #20]
 80081f2:	2300      	movs	r3, #0
 80081f4:	9309      	str	r3, [sp, #36]	; 0x24
 80081f6:	2320      	movs	r3, #32
 80081f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008200:	2330      	movs	r3, #48	; 0x30
 8008202:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083a8 <_svfiprintf_r+0x1e8>
 8008206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800820a:	f04f 0901 	mov.w	r9, #1
 800820e:	4623      	mov	r3, r4
 8008210:	469a      	mov	sl, r3
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	b10a      	cbz	r2, 800821c <_svfiprintf_r+0x5c>
 8008218:	2a25      	cmp	r2, #37	; 0x25
 800821a:	d1f9      	bne.n	8008210 <_svfiprintf_r+0x50>
 800821c:	ebba 0b04 	subs.w	fp, sl, r4
 8008220:	d00b      	beq.n	800823a <_svfiprintf_r+0x7a>
 8008222:	465b      	mov	r3, fp
 8008224:	4622      	mov	r2, r4
 8008226:	4629      	mov	r1, r5
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ff6f 	bl	800810c <__ssputs_r>
 800822e:	3001      	adds	r0, #1
 8008230:	f000 80a9 	beq.w	8008386 <_svfiprintf_r+0x1c6>
 8008234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008236:	445a      	add	r2, fp
 8008238:	9209      	str	r2, [sp, #36]	; 0x24
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80a1 	beq.w	8008386 <_svfiprintf_r+0x1c6>
 8008244:	2300      	movs	r3, #0
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824e:	f10a 0a01 	add.w	sl, sl, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	9307      	str	r3, [sp, #28]
 8008256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800825a:	931a      	str	r3, [sp, #104]	; 0x68
 800825c:	4654      	mov	r4, sl
 800825e:	2205      	movs	r2, #5
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	4850      	ldr	r0, [pc, #320]	; (80083a8 <_svfiprintf_r+0x1e8>)
 8008266:	f7f7 ffb3 	bl	80001d0 <memchr>
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	b9d8      	cbnz	r0, 80082a6 <_svfiprintf_r+0xe6>
 800826e:	06d0      	lsls	r0, r2, #27
 8008270:	bf44      	itt	mi
 8008272:	2320      	movmi	r3, #32
 8008274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008278:	0711      	lsls	r1, r2, #28
 800827a:	bf44      	itt	mi
 800827c:	232b      	movmi	r3, #43	; 0x2b
 800827e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008282:	f89a 3000 	ldrb.w	r3, [sl]
 8008286:	2b2a      	cmp	r3, #42	; 0x2a
 8008288:	d015      	beq.n	80082b6 <_svfiprintf_r+0xf6>
 800828a:	9a07      	ldr	r2, [sp, #28]
 800828c:	4654      	mov	r4, sl
 800828e:	2000      	movs	r0, #0
 8008290:	f04f 0c0a 	mov.w	ip, #10
 8008294:	4621      	mov	r1, r4
 8008296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829a:	3b30      	subs	r3, #48	; 0x30
 800829c:	2b09      	cmp	r3, #9
 800829e:	d94d      	bls.n	800833c <_svfiprintf_r+0x17c>
 80082a0:	b1b0      	cbz	r0, 80082d0 <_svfiprintf_r+0x110>
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	e014      	b.n	80082d0 <_svfiprintf_r+0x110>
 80082a6:	eba0 0308 	sub.w	r3, r0, r8
 80082aa:	fa09 f303 	lsl.w	r3, r9, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	46a2      	mov	sl, r4
 80082b4:	e7d2      	b.n	800825c <_svfiprintf_r+0x9c>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	9103      	str	r1, [sp, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfbb      	ittet	lt
 80082c2:	425b      	neglt	r3, r3
 80082c4:	f042 0202 	orrlt.w	r2, r2, #2
 80082c8:	9307      	strge	r3, [sp, #28]
 80082ca:	9307      	strlt	r3, [sp, #28]
 80082cc:	bfb8      	it	lt
 80082ce:	9204      	strlt	r2, [sp, #16]
 80082d0:	7823      	ldrb	r3, [r4, #0]
 80082d2:	2b2e      	cmp	r3, #46	; 0x2e
 80082d4:	d10c      	bne.n	80082f0 <_svfiprintf_r+0x130>
 80082d6:	7863      	ldrb	r3, [r4, #1]
 80082d8:	2b2a      	cmp	r3, #42	; 0x2a
 80082da:	d134      	bne.n	8008346 <_svfiprintf_r+0x186>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9203      	str	r2, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfb8      	it	lt
 80082e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ec:	3402      	adds	r4, #2
 80082ee:	9305      	str	r3, [sp, #20]
 80082f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083b8 <_svfiprintf_r+0x1f8>
 80082f4:	7821      	ldrb	r1, [r4, #0]
 80082f6:	2203      	movs	r2, #3
 80082f8:	4650      	mov	r0, sl
 80082fa:	f7f7 ff69 	bl	80001d0 <memchr>
 80082fe:	b138      	cbz	r0, 8008310 <_svfiprintf_r+0x150>
 8008300:	9b04      	ldr	r3, [sp, #16]
 8008302:	eba0 000a 	sub.w	r0, r0, sl
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	4082      	lsls	r2, r0
 800830a:	4313      	orrs	r3, r2
 800830c:	3401      	adds	r4, #1
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	4825      	ldr	r0, [pc, #148]	; (80083ac <_svfiprintf_r+0x1ec>)
 8008316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800831a:	2206      	movs	r2, #6
 800831c:	f7f7 ff58 	bl	80001d0 <memchr>
 8008320:	2800      	cmp	r0, #0
 8008322:	d038      	beq.n	8008396 <_svfiprintf_r+0x1d6>
 8008324:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <_svfiprintf_r+0x1f0>)
 8008326:	bb1b      	cbnz	r3, 8008370 <_svfiprintf_r+0x1b0>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	3307      	adds	r3, #7
 800832c:	f023 0307 	bic.w	r3, r3, #7
 8008330:	3308      	adds	r3, #8
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	4433      	add	r3, r6
 8008338:	9309      	str	r3, [sp, #36]	; 0x24
 800833a:	e768      	b.n	800820e <_svfiprintf_r+0x4e>
 800833c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008340:	460c      	mov	r4, r1
 8008342:	2001      	movs	r0, #1
 8008344:	e7a6      	b.n	8008294 <_svfiprintf_r+0xd4>
 8008346:	2300      	movs	r3, #0
 8008348:	3401      	adds	r4, #1
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	4619      	mov	r1, r3
 800834e:	f04f 0c0a 	mov.w	ip, #10
 8008352:	4620      	mov	r0, r4
 8008354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008358:	3a30      	subs	r2, #48	; 0x30
 800835a:	2a09      	cmp	r2, #9
 800835c:	d903      	bls.n	8008366 <_svfiprintf_r+0x1a6>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0c6      	beq.n	80082f0 <_svfiprintf_r+0x130>
 8008362:	9105      	str	r1, [sp, #20]
 8008364:	e7c4      	b.n	80082f0 <_svfiprintf_r+0x130>
 8008366:	fb0c 2101 	mla	r1, ip, r1, r2
 800836a:	4604      	mov	r4, r0
 800836c:	2301      	movs	r3, #1
 800836e:	e7f0      	b.n	8008352 <_svfiprintf_r+0x192>
 8008370:	ab03      	add	r3, sp, #12
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	462a      	mov	r2, r5
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <_svfiprintf_r+0x1f4>)
 8008378:	a904      	add	r1, sp, #16
 800837a:	4638      	mov	r0, r7
 800837c:	f7fc fc84 	bl	8004c88 <_printf_float>
 8008380:	1c42      	adds	r2, r0, #1
 8008382:	4606      	mov	r6, r0
 8008384:	d1d6      	bne.n	8008334 <_svfiprintf_r+0x174>
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	065b      	lsls	r3, r3, #25
 800838a:	f53f af2d 	bmi.w	80081e8 <_svfiprintf_r+0x28>
 800838e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008390:	b01d      	add	sp, #116	; 0x74
 8008392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008396:	ab03      	add	r3, sp, #12
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	462a      	mov	r2, r5
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <_svfiprintf_r+0x1f4>)
 800839e:	a904      	add	r1, sp, #16
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7fc ff15 	bl	80051d0 <_printf_i>
 80083a6:	e7eb      	b.n	8008380 <_svfiprintf_r+0x1c0>
 80083a8:	080096e1 	.word	0x080096e1
 80083ac:	080096eb 	.word	0x080096eb
 80083b0:	08004c89 	.word	0x08004c89
 80083b4:	0800810d 	.word	0x0800810d
 80083b8:	080096e7 	.word	0x080096e7

080083bc <__sflush_r>:
 80083bc:	898a      	ldrh	r2, [r1, #12]
 80083be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c2:	4605      	mov	r5, r0
 80083c4:	0710      	lsls	r0, r2, #28
 80083c6:	460c      	mov	r4, r1
 80083c8:	d458      	bmi.n	800847c <__sflush_r+0xc0>
 80083ca:	684b      	ldr	r3, [r1, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dc05      	bgt.n	80083dc <__sflush_r+0x20>
 80083d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dc02      	bgt.n	80083dc <__sflush_r+0x20>
 80083d6:	2000      	movs	r0, #0
 80083d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083de:	2e00      	cmp	r6, #0
 80083e0:	d0f9      	beq.n	80083d6 <__sflush_r+0x1a>
 80083e2:	2300      	movs	r3, #0
 80083e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083e8:	682f      	ldr	r7, [r5, #0]
 80083ea:	6a21      	ldr	r1, [r4, #32]
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	d032      	beq.n	8008456 <__sflush_r+0x9a>
 80083f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	075a      	lsls	r2, r3, #29
 80083f6:	d505      	bpl.n	8008404 <__sflush_r+0x48>
 80083f8:	6863      	ldr	r3, [r4, #4]
 80083fa:	1ac0      	subs	r0, r0, r3
 80083fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083fe:	b10b      	cbz	r3, 8008404 <__sflush_r+0x48>
 8008400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008402:	1ac0      	subs	r0, r0, r3
 8008404:	2300      	movs	r3, #0
 8008406:	4602      	mov	r2, r0
 8008408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800840a:	6a21      	ldr	r1, [r4, #32]
 800840c:	4628      	mov	r0, r5
 800840e:	47b0      	blx	r6
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	d106      	bne.n	8008424 <__sflush_r+0x68>
 8008416:	6829      	ldr	r1, [r5, #0]
 8008418:	291d      	cmp	r1, #29
 800841a:	d82b      	bhi.n	8008474 <__sflush_r+0xb8>
 800841c:	4a29      	ldr	r2, [pc, #164]	; (80084c4 <__sflush_r+0x108>)
 800841e:	410a      	asrs	r2, r1
 8008420:	07d6      	lsls	r6, r2, #31
 8008422:	d427      	bmi.n	8008474 <__sflush_r+0xb8>
 8008424:	2200      	movs	r2, #0
 8008426:	6062      	str	r2, [r4, #4]
 8008428:	04d9      	lsls	r1, r3, #19
 800842a:	6922      	ldr	r2, [r4, #16]
 800842c:	6022      	str	r2, [r4, #0]
 800842e:	d504      	bpl.n	800843a <__sflush_r+0x7e>
 8008430:	1c42      	adds	r2, r0, #1
 8008432:	d101      	bne.n	8008438 <__sflush_r+0x7c>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b903      	cbnz	r3, 800843a <__sflush_r+0x7e>
 8008438:	6560      	str	r0, [r4, #84]	; 0x54
 800843a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800843c:	602f      	str	r7, [r5, #0]
 800843e:	2900      	cmp	r1, #0
 8008440:	d0c9      	beq.n	80083d6 <__sflush_r+0x1a>
 8008442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008446:	4299      	cmp	r1, r3
 8008448:	d002      	beq.n	8008450 <__sflush_r+0x94>
 800844a:	4628      	mov	r0, r5
 800844c:	f7fe fa1a 	bl	8006884 <_free_r>
 8008450:	2000      	movs	r0, #0
 8008452:	6360      	str	r0, [r4, #52]	; 0x34
 8008454:	e7c0      	b.n	80083d8 <__sflush_r+0x1c>
 8008456:	2301      	movs	r3, #1
 8008458:	4628      	mov	r0, r5
 800845a:	47b0      	blx	r6
 800845c:	1c41      	adds	r1, r0, #1
 800845e:	d1c8      	bne.n	80083f2 <__sflush_r+0x36>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0c5      	beq.n	80083f2 <__sflush_r+0x36>
 8008466:	2b1d      	cmp	r3, #29
 8008468:	d001      	beq.n	800846e <__sflush_r+0xb2>
 800846a:	2b16      	cmp	r3, #22
 800846c:	d101      	bne.n	8008472 <__sflush_r+0xb6>
 800846e:	602f      	str	r7, [r5, #0]
 8008470:	e7b1      	b.n	80083d6 <__sflush_r+0x1a>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	e7ad      	b.n	80083d8 <__sflush_r+0x1c>
 800847c:	690f      	ldr	r7, [r1, #16]
 800847e:	2f00      	cmp	r7, #0
 8008480:	d0a9      	beq.n	80083d6 <__sflush_r+0x1a>
 8008482:	0793      	lsls	r3, r2, #30
 8008484:	680e      	ldr	r6, [r1, #0]
 8008486:	bf08      	it	eq
 8008488:	694b      	ldreq	r3, [r1, #20]
 800848a:	600f      	str	r7, [r1, #0]
 800848c:	bf18      	it	ne
 800848e:	2300      	movne	r3, #0
 8008490:	eba6 0807 	sub.w	r8, r6, r7
 8008494:	608b      	str	r3, [r1, #8]
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	dd9c      	ble.n	80083d6 <__sflush_r+0x1a>
 800849c:	6a21      	ldr	r1, [r4, #32]
 800849e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084a0:	4643      	mov	r3, r8
 80084a2:	463a      	mov	r2, r7
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b0      	blx	r6
 80084a8:	2800      	cmp	r0, #0
 80084aa:	dc06      	bgt.n	80084ba <__sflush_r+0xfe>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	e78e      	b.n	80083d8 <__sflush_r+0x1c>
 80084ba:	4407      	add	r7, r0
 80084bc:	eba8 0800 	sub.w	r8, r8, r0
 80084c0:	e7e9      	b.n	8008496 <__sflush_r+0xda>
 80084c2:	bf00      	nop
 80084c4:	dfbffffe 	.word	0xdfbffffe

080084c8 <_fflush_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	690b      	ldr	r3, [r1, #16]
 80084cc:	4605      	mov	r5, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	b913      	cbnz	r3, 80084d8 <_fflush_r+0x10>
 80084d2:	2500      	movs	r5, #0
 80084d4:	4628      	mov	r0, r5
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	b118      	cbz	r0, 80084e2 <_fflush_r+0x1a>
 80084da:	6a03      	ldr	r3, [r0, #32]
 80084dc:	b90b      	cbnz	r3, 80084e2 <_fflush_r+0x1a>
 80084de:	f7fd fa35 	bl	800594c <__sinit>
 80084e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f3      	beq.n	80084d2 <_fflush_r+0xa>
 80084ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084ec:	07d0      	lsls	r0, r2, #31
 80084ee:	d404      	bmi.n	80084fa <_fflush_r+0x32>
 80084f0:	0599      	lsls	r1, r3, #22
 80084f2:	d402      	bmi.n	80084fa <_fflush_r+0x32>
 80084f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084f6:	f7fd fb40 	bl	8005b7a <__retarget_lock_acquire_recursive>
 80084fa:	4628      	mov	r0, r5
 80084fc:	4621      	mov	r1, r4
 80084fe:	f7ff ff5d 	bl	80083bc <__sflush_r>
 8008502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008504:	07da      	lsls	r2, r3, #31
 8008506:	4605      	mov	r5, r0
 8008508:	d4e4      	bmi.n	80084d4 <_fflush_r+0xc>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	059b      	lsls	r3, r3, #22
 800850e:	d4e1      	bmi.n	80084d4 <_fflush_r+0xc>
 8008510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008512:	f7fd fb33 	bl	8005b7c <__retarget_lock_release_recursive>
 8008516:	e7dd      	b.n	80084d4 <_fflush_r+0xc>

08008518 <memmove>:
 8008518:	4288      	cmp	r0, r1
 800851a:	b510      	push	{r4, lr}
 800851c:	eb01 0402 	add.w	r4, r1, r2
 8008520:	d902      	bls.n	8008528 <memmove+0x10>
 8008522:	4284      	cmp	r4, r0
 8008524:	4623      	mov	r3, r4
 8008526:	d807      	bhi.n	8008538 <memmove+0x20>
 8008528:	1e43      	subs	r3, r0, #1
 800852a:	42a1      	cmp	r1, r4
 800852c:	d008      	beq.n	8008540 <memmove+0x28>
 800852e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008536:	e7f8      	b.n	800852a <memmove+0x12>
 8008538:	4402      	add	r2, r0
 800853a:	4601      	mov	r1, r0
 800853c:	428a      	cmp	r2, r1
 800853e:	d100      	bne.n	8008542 <memmove+0x2a>
 8008540:	bd10      	pop	{r4, pc}
 8008542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800854a:	e7f7      	b.n	800853c <memmove+0x24>

0800854c <strncmp>:
 800854c:	b510      	push	{r4, lr}
 800854e:	b16a      	cbz	r2, 800856c <strncmp+0x20>
 8008550:	3901      	subs	r1, #1
 8008552:	1884      	adds	r4, r0, r2
 8008554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008558:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800855c:	429a      	cmp	r2, r3
 800855e:	d103      	bne.n	8008568 <strncmp+0x1c>
 8008560:	42a0      	cmp	r0, r4
 8008562:	d001      	beq.n	8008568 <strncmp+0x1c>
 8008564:	2a00      	cmp	r2, #0
 8008566:	d1f5      	bne.n	8008554 <strncmp+0x8>
 8008568:	1ad0      	subs	r0, r2, r3
 800856a:	bd10      	pop	{r4, pc}
 800856c:	4610      	mov	r0, r2
 800856e:	e7fc      	b.n	800856a <strncmp+0x1e>

08008570 <_sbrk_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d06      	ldr	r5, [pc, #24]	; (800858c <_sbrk_r+0x1c>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	f7f8 fef8 	bl	8001370 <_sbrk>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_sbrk_r+0x1a>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_sbrk_r+0x1a>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	2000080c 	.word	0x2000080c

08008590 <memcpy>:
 8008590:	440a      	add	r2, r1
 8008592:	4291      	cmp	r1, r2
 8008594:	f100 33ff 	add.w	r3, r0, #4294967295
 8008598:	d100      	bne.n	800859c <memcpy+0xc>
 800859a:	4770      	bx	lr
 800859c:	b510      	push	{r4, lr}
 800859e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085a6:	4291      	cmp	r1, r2
 80085a8:	d1f9      	bne.n	800859e <memcpy+0xe>
 80085aa:	bd10      	pop	{r4, pc}
 80085ac:	0000      	movs	r0, r0
	...

080085b0 <nan>:
 80085b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80085b8 <nan+0x8>
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	00000000 	.word	0x00000000
 80085bc:	7ff80000 	.word	0x7ff80000

080085c0 <__assert_func>:
 80085c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085c2:	4614      	mov	r4, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	4b09      	ldr	r3, [pc, #36]	; (80085ec <__assert_func+0x2c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4605      	mov	r5, r0
 80085cc:	68d8      	ldr	r0, [r3, #12]
 80085ce:	b14c      	cbz	r4, 80085e4 <__assert_func+0x24>
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <__assert_func+0x30>)
 80085d2:	9100      	str	r1, [sp, #0]
 80085d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085d8:	4906      	ldr	r1, [pc, #24]	; (80085f4 <__assert_func+0x34>)
 80085da:	462b      	mov	r3, r5
 80085dc:	f000 fbca 	bl	8008d74 <fiprintf>
 80085e0:	f000 fbda 	bl	8008d98 <abort>
 80085e4:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <__assert_func+0x38>)
 80085e6:	461c      	mov	r4, r3
 80085e8:	e7f3      	b.n	80085d2 <__assert_func+0x12>
 80085ea:	bf00      	nop
 80085ec:	20000064 	.word	0x20000064
 80085f0:	080096fa 	.word	0x080096fa
 80085f4:	08009707 	.word	0x08009707
 80085f8:	08009735 	.word	0x08009735

080085fc <_calloc_r>:
 80085fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085fe:	fba1 2402 	umull	r2, r4, r1, r2
 8008602:	b94c      	cbnz	r4, 8008618 <_calloc_r+0x1c>
 8008604:	4611      	mov	r1, r2
 8008606:	9201      	str	r2, [sp, #4]
 8008608:	f7fe f9b0 	bl	800696c <_malloc_r>
 800860c:	9a01      	ldr	r2, [sp, #4]
 800860e:	4605      	mov	r5, r0
 8008610:	b930      	cbnz	r0, 8008620 <_calloc_r+0x24>
 8008612:	4628      	mov	r0, r5
 8008614:	b003      	add	sp, #12
 8008616:	bd30      	pop	{r4, r5, pc}
 8008618:	220c      	movs	r2, #12
 800861a:	6002      	str	r2, [r0, #0]
 800861c:	2500      	movs	r5, #0
 800861e:	e7f8      	b.n	8008612 <_calloc_r+0x16>
 8008620:	4621      	mov	r1, r4
 8008622:	f7fd fa2c 	bl	8005a7e <memset>
 8008626:	e7f4      	b.n	8008612 <_calloc_r+0x16>

08008628 <rshift>:
 8008628:	6903      	ldr	r3, [r0, #16]
 800862a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800862e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008632:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008636:	f100 0414 	add.w	r4, r0, #20
 800863a:	dd45      	ble.n	80086c8 <rshift+0xa0>
 800863c:	f011 011f 	ands.w	r1, r1, #31
 8008640:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008644:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008648:	d10c      	bne.n	8008664 <rshift+0x3c>
 800864a:	f100 0710 	add.w	r7, r0, #16
 800864e:	4629      	mov	r1, r5
 8008650:	42b1      	cmp	r1, r6
 8008652:	d334      	bcc.n	80086be <rshift+0x96>
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	1eea      	subs	r2, r5, #3
 800865a:	4296      	cmp	r6, r2
 800865c:	bf38      	it	cc
 800865e:	2300      	movcc	r3, #0
 8008660:	4423      	add	r3, r4
 8008662:	e015      	b.n	8008690 <rshift+0x68>
 8008664:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008668:	f1c1 0820 	rsb	r8, r1, #32
 800866c:	40cf      	lsrs	r7, r1
 800866e:	f105 0e04 	add.w	lr, r5, #4
 8008672:	46a1      	mov	r9, r4
 8008674:	4576      	cmp	r6, lr
 8008676:	46f4      	mov	ip, lr
 8008678:	d815      	bhi.n	80086a6 <rshift+0x7e>
 800867a:	1a9a      	subs	r2, r3, r2
 800867c:	0092      	lsls	r2, r2, #2
 800867e:	3a04      	subs	r2, #4
 8008680:	3501      	adds	r5, #1
 8008682:	42ae      	cmp	r6, r5
 8008684:	bf38      	it	cc
 8008686:	2200      	movcc	r2, #0
 8008688:	18a3      	adds	r3, r4, r2
 800868a:	50a7      	str	r7, [r4, r2]
 800868c:	b107      	cbz	r7, 8008690 <rshift+0x68>
 800868e:	3304      	adds	r3, #4
 8008690:	1b1a      	subs	r2, r3, r4
 8008692:	42a3      	cmp	r3, r4
 8008694:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008698:	bf08      	it	eq
 800869a:	2300      	moveq	r3, #0
 800869c:	6102      	str	r2, [r0, #16]
 800869e:	bf08      	it	eq
 80086a0:	6143      	streq	r3, [r0, #20]
 80086a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a6:	f8dc c000 	ldr.w	ip, [ip]
 80086aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80086ae:	ea4c 0707 	orr.w	r7, ip, r7
 80086b2:	f849 7b04 	str.w	r7, [r9], #4
 80086b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086ba:	40cf      	lsrs	r7, r1
 80086bc:	e7da      	b.n	8008674 <rshift+0x4c>
 80086be:	f851 cb04 	ldr.w	ip, [r1], #4
 80086c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80086c6:	e7c3      	b.n	8008650 <rshift+0x28>
 80086c8:	4623      	mov	r3, r4
 80086ca:	e7e1      	b.n	8008690 <rshift+0x68>

080086cc <__hexdig_fun>:
 80086cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80086d0:	2b09      	cmp	r3, #9
 80086d2:	d802      	bhi.n	80086da <__hexdig_fun+0xe>
 80086d4:	3820      	subs	r0, #32
 80086d6:	b2c0      	uxtb	r0, r0
 80086d8:	4770      	bx	lr
 80086da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d801      	bhi.n	80086e6 <__hexdig_fun+0x1a>
 80086e2:	3847      	subs	r0, #71	; 0x47
 80086e4:	e7f7      	b.n	80086d6 <__hexdig_fun+0xa>
 80086e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d801      	bhi.n	80086f2 <__hexdig_fun+0x26>
 80086ee:	3827      	subs	r0, #39	; 0x27
 80086f0:	e7f1      	b.n	80086d6 <__hexdig_fun+0xa>
 80086f2:	2000      	movs	r0, #0
 80086f4:	4770      	bx	lr
	...

080086f8 <__gethex>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4617      	mov	r7, r2
 80086fe:	680a      	ldr	r2, [r1, #0]
 8008700:	b085      	sub	sp, #20
 8008702:	f102 0b02 	add.w	fp, r2, #2
 8008706:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800870a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800870e:	4681      	mov	r9, r0
 8008710:	468a      	mov	sl, r1
 8008712:	9302      	str	r3, [sp, #8]
 8008714:	32fe      	adds	r2, #254	; 0xfe
 8008716:	eb02 030b 	add.w	r3, r2, fp
 800871a:	46d8      	mov	r8, fp
 800871c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	2830      	cmp	r0, #48	; 0x30
 8008724:	d0f7      	beq.n	8008716 <__gethex+0x1e>
 8008726:	f7ff ffd1 	bl	80086cc <__hexdig_fun>
 800872a:	4604      	mov	r4, r0
 800872c:	2800      	cmp	r0, #0
 800872e:	d138      	bne.n	80087a2 <__gethex+0xaa>
 8008730:	49a7      	ldr	r1, [pc, #668]	; (80089d0 <__gethex+0x2d8>)
 8008732:	2201      	movs	r2, #1
 8008734:	4640      	mov	r0, r8
 8008736:	f7ff ff09 	bl	800854c <strncmp>
 800873a:	4606      	mov	r6, r0
 800873c:	2800      	cmp	r0, #0
 800873e:	d169      	bne.n	8008814 <__gethex+0x11c>
 8008740:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008744:	465d      	mov	r5, fp
 8008746:	f7ff ffc1 	bl	80086cc <__hexdig_fun>
 800874a:	2800      	cmp	r0, #0
 800874c:	d064      	beq.n	8008818 <__gethex+0x120>
 800874e:	465a      	mov	r2, fp
 8008750:	7810      	ldrb	r0, [r2, #0]
 8008752:	2830      	cmp	r0, #48	; 0x30
 8008754:	4690      	mov	r8, r2
 8008756:	f102 0201 	add.w	r2, r2, #1
 800875a:	d0f9      	beq.n	8008750 <__gethex+0x58>
 800875c:	f7ff ffb6 	bl	80086cc <__hexdig_fun>
 8008760:	2301      	movs	r3, #1
 8008762:	fab0 f480 	clz	r4, r0
 8008766:	0964      	lsrs	r4, r4, #5
 8008768:	465e      	mov	r6, fp
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	4642      	mov	r2, r8
 800876e:	4615      	mov	r5, r2
 8008770:	3201      	adds	r2, #1
 8008772:	7828      	ldrb	r0, [r5, #0]
 8008774:	f7ff ffaa 	bl	80086cc <__hexdig_fun>
 8008778:	2800      	cmp	r0, #0
 800877a:	d1f8      	bne.n	800876e <__gethex+0x76>
 800877c:	4994      	ldr	r1, [pc, #592]	; (80089d0 <__gethex+0x2d8>)
 800877e:	2201      	movs	r2, #1
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff fee3 	bl	800854c <strncmp>
 8008786:	b978      	cbnz	r0, 80087a8 <__gethex+0xb0>
 8008788:	b946      	cbnz	r6, 800879c <__gethex+0xa4>
 800878a:	1c6e      	adds	r6, r5, #1
 800878c:	4632      	mov	r2, r6
 800878e:	4615      	mov	r5, r2
 8008790:	3201      	adds	r2, #1
 8008792:	7828      	ldrb	r0, [r5, #0]
 8008794:	f7ff ff9a 	bl	80086cc <__hexdig_fun>
 8008798:	2800      	cmp	r0, #0
 800879a:	d1f8      	bne.n	800878e <__gethex+0x96>
 800879c:	1b73      	subs	r3, r6, r5
 800879e:	009e      	lsls	r6, r3, #2
 80087a0:	e004      	b.n	80087ac <__gethex+0xb4>
 80087a2:	2400      	movs	r4, #0
 80087a4:	4626      	mov	r6, r4
 80087a6:	e7e1      	b.n	800876c <__gethex+0x74>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	d1f7      	bne.n	800879c <__gethex+0xa4>
 80087ac:	782b      	ldrb	r3, [r5, #0]
 80087ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087b2:	2b50      	cmp	r3, #80	; 0x50
 80087b4:	d13d      	bne.n	8008832 <__gethex+0x13a>
 80087b6:	786b      	ldrb	r3, [r5, #1]
 80087b8:	2b2b      	cmp	r3, #43	; 0x2b
 80087ba:	d02f      	beq.n	800881c <__gethex+0x124>
 80087bc:	2b2d      	cmp	r3, #45	; 0x2d
 80087be:	d031      	beq.n	8008824 <__gethex+0x12c>
 80087c0:	1c69      	adds	r1, r5, #1
 80087c2:	f04f 0b00 	mov.w	fp, #0
 80087c6:	7808      	ldrb	r0, [r1, #0]
 80087c8:	f7ff ff80 	bl	80086cc <__hexdig_fun>
 80087cc:	1e42      	subs	r2, r0, #1
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	2a18      	cmp	r2, #24
 80087d2:	d82e      	bhi.n	8008832 <__gethex+0x13a>
 80087d4:	f1a0 0210 	sub.w	r2, r0, #16
 80087d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087dc:	f7ff ff76 	bl	80086cc <__hexdig_fun>
 80087e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80087e4:	fa5f fc8c 	uxtb.w	ip, ip
 80087e8:	f1bc 0f18 	cmp.w	ip, #24
 80087ec:	d91d      	bls.n	800882a <__gethex+0x132>
 80087ee:	f1bb 0f00 	cmp.w	fp, #0
 80087f2:	d000      	beq.n	80087f6 <__gethex+0xfe>
 80087f4:	4252      	negs	r2, r2
 80087f6:	4416      	add	r6, r2
 80087f8:	f8ca 1000 	str.w	r1, [sl]
 80087fc:	b1dc      	cbz	r4, 8008836 <__gethex+0x13e>
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf14      	ite	ne
 8008804:	f04f 0800 	movne.w	r8, #0
 8008808:	f04f 0806 	moveq.w	r8, #6
 800880c:	4640      	mov	r0, r8
 800880e:	b005      	add	sp, #20
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	4645      	mov	r5, r8
 8008816:	4626      	mov	r6, r4
 8008818:	2401      	movs	r4, #1
 800881a:	e7c7      	b.n	80087ac <__gethex+0xb4>
 800881c:	f04f 0b00 	mov.w	fp, #0
 8008820:	1ca9      	adds	r1, r5, #2
 8008822:	e7d0      	b.n	80087c6 <__gethex+0xce>
 8008824:	f04f 0b01 	mov.w	fp, #1
 8008828:	e7fa      	b.n	8008820 <__gethex+0x128>
 800882a:	230a      	movs	r3, #10
 800882c:	fb03 0002 	mla	r0, r3, r2, r0
 8008830:	e7d0      	b.n	80087d4 <__gethex+0xdc>
 8008832:	4629      	mov	r1, r5
 8008834:	e7e0      	b.n	80087f8 <__gethex+0x100>
 8008836:	eba5 0308 	sub.w	r3, r5, r8
 800883a:	3b01      	subs	r3, #1
 800883c:	4621      	mov	r1, r4
 800883e:	2b07      	cmp	r3, #7
 8008840:	dc0a      	bgt.n	8008858 <__gethex+0x160>
 8008842:	4648      	mov	r0, r9
 8008844:	f7fe f91e 	bl	8006a84 <_Balloc>
 8008848:	4604      	mov	r4, r0
 800884a:	b940      	cbnz	r0, 800885e <__gethex+0x166>
 800884c:	4b61      	ldr	r3, [pc, #388]	; (80089d4 <__gethex+0x2dc>)
 800884e:	4602      	mov	r2, r0
 8008850:	21e4      	movs	r1, #228	; 0xe4
 8008852:	4861      	ldr	r0, [pc, #388]	; (80089d8 <__gethex+0x2e0>)
 8008854:	f7ff feb4 	bl	80085c0 <__assert_func>
 8008858:	3101      	adds	r1, #1
 800885a:	105b      	asrs	r3, r3, #1
 800885c:	e7ef      	b.n	800883e <__gethex+0x146>
 800885e:	f100 0a14 	add.w	sl, r0, #20
 8008862:	2300      	movs	r3, #0
 8008864:	495a      	ldr	r1, [pc, #360]	; (80089d0 <__gethex+0x2d8>)
 8008866:	f8cd a004 	str.w	sl, [sp, #4]
 800886a:	469b      	mov	fp, r3
 800886c:	45a8      	cmp	r8, r5
 800886e:	d342      	bcc.n	80088f6 <__gethex+0x1fe>
 8008870:	9801      	ldr	r0, [sp, #4]
 8008872:	f840 bb04 	str.w	fp, [r0], #4
 8008876:	eba0 000a 	sub.w	r0, r0, sl
 800887a:	1080      	asrs	r0, r0, #2
 800887c:	6120      	str	r0, [r4, #16]
 800887e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008882:	4658      	mov	r0, fp
 8008884:	f7fe f9f0 	bl	8006c68 <__hi0bits>
 8008888:	683d      	ldr	r5, [r7, #0]
 800888a:	eba8 0000 	sub.w	r0, r8, r0
 800888e:	42a8      	cmp	r0, r5
 8008890:	dd59      	ble.n	8008946 <__gethex+0x24e>
 8008892:	eba0 0805 	sub.w	r8, r0, r5
 8008896:	4641      	mov	r1, r8
 8008898:	4620      	mov	r0, r4
 800889a:	f7fe fd7f 	bl	800739c <__any_on>
 800889e:	4683      	mov	fp, r0
 80088a0:	b1b8      	cbz	r0, 80088d2 <__gethex+0x1da>
 80088a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80088a6:	1159      	asrs	r1, r3, #5
 80088a8:	f003 021f 	and.w	r2, r3, #31
 80088ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088b0:	f04f 0b01 	mov.w	fp, #1
 80088b4:	fa0b f202 	lsl.w	r2, fp, r2
 80088b8:	420a      	tst	r2, r1
 80088ba:	d00a      	beq.n	80088d2 <__gethex+0x1da>
 80088bc:	455b      	cmp	r3, fp
 80088be:	dd06      	ble.n	80088ce <__gethex+0x1d6>
 80088c0:	f1a8 0102 	sub.w	r1, r8, #2
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7fe fd69 	bl	800739c <__any_on>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d138      	bne.n	8008940 <__gethex+0x248>
 80088ce:	f04f 0b02 	mov.w	fp, #2
 80088d2:	4641      	mov	r1, r8
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff fea7 	bl	8008628 <rshift>
 80088da:	4446      	add	r6, r8
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	42b3      	cmp	r3, r6
 80088e0:	da41      	bge.n	8008966 <__gethex+0x26e>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4648      	mov	r0, r9
 80088e6:	f7fe f90d 	bl	8006b04 <_Bfree>
 80088ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ec:	2300      	movs	r3, #0
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80088f4:	e78a      	b.n	800880c <__gethex+0x114>
 80088f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80088fa:	2a2e      	cmp	r2, #46	; 0x2e
 80088fc:	d014      	beq.n	8008928 <__gethex+0x230>
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d106      	bne.n	8008910 <__gethex+0x218>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	f843 bb04 	str.w	fp, [r3], #4
 8008908:	f04f 0b00 	mov.w	fp, #0
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	465b      	mov	r3, fp
 8008910:	7828      	ldrb	r0, [r5, #0]
 8008912:	9303      	str	r3, [sp, #12]
 8008914:	f7ff feda 	bl	80086cc <__hexdig_fun>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	f000 000f 	and.w	r0, r0, #15
 800891e:	4098      	lsls	r0, r3
 8008920:	ea4b 0b00 	orr.w	fp, fp, r0
 8008924:	3304      	adds	r3, #4
 8008926:	e7a1      	b.n	800886c <__gethex+0x174>
 8008928:	45a8      	cmp	r8, r5
 800892a:	d8e8      	bhi.n	80088fe <__gethex+0x206>
 800892c:	2201      	movs	r2, #1
 800892e:	4628      	mov	r0, r5
 8008930:	9303      	str	r3, [sp, #12]
 8008932:	f7ff fe0b 	bl	800854c <strncmp>
 8008936:	4926      	ldr	r1, [pc, #152]	; (80089d0 <__gethex+0x2d8>)
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	2800      	cmp	r0, #0
 800893c:	d1df      	bne.n	80088fe <__gethex+0x206>
 800893e:	e795      	b.n	800886c <__gethex+0x174>
 8008940:	f04f 0b03 	mov.w	fp, #3
 8008944:	e7c5      	b.n	80088d2 <__gethex+0x1da>
 8008946:	da0b      	bge.n	8008960 <__gethex+0x268>
 8008948:	eba5 0800 	sub.w	r8, r5, r0
 800894c:	4621      	mov	r1, r4
 800894e:	4642      	mov	r2, r8
 8008950:	4648      	mov	r0, r9
 8008952:	f7fe faf1 	bl	8006f38 <__lshift>
 8008956:	eba6 0608 	sub.w	r6, r6, r8
 800895a:	4604      	mov	r4, r0
 800895c:	f100 0a14 	add.w	sl, r0, #20
 8008960:	f04f 0b00 	mov.w	fp, #0
 8008964:	e7ba      	b.n	80088dc <__gethex+0x1e4>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	42b3      	cmp	r3, r6
 800896a:	dd73      	ble.n	8008a54 <__gethex+0x35c>
 800896c:	1b9e      	subs	r6, r3, r6
 800896e:	42b5      	cmp	r5, r6
 8008970:	dc34      	bgt.n	80089dc <__gethex+0x2e4>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d023      	beq.n	80089c0 <__gethex+0x2c8>
 8008978:	2b03      	cmp	r3, #3
 800897a:	d025      	beq.n	80089c8 <__gethex+0x2d0>
 800897c:	2b01      	cmp	r3, #1
 800897e:	d115      	bne.n	80089ac <__gethex+0x2b4>
 8008980:	42b5      	cmp	r5, r6
 8008982:	d113      	bne.n	80089ac <__gethex+0x2b4>
 8008984:	2d01      	cmp	r5, #1
 8008986:	d10b      	bne.n	80089a0 <__gethex+0x2a8>
 8008988:	9a02      	ldr	r2, [sp, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	2301      	movs	r3, #1
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	f8ca 3000 	str.w	r3, [sl]
 8008996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008998:	f04f 0862 	mov.w	r8, #98	; 0x62
 800899c:	601c      	str	r4, [r3, #0]
 800899e:	e735      	b.n	800880c <__gethex+0x114>
 80089a0:	1e69      	subs	r1, r5, #1
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7fe fcfa 	bl	800739c <__any_on>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d1ed      	bne.n	8008988 <__gethex+0x290>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4648      	mov	r0, r9
 80089b0:	f7fe f8a8 	bl	8006b04 <_Bfree>
 80089b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089b6:	2300      	movs	r3, #0
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 80089be:	e725      	b.n	800880c <__gethex+0x114>
 80089c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f2      	bne.n	80089ac <__gethex+0x2b4>
 80089c6:	e7df      	b.n	8008988 <__gethex+0x290>
 80089c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1dc      	bne.n	8008988 <__gethex+0x290>
 80089ce:	e7ed      	b.n	80089ac <__gethex+0x2b4>
 80089d0:	0800958c 	.word	0x0800958c
 80089d4:	08009425 	.word	0x08009425
 80089d8:	08009736 	.word	0x08009736
 80089dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80089e0:	f1bb 0f00 	cmp.w	fp, #0
 80089e4:	d133      	bne.n	8008a4e <__gethex+0x356>
 80089e6:	f1b8 0f00 	cmp.w	r8, #0
 80089ea:	d004      	beq.n	80089f6 <__gethex+0x2fe>
 80089ec:	4641      	mov	r1, r8
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7fe fcd4 	bl	800739c <__any_on>
 80089f4:	4683      	mov	fp, r0
 80089f6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80089fa:	2301      	movs	r3, #1
 80089fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a00:	f008 081f 	and.w	r8, r8, #31
 8008a04:	fa03 f308 	lsl.w	r3, r3, r8
 8008a08:	4213      	tst	r3, r2
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	bf18      	it	ne
 8008a10:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a14:	1bad      	subs	r5, r5, r6
 8008a16:	f7ff fe07 	bl	8008628 <rshift>
 8008a1a:	687e      	ldr	r6, [r7, #4]
 8008a1c:	f04f 0802 	mov.w	r8, #2
 8008a20:	f1bb 0f00 	cmp.w	fp, #0
 8008a24:	d04a      	beq.n	8008abc <__gethex+0x3c4>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d016      	beq.n	8008a5a <__gethex+0x362>
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d018      	beq.n	8008a62 <__gethex+0x36a>
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d109      	bne.n	8008a48 <__gethex+0x350>
 8008a34:	f01b 0f02 	tst.w	fp, #2
 8008a38:	d006      	beq.n	8008a48 <__gethex+0x350>
 8008a3a:	f8da 3000 	ldr.w	r3, [sl]
 8008a3e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008a42:	f01b 0f01 	tst.w	fp, #1
 8008a46:	d10f      	bne.n	8008a68 <__gethex+0x370>
 8008a48:	f048 0810 	orr.w	r8, r8, #16
 8008a4c:	e036      	b.n	8008abc <__gethex+0x3c4>
 8008a4e:	f04f 0b01 	mov.w	fp, #1
 8008a52:	e7d0      	b.n	80089f6 <__gethex+0x2fe>
 8008a54:	f04f 0801 	mov.w	r8, #1
 8008a58:	e7e2      	b.n	8008a20 <__gethex+0x328>
 8008a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a5c:	f1c3 0301 	rsb	r3, r3, #1
 8008a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0ef      	beq.n	8008a48 <__gethex+0x350>
 8008a68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a6c:	f104 0214 	add.w	r2, r4, #20
 8008a70:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4694      	mov	ip, r2
 8008a7e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008a82:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008a86:	d01e      	beq.n	8008ac6 <__gethex+0x3ce>
 8008a88:	3101      	adds	r1, #1
 8008a8a:	f8cc 1000 	str.w	r1, [ip]
 8008a8e:	f1b8 0f02 	cmp.w	r8, #2
 8008a92:	f104 0214 	add.w	r2, r4, #20
 8008a96:	d13d      	bne.n	8008b14 <__gethex+0x41c>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	d10b      	bne.n	8008ab8 <__gethex+0x3c0>
 8008aa0:	1169      	asrs	r1, r5, #5
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f005 051f 	and.w	r5, r5, #31
 8008aa8:	fa03 f505 	lsl.w	r5, r3, r5
 8008aac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ab0:	421d      	tst	r5, r3
 8008ab2:	bf18      	it	ne
 8008ab4:	f04f 0801 	movne.w	r8, #1
 8008ab8:	f048 0820 	orr.w	r8, r8, #32
 8008abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008abe:	601c      	str	r4, [r3, #0]
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	601e      	str	r6, [r3, #0]
 8008ac4:	e6a2      	b.n	800880c <__gethex+0x114>
 8008ac6:	4290      	cmp	r0, r2
 8008ac8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008acc:	d8d6      	bhi.n	8008a7c <__gethex+0x384>
 8008ace:	68a2      	ldr	r2, [r4, #8]
 8008ad0:	4593      	cmp	fp, r2
 8008ad2:	db17      	blt.n	8008b04 <__gethex+0x40c>
 8008ad4:	6861      	ldr	r1, [r4, #4]
 8008ad6:	4648      	mov	r0, r9
 8008ad8:	3101      	adds	r1, #1
 8008ada:	f7fd ffd3 	bl	8006a84 <_Balloc>
 8008ade:	4682      	mov	sl, r0
 8008ae0:	b918      	cbnz	r0, 8008aea <__gethex+0x3f2>
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	; (8008b50 <__gethex+0x458>)
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	2184      	movs	r1, #132	; 0x84
 8008ae8:	e6b3      	b.n	8008852 <__gethex+0x15a>
 8008aea:	6922      	ldr	r2, [r4, #16]
 8008aec:	3202      	adds	r2, #2
 8008aee:	f104 010c 	add.w	r1, r4, #12
 8008af2:	0092      	lsls	r2, r2, #2
 8008af4:	300c      	adds	r0, #12
 8008af6:	f7ff fd4b 	bl	8008590 <memcpy>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4648      	mov	r0, r9
 8008afe:	f7fe f801 	bl	8006b04 <_Bfree>
 8008b02:	4654      	mov	r4, sl
 8008b04:	6922      	ldr	r2, [r4, #16]
 8008b06:	1c51      	adds	r1, r2, #1
 8008b08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b0c:	6121      	str	r1, [r4, #16]
 8008b0e:	2101      	movs	r1, #1
 8008b10:	6151      	str	r1, [r2, #20]
 8008b12:	e7bc      	b.n	8008a8e <__gethex+0x396>
 8008b14:	6921      	ldr	r1, [r4, #16]
 8008b16:	4559      	cmp	r1, fp
 8008b18:	dd0b      	ble.n	8008b32 <__gethex+0x43a>
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7ff fd83 	bl	8008628 <rshift>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3601      	adds	r6, #1
 8008b26:	42b3      	cmp	r3, r6
 8008b28:	f6ff aedb 	blt.w	80088e2 <__gethex+0x1ea>
 8008b2c:	f04f 0801 	mov.w	r8, #1
 8008b30:	e7c2      	b.n	8008ab8 <__gethex+0x3c0>
 8008b32:	f015 051f 	ands.w	r5, r5, #31
 8008b36:	d0f9      	beq.n	8008b2c <__gethex+0x434>
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	441a      	add	r2, r3
 8008b3c:	f1c5 0520 	rsb	r5, r5, #32
 8008b40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008b44:	f7fe f890 	bl	8006c68 <__hi0bits>
 8008b48:	42a8      	cmp	r0, r5
 8008b4a:	dbe6      	blt.n	8008b1a <__gethex+0x422>
 8008b4c:	e7ee      	b.n	8008b2c <__gethex+0x434>
 8008b4e:	bf00      	nop
 8008b50:	08009425 	.word	0x08009425

08008b54 <L_shift>:
 8008b54:	f1c2 0208 	rsb	r2, r2, #8
 8008b58:	0092      	lsls	r2, r2, #2
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	f1c2 0620 	rsb	r6, r2, #32
 8008b60:	6843      	ldr	r3, [r0, #4]
 8008b62:	6804      	ldr	r4, [r0, #0]
 8008b64:	fa03 f506 	lsl.w	r5, r3, r6
 8008b68:	432c      	orrs	r4, r5
 8008b6a:	40d3      	lsrs	r3, r2
 8008b6c:	6004      	str	r4, [r0, #0]
 8008b6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b72:	4288      	cmp	r0, r1
 8008b74:	d3f4      	bcc.n	8008b60 <L_shift+0xc>
 8008b76:	bd70      	pop	{r4, r5, r6, pc}

08008b78 <__match>:
 8008b78:	b530      	push	{r4, r5, lr}
 8008b7a:	6803      	ldr	r3, [r0, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b82:	b914      	cbnz	r4, 8008b8a <__match+0x12>
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	2001      	movs	r0, #1
 8008b88:	bd30      	pop	{r4, r5, pc}
 8008b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b92:	2d19      	cmp	r5, #25
 8008b94:	bf98      	it	ls
 8008b96:	3220      	addls	r2, #32
 8008b98:	42a2      	cmp	r2, r4
 8008b9a:	d0f0      	beq.n	8008b7e <__match+0x6>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e7f3      	b.n	8008b88 <__match+0x10>

08008ba0 <__hexnan>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	680b      	ldr	r3, [r1, #0]
 8008ba6:	6801      	ldr	r1, [r0, #0]
 8008ba8:	115e      	asrs	r6, r3, #5
 8008baa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bae:	f013 031f 	ands.w	r3, r3, #31
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	bf18      	it	ne
 8008bb6:	3604      	addne	r6, #4
 8008bb8:	2500      	movs	r5, #0
 8008bba:	1f37      	subs	r7, r6, #4
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	4690      	mov	r8, r2
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bc6:	46b9      	mov	r9, r7
 8008bc8:	463c      	mov	r4, r7
 8008bca:	9502      	str	r5, [sp, #8]
 8008bcc:	46ab      	mov	fp, r5
 8008bce:	784a      	ldrb	r2, [r1, #1]
 8008bd0:	1c4b      	adds	r3, r1, #1
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	b342      	cbz	r2, 8008c28 <__hexnan+0x88>
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	9105      	str	r1, [sp, #20]
 8008bda:	9204      	str	r2, [sp, #16]
 8008bdc:	f7ff fd76 	bl	80086cc <__hexdig_fun>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d14f      	bne.n	8008c84 <__hexnan+0xe4>
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	9905      	ldr	r1, [sp, #20]
 8008be8:	2a20      	cmp	r2, #32
 8008bea:	d818      	bhi.n	8008c1e <__hexnan+0x7e>
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	459b      	cmp	fp, r3
 8008bf0:	dd13      	ble.n	8008c1a <__hexnan+0x7a>
 8008bf2:	454c      	cmp	r4, r9
 8008bf4:	d206      	bcs.n	8008c04 <__hexnan+0x64>
 8008bf6:	2d07      	cmp	r5, #7
 8008bf8:	dc04      	bgt.n	8008c04 <__hexnan+0x64>
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff ffa8 	bl	8008b54 <L_shift>
 8008c04:	4544      	cmp	r4, r8
 8008c06:	d950      	bls.n	8008caa <__hexnan+0x10a>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c12:	f8cd b008 	str.w	fp, [sp, #8]
 8008c16:	464c      	mov	r4, r9
 8008c18:	461d      	mov	r5, r3
 8008c1a:	9903      	ldr	r1, [sp, #12]
 8008c1c:	e7d7      	b.n	8008bce <__hexnan+0x2e>
 8008c1e:	2a29      	cmp	r2, #41	; 0x29
 8008c20:	d155      	bne.n	8008cce <__hexnan+0x12e>
 8008c22:	3102      	adds	r1, #2
 8008c24:	f8ca 1000 	str.w	r1, [sl]
 8008c28:	f1bb 0f00 	cmp.w	fp, #0
 8008c2c:	d04f      	beq.n	8008cce <__hexnan+0x12e>
 8008c2e:	454c      	cmp	r4, r9
 8008c30:	d206      	bcs.n	8008c40 <__hexnan+0xa0>
 8008c32:	2d07      	cmp	r5, #7
 8008c34:	dc04      	bgt.n	8008c40 <__hexnan+0xa0>
 8008c36:	462a      	mov	r2, r5
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7ff ff8a 	bl	8008b54 <L_shift>
 8008c40:	4544      	cmp	r4, r8
 8008c42:	d934      	bls.n	8008cae <__hexnan+0x10e>
 8008c44:	f1a8 0204 	sub.w	r2, r8, #4
 8008c48:	4623      	mov	r3, r4
 8008c4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c52:	429f      	cmp	r7, r3
 8008c54:	d2f9      	bcs.n	8008c4a <__hexnan+0xaa>
 8008c56:	1b3b      	subs	r3, r7, r4
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	3e03      	subs	r6, #3
 8008c60:	3401      	adds	r4, #1
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	bf38      	it	cc
 8008c66:	2304      	movcc	r3, #4
 8008c68:	4443      	add	r3, r8
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f843 2b04 	str.w	r2, [r3], #4
 8008c70:	429f      	cmp	r7, r3
 8008c72:	d2fb      	bcs.n	8008c6c <__hexnan+0xcc>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	b91b      	cbnz	r3, 8008c80 <__hexnan+0xe0>
 8008c78:	4547      	cmp	r7, r8
 8008c7a:	d126      	bne.n	8008cca <__hexnan+0x12a>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	2005      	movs	r0, #5
 8008c82:	e025      	b.n	8008cd0 <__hexnan+0x130>
 8008c84:	3501      	adds	r5, #1
 8008c86:	2d08      	cmp	r5, #8
 8008c88:	f10b 0b01 	add.w	fp, fp, #1
 8008c8c:	dd06      	ble.n	8008c9c <__hexnan+0xfc>
 8008c8e:	4544      	cmp	r4, r8
 8008c90:	d9c3      	bls.n	8008c1a <__hexnan+0x7a>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c98:	2501      	movs	r5, #1
 8008c9a:	3c04      	subs	r4, #4
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	f000 000f 	and.w	r0, r0, #15
 8008ca2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ca6:	6020      	str	r0, [r4, #0]
 8008ca8:	e7b7      	b.n	8008c1a <__hexnan+0x7a>
 8008caa:	2508      	movs	r5, #8
 8008cac:	e7b5      	b.n	8008c1a <__hexnan+0x7a>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0df      	beq.n	8008c74 <__hexnan+0xd4>
 8008cb4:	f1c3 0320 	rsb	r3, r3, #32
 8008cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbc:	40da      	lsrs	r2, r3
 8008cbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008cc8:	e7d4      	b.n	8008c74 <__hexnan+0xd4>
 8008cca:	3f04      	subs	r7, #4
 8008ccc:	e7d2      	b.n	8008c74 <__hexnan+0xd4>
 8008cce:	2004      	movs	r0, #4
 8008cd0:	b007      	add	sp, #28
 8008cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cd6 <__ascii_mbtowc>:
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	b901      	cbnz	r1, 8008cdc <__ascii_mbtowc+0x6>
 8008cda:	a901      	add	r1, sp, #4
 8008cdc:	b142      	cbz	r2, 8008cf0 <__ascii_mbtowc+0x1a>
 8008cde:	b14b      	cbz	r3, 8008cf4 <__ascii_mbtowc+0x1e>
 8008ce0:	7813      	ldrb	r3, [r2, #0]
 8008ce2:	600b      	str	r3, [r1, #0]
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	1e10      	subs	r0, r2, #0
 8008ce8:	bf18      	it	ne
 8008cea:	2001      	movne	r0, #1
 8008cec:	b002      	add	sp, #8
 8008cee:	4770      	bx	lr
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	e7fb      	b.n	8008cec <__ascii_mbtowc+0x16>
 8008cf4:	f06f 0001 	mvn.w	r0, #1
 8008cf8:	e7f8      	b.n	8008cec <__ascii_mbtowc+0x16>

08008cfa <_realloc_r>:
 8008cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfe:	4680      	mov	r8, r0
 8008d00:	4614      	mov	r4, r2
 8008d02:	460e      	mov	r6, r1
 8008d04:	b921      	cbnz	r1, 8008d10 <_realloc_r+0x16>
 8008d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	f7fd be2e 	b.w	800696c <_malloc_r>
 8008d10:	b92a      	cbnz	r2, 8008d1e <_realloc_r+0x24>
 8008d12:	f7fd fdb7 	bl	8006884 <_free_r>
 8008d16:	4625      	mov	r5, r4
 8008d18:	4628      	mov	r0, r5
 8008d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1e:	f000 f842 	bl	8008da6 <_malloc_usable_size_r>
 8008d22:	4284      	cmp	r4, r0
 8008d24:	4607      	mov	r7, r0
 8008d26:	d802      	bhi.n	8008d2e <_realloc_r+0x34>
 8008d28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d2c:	d812      	bhi.n	8008d54 <_realloc_r+0x5a>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4640      	mov	r0, r8
 8008d32:	f7fd fe1b 	bl	800696c <_malloc_r>
 8008d36:	4605      	mov	r5, r0
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d0ed      	beq.n	8008d18 <_realloc_r+0x1e>
 8008d3c:	42bc      	cmp	r4, r7
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4631      	mov	r1, r6
 8008d42:	bf28      	it	cs
 8008d44:	463a      	movcs	r2, r7
 8008d46:	f7ff fc23 	bl	8008590 <memcpy>
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	f7fd fd99 	bl	8006884 <_free_r>
 8008d52:	e7e1      	b.n	8008d18 <_realloc_r+0x1e>
 8008d54:	4635      	mov	r5, r6
 8008d56:	e7df      	b.n	8008d18 <_realloc_r+0x1e>

08008d58 <__ascii_wctomb>:
 8008d58:	b149      	cbz	r1, 8008d6e <__ascii_wctomb+0x16>
 8008d5a:	2aff      	cmp	r2, #255	; 0xff
 8008d5c:	bf85      	ittet	hi
 8008d5e:	238a      	movhi	r3, #138	; 0x8a
 8008d60:	6003      	strhi	r3, [r0, #0]
 8008d62:	700a      	strbls	r2, [r1, #0]
 8008d64:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d68:	bf98      	it	ls
 8008d6a:	2001      	movls	r0, #1
 8008d6c:	4770      	bx	lr
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4770      	bx	lr
	...

08008d74 <fiprintf>:
 8008d74:	b40e      	push	{r1, r2, r3}
 8008d76:	b503      	push	{r0, r1, lr}
 8008d78:	4601      	mov	r1, r0
 8008d7a:	ab03      	add	r3, sp, #12
 8008d7c:	4805      	ldr	r0, [pc, #20]	; (8008d94 <fiprintf+0x20>)
 8008d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d82:	6800      	ldr	r0, [r0, #0]
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	f000 f83f 	bl	8008e08 <_vfiprintf_r>
 8008d8a:	b002      	add	sp, #8
 8008d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d90:	b003      	add	sp, #12
 8008d92:	4770      	bx	lr
 8008d94:	20000064 	.word	0x20000064

08008d98 <abort>:
 8008d98:	b508      	push	{r3, lr}
 8008d9a:	2006      	movs	r0, #6
 8008d9c:	f000 fa0c 	bl	80091b8 <raise>
 8008da0:	2001      	movs	r0, #1
 8008da2:	f7f8 fa6d 	bl	8001280 <_exit>

08008da6 <_malloc_usable_size_r>:
 8008da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008daa:	1f18      	subs	r0, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfbc      	itt	lt
 8008db0:	580b      	ldrlt	r3, [r1, r0]
 8008db2:	18c0      	addlt	r0, r0, r3
 8008db4:	4770      	bx	lr

08008db6 <__sfputc_r>:
 8008db6:	6893      	ldr	r3, [r2, #8]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	b410      	push	{r4}
 8008dbe:	6093      	str	r3, [r2, #8]
 8008dc0:	da08      	bge.n	8008dd4 <__sfputc_r+0x1e>
 8008dc2:	6994      	ldr	r4, [r2, #24]
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	db01      	blt.n	8008dcc <__sfputc_r+0x16>
 8008dc8:	290a      	cmp	r1, #10
 8008dca:	d103      	bne.n	8008dd4 <__sfputc_r+0x1e>
 8008dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd0:	f000 b934 	b.w	800903c <__swbuf_r>
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	1c58      	adds	r0, r3, #1
 8008dd8:	6010      	str	r0, [r2, #0]
 8008dda:	7019      	strb	r1, [r3, #0]
 8008ddc:	4608      	mov	r0, r1
 8008dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <__sfputs_r>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	4614      	mov	r4, r2
 8008dec:	18d5      	adds	r5, r2, r3
 8008dee:	42ac      	cmp	r4, r5
 8008df0:	d101      	bne.n	8008df6 <__sfputs_r+0x12>
 8008df2:	2000      	movs	r0, #0
 8008df4:	e007      	b.n	8008e06 <__sfputs_r+0x22>
 8008df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfa:	463a      	mov	r2, r7
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ffda 	bl	8008db6 <__sfputc_r>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d1f3      	bne.n	8008dee <__sfputs_r+0xa>
 8008e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e08 <_vfiprintf_r>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	b09d      	sub	sp, #116	; 0x74
 8008e10:	4614      	mov	r4, r2
 8008e12:	4698      	mov	r8, r3
 8008e14:	4606      	mov	r6, r0
 8008e16:	b118      	cbz	r0, 8008e20 <_vfiprintf_r+0x18>
 8008e18:	6a03      	ldr	r3, [r0, #32]
 8008e1a:	b90b      	cbnz	r3, 8008e20 <_vfiprintf_r+0x18>
 8008e1c:	f7fc fd96 	bl	800594c <__sinit>
 8008e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e22:	07d9      	lsls	r1, r3, #31
 8008e24:	d405      	bmi.n	8008e32 <_vfiprintf_r+0x2a>
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	059a      	lsls	r2, r3, #22
 8008e2a:	d402      	bmi.n	8008e32 <_vfiprintf_r+0x2a>
 8008e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2e:	f7fc fea4 	bl	8005b7a <__retarget_lock_acquire_recursive>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	071b      	lsls	r3, r3, #28
 8008e36:	d501      	bpl.n	8008e3c <_vfiprintf_r+0x34>
 8008e38:	692b      	ldr	r3, [r5, #16]
 8008e3a:	b99b      	cbnz	r3, 8008e64 <_vfiprintf_r+0x5c>
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f000 f93a 	bl	80090b8 <__swsetup_r>
 8008e44:	b170      	cbz	r0, 8008e64 <_vfiprintf_r+0x5c>
 8008e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e48:	07dc      	lsls	r4, r3, #31
 8008e4a:	d504      	bpl.n	8008e56 <_vfiprintf_r+0x4e>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	b01d      	add	sp, #116	; 0x74
 8008e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	0598      	lsls	r0, r3, #22
 8008e5a:	d4f7      	bmi.n	8008e4c <_vfiprintf_r+0x44>
 8008e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e5e:	f7fc fe8d 	bl	8005b7c <__retarget_lock_release_recursive>
 8008e62:	e7f3      	b.n	8008e4c <_vfiprintf_r+0x44>
 8008e64:	2300      	movs	r3, #0
 8008e66:	9309      	str	r3, [sp, #36]	; 0x24
 8008e68:	2320      	movs	r3, #32
 8008e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e72:	2330      	movs	r3, #48	; 0x30
 8008e74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009028 <_vfiprintf_r+0x220>
 8008e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e7c:	f04f 0901 	mov.w	r9, #1
 8008e80:	4623      	mov	r3, r4
 8008e82:	469a      	mov	sl, r3
 8008e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e88:	b10a      	cbz	r2, 8008e8e <_vfiprintf_r+0x86>
 8008e8a:	2a25      	cmp	r2, #37	; 0x25
 8008e8c:	d1f9      	bne.n	8008e82 <_vfiprintf_r+0x7a>
 8008e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e92:	d00b      	beq.n	8008eac <_vfiprintf_r+0xa4>
 8008e94:	465b      	mov	r3, fp
 8008e96:	4622      	mov	r2, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7ff ffa2 	bl	8008de4 <__sfputs_r>
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f000 80a9 	beq.w	8008ff8 <_vfiprintf_r+0x1f0>
 8008ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea8:	445a      	add	r2, fp
 8008eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8008eac:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 80a1 	beq.w	8008ff8 <_vfiprintf_r+0x1f0>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ec0:	f10a 0a01 	add.w	sl, sl, #1
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ece:	4654      	mov	r4, sl
 8008ed0:	2205      	movs	r2, #5
 8008ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed6:	4854      	ldr	r0, [pc, #336]	; (8009028 <_vfiprintf_r+0x220>)
 8008ed8:	f7f7 f97a 	bl	80001d0 <memchr>
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	b9d8      	cbnz	r0, 8008f18 <_vfiprintf_r+0x110>
 8008ee0:	06d1      	lsls	r1, r2, #27
 8008ee2:	bf44      	itt	mi
 8008ee4:	2320      	movmi	r3, #32
 8008ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eea:	0713      	lsls	r3, r2, #28
 8008eec:	bf44      	itt	mi
 8008eee:	232b      	movmi	r3, #43	; 0x2b
 8008ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8008efa:	d015      	beq.n	8008f28 <_vfiprintf_r+0x120>
 8008efc:	9a07      	ldr	r2, [sp, #28]
 8008efe:	4654      	mov	r4, sl
 8008f00:	2000      	movs	r0, #0
 8008f02:	f04f 0c0a 	mov.w	ip, #10
 8008f06:	4621      	mov	r1, r4
 8008f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f0c:	3b30      	subs	r3, #48	; 0x30
 8008f0e:	2b09      	cmp	r3, #9
 8008f10:	d94d      	bls.n	8008fae <_vfiprintf_r+0x1a6>
 8008f12:	b1b0      	cbz	r0, 8008f42 <_vfiprintf_r+0x13a>
 8008f14:	9207      	str	r2, [sp, #28]
 8008f16:	e014      	b.n	8008f42 <_vfiprintf_r+0x13a>
 8008f18:	eba0 0308 	sub.w	r3, r0, r8
 8008f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f20:	4313      	orrs	r3, r2
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	46a2      	mov	sl, r4
 8008f26:	e7d2      	b.n	8008ece <_vfiprintf_r+0xc6>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	1d19      	adds	r1, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	9103      	str	r1, [sp, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bfbb      	ittet	lt
 8008f34:	425b      	neglt	r3, r3
 8008f36:	f042 0202 	orrlt.w	r2, r2, #2
 8008f3a:	9307      	strge	r3, [sp, #28]
 8008f3c:	9307      	strlt	r3, [sp, #28]
 8008f3e:	bfb8      	it	lt
 8008f40:	9204      	strlt	r2, [sp, #16]
 8008f42:	7823      	ldrb	r3, [r4, #0]
 8008f44:	2b2e      	cmp	r3, #46	; 0x2e
 8008f46:	d10c      	bne.n	8008f62 <_vfiprintf_r+0x15a>
 8008f48:	7863      	ldrb	r3, [r4, #1]
 8008f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4c:	d134      	bne.n	8008fb8 <_vfiprintf_r+0x1b0>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	9203      	str	r2, [sp, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bfb8      	it	lt
 8008f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f5e:	3402      	adds	r4, #2
 8008f60:	9305      	str	r3, [sp, #20]
 8008f62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009038 <_vfiprintf_r+0x230>
 8008f66:	7821      	ldrb	r1, [r4, #0]
 8008f68:	2203      	movs	r2, #3
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	f7f7 f930 	bl	80001d0 <memchr>
 8008f70:	b138      	cbz	r0, 8008f82 <_vfiprintf_r+0x17a>
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	eba0 000a 	sub.w	r0, r0, sl
 8008f78:	2240      	movs	r2, #64	; 0x40
 8008f7a:	4082      	lsls	r2, r0
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	3401      	adds	r4, #1
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f86:	4829      	ldr	r0, [pc, #164]	; (800902c <_vfiprintf_r+0x224>)
 8008f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	f7f7 f91f 	bl	80001d0 <memchr>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d03f      	beq.n	8009016 <_vfiprintf_r+0x20e>
 8008f96:	4b26      	ldr	r3, [pc, #152]	; (8009030 <_vfiprintf_r+0x228>)
 8008f98:	bb1b      	cbnz	r3, 8008fe2 <_vfiprintf_r+0x1da>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	3307      	adds	r3, #7
 8008f9e:	f023 0307 	bic.w	r3, r3, #7
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	9303      	str	r3, [sp, #12]
 8008fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa8:	443b      	add	r3, r7
 8008faa:	9309      	str	r3, [sp, #36]	; 0x24
 8008fac:	e768      	b.n	8008e80 <_vfiprintf_r+0x78>
 8008fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	e7a6      	b.n	8008f06 <_vfiprintf_r+0xfe>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	3401      	adds	r4, #1
 8008fbc:	9305      	str	r3, [sp, #20]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	f04f 0c0a 	mov.w	ip, #10
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fca:	3a30      	subs	r2, #48	; 0x30
 8008fcc:	2a09      	cmp	r2, #9
 8008fce:	d903      	bls.n	8008fd8 <_vfiprintf_r+0x1d0>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0c6      	beq.n	8008f62 <_vfiprintf_r+0x15a>
 8008fd4:	9105      	str	r1, [sp, #20]
 8008fd6:	e7c4      	b.n	8008f62 <_vfiprintf_r+0x15a>
 8008fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fdc:	4604      	mov	r4, r0
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e7f0      	b.n	8008fc4 <_vfiprintf_r+0x1bc>
 8008fe2:	ab03      	add	r3, sp, #12
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	4b12      	ldr	r3, [pc, #72]	; (8009034 <_vfiprintf_r+0x22c>)
 8008fea:	a904      	add	r1, sp, #16
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7fb fe4b 	bl	8004c88 <_printf_float>
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	1c78      	adds	r0, r7, #1
 8008ff6:	d1d6      	bne.n	8008fa6 <_vfiprintf_r+0x19e>
 8008ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ffa:	07d9      	lsls	r1, r3, #31
 8008ffc:	d405      	bmi.n	800900a <_vfiprintf_r+0x202>
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	059a      	lsls	r2, r3, #22
 8009002:	d402      	bmi.n	800900a <_vfiprintf_r+0x202>
 8009004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009006:	f7fc fdb9 	bl	8005b7c <__retarget_lock_release_recursive>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	065b      	lsls	r3, r3, #25
 800900e:	f53f af1d 	bmi.w	8008e4c <_vfiprintf_r+0x44>
 8009012:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009014:	e71c      	b.n	8008e50 <_vfiprintf_r+0x48>
 8009016:	ab03      	add	r3, sp, #12
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	462a      	mov	r2, r5
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <_vfiprintf_r+0x22c>)
 800901e:	a904      	add	r1, sp, #16
 8009020:	4630      	mov	r0, r6
 8009022:	f7fc f8d5 	bl	80051d0 <_printf_i>
 8009026:	e7e4      	b.n	8008ff2 <_vfiprintf_r+0x1ea>
 8009028:	080096e1 	.word	0x080096e1
 800902c:	080096eb 	.word	0x080096eb
 8009030:	08004c89 	.word	0x08004c89
 8009034:	08008de5 	.word	0x08008de5
 8009038:	080096e7 	.word	0x080096e7

0800903c <__swbuf_r>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	460e      	mov	r6, r1
 8009040:	4614      	mov	r4, r2
 8009042:	4605      	mov	r5, r0
 8009044:	b118      	cbz	r0, 800904e <__swbuf_r+0x12>
 8009046:	6a03      	ldr	r3, [r0, #32]
 8009048:	b90b      	cbnz	r3, 800904e <__swbuf_r+0x12>
 800904a:	f7fc fc7f 	bl	800594c <__sinit>
 800904e:	69a3      	ldr	r3, [r4, #24]
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	071a      	lsls	r2, r3, #28
 8009056:	d525      	bpl.n	80090a4 <__swbuf_r+0x68>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	b31b      	cbz	r3, 80090a4 <__swbuf_r+0x68>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	6922      	ldr	r2, [r4, #16]
 8009060:	1a98      	subs	r0, r3, r2
 8009062:	6963      	ldr	r3, [r4, #20]
 8009064:	b2f6      	uxtb	r6, r6
 8009066:	4283      	cmp	r3, r0
 8009068:	4637      	mov	r7, r6
 800906a:	dc04      	bgt.n	8009076 <__swbuf_r+0x3a>
 800906c:	4621      	mov	r1, r4
 800906e:	4628      	mov	r0, r5
 8009070:	f7ff fa2a 	bl	80084c8 <_fflush_r>
 8009074:	b9e0      	cbnz	r0, 80090b0 <__swbuf_r+0x74>
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	3b01      	subs	r3, #1
 800907a:	60a3      	str	r3, [r4, #8]
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	6022      	str	r2, [r4, #0]
 8009082:	701e      	strb	r6, [r3, #0]
 8009084:	6962      	ldr	r2, [r4, #20]
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	429a      	cmp	r2, r3
 800908a:	d004      	beq.n	8009096 <__swbuf_r+0x5a>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	07db      	lsls	r3, r3, #31
 8009090:	d506      	bpl.n	80090a0 <__swbuf_r+0x64>
 8009092:	2e0a      	cmp	r6, #10
 8009094:	d104      	bne.n	80090a0 <__swbuf_r+0x64>
 8009096:	4621      	mov	r1, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f7ff fa15 	bl	80084c8 <_fflush_r>
 800909e:	b938      	cbnz	r0, 80090b0 <__swbuf_r+0x74>
 80090a0:	4638      	mov	r0, r7
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a4:	4621      	mov	r1, r4
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 f806 	bl	80090b8 <__swsetup_r>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d0d5      	beq.n	800905c <__swbuf_r+0x20>
 80090b0:	f04f 37ff 	mov.w	r7, #4294967295
 80090b4:	e7f4      	b.n	80090a0 <__swbuf_r+0x64>
	...

080090b8 <__swsetup_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <__swsetup_r+0xac>)
 80090bc:	4605      	mov	r5, r0
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	460c      	mov	r4, r1
 80090c2:	b118      	cbz	r0, 80090cc <__swsetup_r+0x14>
 80090c4:	6a03      	ldr	r3, [r0, #32]
 80090c6:	b90b      	cbnz	r3, 80090cc <__swsetup_r+0x14>
 80090c8:	f7fc fc40 	bl	800594c <__sinit>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d2:	0718      	lsls	r0, r3, #28
 80090d4:	d422      	bmi.n	800911c <__swsetup_r+0x64>
 80090d6:	06d9      	lsls	r1, r3, #27
 80090d8:	d407      	bmi.n	80090ea <__swsetup_r+0x32>
 80090da:	2309      	movs	r3, #9
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	e034      	b.n	8009154 <__swsetup_r+0x9c>
 80090ea:	0758      	lsls	r0, r3, #29
 80090ec:	d512      	bpl.n	8009114 <__swsetup_r+0x5c>
 80090ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090f0:	b141      	cbz	r1, 8009104 <__swsetup_r+0x4c>
 80090f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f6:	4299      	cmp	r1, r3
 80090f8:	d002      	beq.n	8009100 <__swsetup_r+0x48>
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7fd fbc2 	bl	8006884 <_free_r>
 8009100:	2300      	movs	r3, #0
 8009102:	6363      	str	r3, [r4, #52]	; 0x34
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	2300      	movs	r3, #0
 800910e:	6063      	str	r3, [r4, #4]
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f043 0308 	orr.w	r3, r3, #8
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	b94b      	cbnz	r3, 8009134 <__swsetup_r+0x7c>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912a:	d003      	beq.n	8009134 <__swsetup_r+0x7c>
 800912c:	4621      	mov	r1, r4
 800912e:	4628      	mov	r0, r5
 8009130:	f000 f884 	bl	800923c <__smakebuf_r>
 8009134:	89a0      	ldrh	r0, [r4, #12]
 8009136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800913a:	f010 0301 	ands.w	r3, r0, #1
 800913e:	d00a      	beq.n	8009156 <__swsetup_r+0x9e>
 8009140:	2300      	movs	r3, #0
 8009142:	60a3      	str	r3, [r4, #8]
 8009144:	6963      	ldr	r3, [r4, #20]
 8009146:	425b      	negs	r3, r3
 8009148:	61a3      	str	r3, [r4, #24]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	b943      	cbnz	r3, 8009160 <__swsetup_r+0xa8>
 800914e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009152:	d1c4      	bne.n	80090de <__swsetup_r+0x26>
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	0781      	lsls	r1, r0, #30
 8009158:	bf58      	it	pl
 800915a:	6963      	ldrpl	r3, [r4, #20]
 800915c:	60a3      	str	r3, [r4, #8]
 800915e:	e7f4      	b.n	800914a <__swsetup_r+0x92>
 8009160:	2000      	movs	r0, #0
 8009162:	e7f7      	b.n	8009154 <__swsetup_r+0x9c>
 8009164:	20000064 	.word	0x20000064

08009168 <_raise_r>:
 8009168:	291f      	cmp	r1, #31
 800916a:	b538      	push	{r3, r4, r5, lr}
 800916c:	4604      	mov	r4, r0
 800916e:	460d      	mov	r5, r1
 8009170:	d904      	bls.n	800917c <_raise_r+0x14>
 8009172:	2316      	movs	r3, #22
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800917e:	b112      	cbz	r2, 8009186 <_raise_r+0x1e>
 8009180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009184:	b94b      	cbnz	r3, 800919a <_raise_r+0x32>
 8009186:	4620      	mov	r0, r4
 8009188:	f000 f830 	bl	80091ec <_getpid_r>
 800918c:	462a      	mov	r2, r5
 800918e:	4601      	mov	r1, r0
 8009190:	4620      	mov	r0, r4
 8009192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009196:	f000 b817 	b.w	80091c8 <_kill_r>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d00a      	beq.n	80091b4 <_raise_r+0x4c>
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	d103      	bne.n	80091aa <_raise_r+0x42>
 80091a2:	2316      	movs	r3, #22
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	2001      	movs	r0, #1
 80091a8:	e7e7      	b.n	800917a <_raise_r+0x12>
 80091aa:	2400      	movs	r4, #0
 80091ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091b0:	4628      	mov	r0, r5
 80091b2:	4798      	blx	r3
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7e0      	b.n	800917a <_raise_r+0x12>

080091b8 <raise>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <raise+0xc>)
 80091ba:	4601      	mov	r1, r0
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f7ff bfd3 	b.w	8009168 <_raise_r>
 80091c2:	bf00      	nop
 80091c4:	20000064 	.word	0x20000064

080091c8 <_kill_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4d07      	ldr	r5, [pc, #28]	; (80091e8 <_kill_r+0x20>)
 80091cc:	2300      	movs	r3, #0
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	f7f8 f843 	bl	8001260 <_kill>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d102      	bne.n	80091e4 <_kill_r+0x1c>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b103      	cbz	r3, 80091e4 <_kill_r+0x1c>
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	2000080c 	.word	0x2000080c

080091ec <_getpid_r>:
 80091ec:	f7f8 b830 	b.w	8001250 <_getpid>

080091f0 <__swhatbuf_r>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	460c      	mov	r4, r1
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	2900      	cmp	r1, #0
 80091fa:	b096      	sub	sp, #88	; 0x58
 80091fc:	4615      	mov	r5, r2
 80091fe:	461e      	mov	r6, r3
 8009200:	da0d      	bge.n	800921e <__swhatbuf_r+0x2e>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009208:	f04f 0100 	mov.w	r1, #0
 800920c:	bf0c      	ite	eq
 800920e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009212:	2340      	movne	r3, #64	; 0x40
 8009214:	2000      	movs	r0, #0
 8009216:	6031      	str	r1, [r6, #0]
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	b016      	add	sp, #88	; 0x58
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	466a      	mov	r2, sp
 8009220:	f000 f848 	bl	80092b4 <_fstat_r>
 8009224:	2800      	cmp	r0, #0
 8009226:	dbec      	blt.n	8009202 <__swhatbuf_r+0x12>
 8009228:	9901      	ldr	r1, [sp, #4]
 800922a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800922e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009232:	4259      	negs	r1, r3
 8009234:	4159      	adcs	r1, r3
 8009236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800923a:	e7eb      	b.n	8009214 <__swhatbuf_r+0x24>

0800923c <__smakebuf_r>:
 800923c:	898b      	ldrh	r3, [r1, #12]
 800923e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009240:	079d      	lsls	r5, r3, #30
 8009242:	4606      	mov	r6, r0
 8009244:	460c      	mov	r4, r1
 8009246:	d507      	bpl.n	8009258 <__smakebuf_r+0x1c>
 8009248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	2301      	movs	r3, #1
 8009252:	6163      	str	r3, [r4, #20]
 8009254:	b002      	add	sp, #8
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	ab01      	add	r3, sp, #4
 800925a:	466a      	mov	r2, sp
 800925c:	f7ff ffc8 	bl	80091f0 <__swhatbuf_r>
 8009260:	9900      	ldr	r1, [sp, #0]
 8009262:	4605      	mov	r5, r0
 8009264:	4630      	mov	r0, r6
 8009266:	f7fd fb81 	bl	800696c <_malloc_r>
 800926a:	b948      	cbnz	r0, 8009280 <__smakebuf_r+0x44>
 800926c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009270:	059a      	lsls	r2, r3, #22
 8009272:	d4ef      	bmi.n	8009254 <__smakebuf_r+0x18>
 8009274:	f023 0303 	bic.w	r3, r3, #3
 8009278:	f043 0302 	orr.w	r3, r3, #2
 800927c:	81a3      	strh	r3, [r4, #12]
 800927e:	e7e3      	b.n	8009248 <__smakebuf_r+0xc>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	6163      	str	r3, [r4, #20]
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	6120      	str	r0, [r4, #16]
 8009292:	b15b      	cbz	r3, 80092ac <__smakebuf_r+0x70>
 8009294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009298:	4630      	mov	r0, r6
 800929a:	f000 f81d 	bl	80092d8 <_isatty_r>
 800929e:	b128      	cbz	r0, 80092ac <__smakebuf_r+0x70>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f023 0303 	bic.w	r3, r3, #3
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	431d      	orrs	r5, r3
 80092b0:	81a5      	strh	r5, [r4, #12]
 80092b2:	e7cf      	b.n	8009254 <__smakebuf_r+0x18>

080092b4 <_fstat_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d07      	ldr	r5, [pc, #28]	; (80092d4 <_fstat_r+0x20>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	4611      	mov	r1, r2
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	f7f8 f82c 	bl	800131e <_fstat>
 80092c6:	1c43      	adds	r3, r0, #1
 80092c8:	d102      	bne.n	80092d0 <_fstat_r+0x1c>
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	b103      	cbz	r3, 80092d0 <_fstat_r+0x1c>
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	bd38      	pop	{r3, r4, r5, pc}
 80092d2:	bf00      	nop
 80092d4:	2000080c 	.word	0x2000080c

080092d8 <_isatty_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d06      	ldr	r5, [pc, #24]	; (80092f4 <_isatty_r+0x1c>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	602b      	str	r3, [r5, #0]
 80092e4:	f7f8 f82b 	bl	800133e <_isatty>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_isatty_r+0x1a>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_isatty_r+0x1a>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	2000080c 	.word	0x2000080c

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr
